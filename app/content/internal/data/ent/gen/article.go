// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Article is the model entity for the Article schema.
type Article struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 作者ID
	UserID string `json:"user_id,omitempty"`
	// 标题
	Title string `json:"title,omitempty"`
	// 正文内容
	Content string `json:"content,omitempty"`
	// 是否有附言
	HasPostscript bool `json:"has_postscript,omitempty"`
	// 打赏区内容
	RewardContent string `json:"reward_content,omitempty"`
	// 打赏积分
	RewardPoints int `json:"reward_points,omitempty"`
	// 状态 0-正常 1-隐藏 2-锁定 3-草稿 4-删除
	Status int `json:"status,omitempty"`
	// 类型 0-普通 1-问答 2-投票 3-抽奖
	Type int `json:"type,omitempty"`
	// 是否允许评论
	Commentable bool `json:"commentable,omitempty"`
	// 是否允许评论
	Anonymous bool `json:"anonymous,omitempty"`
	// 帖子感谢数
	ThankCount int `json:"thank_count,omitempty"`
	// 点赞数
	LikeCount int `json:"like_count,omitempty"`
	// 点踩数
	DislikeCount int `json:"dislike_count,omitempty"`
	// 收藏数
	CollectCount int `json:"collect_count,omitempty"`
	// 关注数
	WatchCount int `json:"watch_count,omitempty"`
	// 悬赏积分
	BountyPoints int `json:"bounty_points,omitempty"`
	// 采纳评论ID
	AcceptedAnswerID int `json:"accepted_answer_id,omitempty"`
	// 总投票数
	VoteTotal int `json:"vote_total,omitempty"`
	// 抽奖参与人数
	LotteryParticipantCount int `json:"lottery_participant_count,omitempty"`
	// 抽奖获奖人数
	LotteryWinnerCount int `json:"lottery_winner_count,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArticleQuery when eager-loading is set.
	Edges        ArticleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArticleEdges holds the relations/edges for other nodes in the graph.
type ArticleEdges struct {
	// Postscripts holds the value of the postscripts edge.
	Postscripts []*ArticlePostscript `json:"postscripts,omitempty"`
	// Votes holds the value of the votes edge.
	Votes []*ArticleVote `json:"votes,omitempty"`
	// Lotteries holds the value of the lotteries edge.
	Lotteries []*ArticleLottery `json:"lotteries,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PostscriptsOrErr returns the Postscripts value or an error if the edge
// was not loaded in eager-loading.
func (e ArticleEdges) PostscriptsOrErr() ([]*ArticlePostscript, error) {
	if e.loadedTypes[0] {
		return e.Postscripts, nil
	}
	return nil, &NotLoadedError{edge: "postscripts"}
}

// VotesOrErr returns the Votes value or an error if the edge
// was not loaded in eager-loading.
func (e ArticleEdges) VotesOrErr() ([]*ArticleVote, error) {
	if e.loadedTypes[1] {
		return e.Votes, nil
	}
	return nil, &NotLoadedError{edge: "votes"}
}

// LotteriesOrErr returns the Lotteries value or an error if the edge
// was not loaded in eager-loading.
func (e ArticleEdges) LotteriesOrErr() ([]*ArticleLottery, error) {
	if e.loadedTypes[2] {
		return e.Lotteries, nil
	}
	return nil, &NotLoadedError{edge: "lotteries"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ArticleEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[3] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ArticleEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[4] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Article) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case article.FieldHasPostscript, article.FieldCommentable, article.FieldAnonymous:
			values[i] = new(sql.NullBool)
		case article.FieldID, article.FieldRewardPoints, article.FieldStatus, article.FieldType, article.FieldThankCount, article.FieldLikeCount, article.FieldDislikeCount, article.FieldCollectCount, article.FieldWatchCount, article.FieldBountyPoints, article.FieldAcceptedAnswerID, article.FieldVoteTotal, article.FieldLotteryParticipantCount, article.FieldLotteryWinnerCount:
			values[i] = new(sql.NullInt64)
		case article.FieldUserID, article.FieldTitle, article.FieldContent, article.FieldRewardContent:
			values[i] = new(sql.NullString)
		case article.FieldCreatedAt, article.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Article fields.
func (_m *Article) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case article.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case article.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case article.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case article.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case article.FieldHasPostscript:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_postscript", values[i])
			} else if value.Valid {
				_m.HasPostscript = value.Bool
			}
		case article.FieldRewardContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reward_content", values[i])
			} else if value.Valid {
				_m.RewardContent = value.String
			}
		case article.FieldRewardPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reward_points", values[i])
			} else if value.Valid {
				_m.RewardPoints = int(value.Int64)
			}
		case article.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = int(value.Int64)
			}
		case article.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = int(value.Int64)
			}
		case article.FieldCommentable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field commentable", values[i])
			} else if value.Valid {
				_m.Commentable = value.Bool
			}
		case article.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				_m.Anonymous = value.Bool
			}
		case article.FieldThankCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thank_count", values[i])
			} else if value.Valid {
				_m.ThankCount = int(value.Int64)
			}
		case article.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				_m.LikeCount = int(value.Int64)
			}
		case article.FieldDislikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dislike_count", values[i])
			} else if value.Valid {
				_m.DislikeCount = int(value.Int64)
			}
		case article.FieldCollectCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field collect_count", values[i])
			} else if value.Valid {
				_m.CollectCount = int(value.Int64)
			}
		case article.FieldWatchCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field watch_count", values[i])
			} else if value.Valid {
				_m.WatchCount = int(value.Int64)
			}
		case article.FieldBountyPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bounty_points", values[i])
			} else if value.Valid {
				_m.BountyPoints = int(value.Int64)
			}
		case article.FieldAcceptedAnswerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accepted_answer_id", values[i])
			} else if value.Valid {
				_m.AcceptedAnswerID = int(value.Int64)
			}
		case article.FieldVoteTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vote_total", values[i])
			} else if value.Valid {
				_m.VoteTotal = int(value.Int64)
			}
		case article.FieldLotteryParticipantCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lottery_participant_count", values[i])
			} else if value.Valid {
				_m.LotteryParticipantCount = int(value.Int64)
			}
		case article.FieldLotteryWinnerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lottery_winner_count", values[i])
			} else if value.Valid {
				_m.LotteryWinnerCount = int(value.Int64)
			}
		case article.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case article.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Article.
// This includes values selected through modifiers, order, etc.
func (_m *Article) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPostscripts queries the "postscripts" edge of the Article entity.
func (_m *Article) QueryPostscripts() *ArticlePostscriptQuery {
	return NewArticleClient(_m.config).QueryPostscripts(_m)
}

// QueryVotes queries the "votes" edge of the Article entity.
func (_m *Article) QueryVotes() *ArticleVoteQuery {
	return NewArticleClient(_m.config).QueryVotes(_m)
}

// QueryLotteries queries the "lotteries" edge of the Article entity.
func (_m *Article) QueryLotteries() *ArticleLotteryQuery {
	return NewArticleClient(_m.config).QueryLotteries(_m)
}

// QueryComments queries the "comments" edge of the Article entity.
func (_m *Article) QueryComments() *CommentQuery {
	return NewArticleClient(_m.config).QueryComments(_m)
}

// QueryTags queries the "tags" edge of the Article entity.
func (_m *Article) QueryTags() *TagQuery {
	return NewArticleClient(_m.config).QueryTags(_m)
}

// Update returns a builder for updating this Article.
// Note that you need to call Article.Unwrap() before calling this method if this Article
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Article) Update() *ArticleUpdateOne {
	return NewArticleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Article entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Article) Unwrap() *Article {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: Article is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Article) String() string {
	var builder strings.Builder
	builder.WriteString("Article(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	builder.WriteString("has_postscript=")
	builder.WriteString(fmt.Sprintf("%v", _m.HasPostscript))
	builder.WriteString(", ")
	builder.WriteString("reward_content=")
	builder.WriteString(_m.RewardContent)
	builder.WriteString(", ")
	builder.WriteString("reward_points=")
	builder.WriteString(fmt.Sprintf("%v", _m.RewardPoints))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("commentable=")
	builder.WriteString(fmt.Sprintf("%v", _m.Commentable))
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", _m.Anonymous))
	builder.WriteString(", ")
	builder.WriteString("thank_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.ThankCount))
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("dislike_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.DislikeCount))
	builder.WriteString(", ")
	builder.WriteString("collect_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.CollectCount))
	builder.WriteString(", ")
	builder.WriteString("watch_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.WatchCount))
	builder.WriteString(", ")
	builder.WriteString("bounty_points=")
	builder.WriteString(fmt.Sprintf("%v", _m.BountyPoints))
	builder.WriteString(", ")
	builder.WriteString("accepted_answer_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.AcceptedAnswerID))
	builder.WriteString(", ")
	builder.WriteString("vote_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.VoteTotal))
	builder.WriteString(", ")
	builder.WriteString("lottery_participant_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LotteryParticipantCount))
	builder.WriteString(", ")
	builder.WriteString("lottery_winner_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LotteryWinnerCount))
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Articles is a parsable slice of Article.
type Articles []*Article
