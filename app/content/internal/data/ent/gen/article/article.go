// Code generated by ent, DO NOT EDIT.

package article

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the article type in the database.
	Label = "article"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldHasPostscript holds the string denoting the has_postscript field in the database.
	FieldHasPostscript = "has_postscript"
	// FieldRewardContent holds the string denoting the reward_content field in the database.
	FieldRewardContent = "reward_content"
	// FieldRewardPoints holds the string denoting the reward_points field in the database.
	FieldRewardPoints = "reward_points"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCommentable holds the string denoting the commentable field in the database.
	FieldCommentable = "commentable"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// FieldThankCount holds the string denoting the thank_count field in the database.
	FieldThankCount = "thank_count"
	// FieldLikeCount holds the string denoting the like_count field in the database.
	FieldLikeCount = "like_count"
	// FieldCollectCount holds the string denoting the collect_count field in the database.
	FieldCollectCount = "collect_count"
	// FieldWatchCount holds the string denoting the watch_count field in the database.
	FieldWatchCount = "watch_count"
	// FieldBountyPoints holds the string denoting the bounty_points field in the database.
	FieldBountyPoints = "bounty_points"
	// FieldAcceptedAnswerID holds the string denoting the accepted_answer_id field in the database.
	FieldAcceptedAnswerID = "accepted_answer_id"
	// FieldVoteTotal holds the string denoting the vote_total field in the database.
	FieldVoteTotal = "vote_total"
	// FieldLotteryParticipantCount holds the string denoting the lottery_participant_count field in the database.
	FieldLotteryParticipantCount = "lottery_participant_count"
	// FieldLotteryWinnerCount holds the string denoting the lottery_winner_count field in the database.
	FieldLotteryWinnerCount = "lottery_winner_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePostscripts holds the string denoting the postscripts edge name in mutations.
	EdgePostscripts = "postscripts"
	// EdgeVotes holds the string denoting the votes edge name in mutations.
	EdgeVotes = "votes"
	// EdgeLotteries holds the string denoting the lotteries edge name in mutations.
	EdgeLotteries = "lotteries"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeActionRecords holds the string denoting the action_records edge name in mutations.
	EdgeActionRecords = "action_records"
	// Table holds the table name of the article in the database.
	Table = "articles"
	// PostscriptsTable is the table that holds the postscripts relation/edge.
	PostscriptsTable = "article_postscripts"
	// PostscriptsInverseTable is the table name for the ArticlePostscript entity.
	// It exists in this package in order to avoid circular dependency with the "articlepostscript" package.
	PostscriptsInverseTable = "article_postscripts"
	// PostscriptsColumn is the table column denoting the postscripts relation/edge.
	PostscriptsColumn = "article_id"
	// VotesTable is the table that holds the votes relation/edge.
	VotesTable = "article_votes"
	// VotesInverseTable is the table name for the ArticleVote entity.
	// It exists in this package in order to avoid circular dependency with the "articlevote" package.
	VotesInverseTable = "article_votes"
	// VotesColumn is the table column denoting the votes relation/edge.
	VotesColumn = "article_id"
	// LotteriesTable is the table that holds the lotteries relation/edge.
	LotteriesTable = "article_lotteries"
	// LotteriesInverseTable is the table name for the ArticleLottery entity.
	// It exists in this package in order to avoid circular dependency with the "articlelottery" package.
	LotteriesInverseTable = "article_lotteries"
	// LotteriesColumn is the table column denoting the lotteries relation/edge.
	LotteriesColumn = "article_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "article_id"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "article_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// ActionRecordsTable is the table that holds the action_records relation/edge.
	ActionRecordsTable = "article_action_records"
	// ActionRecordsInverseTable is the table name for the ArticleActionRecord entity.
	// It exists in this package in order to avoid circular dependency with the "articleactionrecord" package.
	ActionRecordsInverseTable = "article_action_records"
	// ActionRecordsColumn is the table column denoting the action_records relation/edge.
	ActionRecordsColumn = "article_id"
)

// Columns holds all SQL columns for article fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTitle,
	FieldContent,
	FieldHasPostscript,
	FieldRewardContent,
	FieldRewardPoints,
	FieldStatus,
	FieldType,
	FieldCommentable,
	FieldAnonymous,
	FieldThankCount,
	FieldLikeCount,
	FieldCollectCount,
	FieldWatchCount,
	FieldBountyPoints,
	FieldAcceptedAnswerID,
	FieldVoteTotal,
	FieldLotteryParticipantCount,
	FieldLotteryWinnerCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"article_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultHasPostscript holds the default value on creation for the "has_postscript" field.
	DefaultHasPostscript bool
	// DefaultRewardPoints holds the default value on creation for the "reward_points" field.
	DefaultRewardPoints int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultCommentable holds the default value on creation for the "commentable" field.
	DefaultCommentable bool
	// DefaultAnonymous holds the default value on creation for the "anonymous" field.
	DefaultAnonymous bool
	// DefaultThankCount holds the default value on creation for the "thank_count" field.
	DefaultThankCount int
	// DefaultLikeCount holds the default value on creation for the "like_count" field.
	DefaultLikeCount int
	// DefaultCollectCount holds the default value on creation for the "collect_count" field.
	DefaultCollectCount int
	// DefaultWatchCount holds the default value on creation for the "watch_count" field.
	DefaultWatchCount int
	// DefaultBountyPoints holds the default value on creation for the "bounty_points" field.
	DefaultBountyPoints int
	// DefaultVoteTotal holds the default value on creation for the "vote_total" field.
	DefaultVoteTotal int
	// DefaultLotteryParticipantCount holds the default value on creation for the "lottery_participant_count" field.
	DefaultLotteryParticipantCount int
	// DefaultLotteryWinnerCount holds the default value on creation for the "lottery_winner_count" field.
	DefaultLotteryWinnerCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Article queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByHasPostscript orders the results by the has_postscript field.
func ByHasPostscript(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasPostscript, opts...).ToFunc()
}

// ByRewardContent orders the results by the reward_content field.
func ByRewardContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardContent, opts...).ToFunc()
}

// ByRewardPoints orders the results by the reward_points field.
func ByRewardPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardPoints, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCommentable orders the results by the commentable field.
func ByCommentable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentable, opts...).ToFunc()
}

// ByAnonymous orders the results by the anonymous field.
func ByAnonymous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnonymous, opts...).ToFunc()
}

// ByThankCount orders the results by the thank_count field.
func ByThankCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThankCount, opts...).ToFunc()
}

// ByLikeCount orders the results by the like_count field.
func ByLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeCount, opts...).ToFunc()
}

// ByCollectCount orders the results by the collect_count field.
func ByCollectCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectCount, opts...).ToFunc()
}

// ByWatchCount orders the results by the watch_count field.
func ByWatchCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatchCount, opts...).ToFunc()
}

// ByBountyPoints orders the results by the bounty_points field.
func ByBountyPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBountyPoints, opts...).ToFunc()
}

// ByAcceptedAnswerID orders the results by the accepted_answer_id field.
func ByAcceptedAnswerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcceptedAnswerID, opts...).ToFunc()
}

// ByVoteTotal orders the results by the vote_total field.
func ByVoteTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoteTotal, opts...).ToFunc()
}

// ByLotteryParticipantCount orders the results by the lottery_participant_count field.
func ByLotteryParticipantCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLotteryParticipantCount, opts...).ToFunc()
}

// ByLotteryWinnerCount orders the results by the lottery_winner_count field.
func ByLotteryWinnerCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLotteryWinnerCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPostscriptsCount orders the results by postscripts count.
func ByPostscriptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostscriptsStep(), opts...)
	}
}

// ByPostscripts orders the results by postscripts terms.
func ByPostscripts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostscriptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVotesCount orders the results by votes count.
func ByVotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVotesStep(), opts...)
	}
}

// ByVotes orders the results by votes terms.
func ByVotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLotteriesCount orders the results by lotteries count.
func ByLotteriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLotteriesStep(), opts...)
	}
}

// ByLotteries orders the results by lotteries terms.
func ByLotteries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLotteriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActionRecordsCount orders the results by action_records count.
func ByActionRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActionRecordsStep(), opts...)
	}
}

// ByActionRecords orders the results by action_records terms.
func ByActionRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostscriptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostscriptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostscriptsTable, PostscriptsColumn),
	)
}
func newVotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
	)
}
func newLotteriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LotteriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LotteriesTable, LotteriesColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newActionRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActionRecordsTable, ActionRecordsColumn),
	)
}
