// Code generated by ent, DO NOT EDIT.

package article

import (
	"content/internal/data/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContent, v))
}

// HasPostscript applies equality check predicate on the "has_postscript" field. It's identical to HasPostscriptEQ.
func HasPostscript(v bool) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldHasPostscript, v))
}

// RewardContent applies equality check predicate on the "reward_content" field. It's identical to RewardContentEQ.
func RewardContent(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldRewardContent, v))
}

// RewardPoints applies equality check predicate on the "reward_points" field. It's identical to RewardPointsEQ.
func RewardPoints(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldRewardPoints, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldStatus, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldType, v))
}

// Commentable applies equality check predicate on the "commentable" field. It's identical to CommentableEQ.
func Commentable(v bool) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCommentable, v))
}

// Anonymous applies equality check predicate on the "anonymous" field. It's identical to AnonymousEQ.
func Anonymous(v bool) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAnonymous, v))
}

// ThankCount applies equality check predicate on the "thank_count" field. It's identical to ThankCountEQ.
func ThankCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldThankCount, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLikeCount, v))
}

// DislikeCount applies equality check predicate on the "dislike_count" field. It's identical to DislikeCountEQ.
func DislikeCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldDislikeCount, v))
}

// CollectCount applies equality check predicate on the "collect_count" field. It's identical to CollectCountEQ.
func CollectCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCollectCount, v))
}

// WatchCount applies equality check predicate on the "watch_count" field. It's identical to WatchCountEQ.
func WatchCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldWatchCount, v))
}

// BountyPoints applies equality check predicate on the "bounty_points" field. It's identical to BountyPointsEQ.
func BountyPoints(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldBountyPoints, v))
}

// AcceptedAnswerID applies equality check predicate on the "accepted_answer_id" field. It's identical to AcceptedAnswerIDEQ.
func AcceptedAnswerID(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAcceptedAnswerID, v))
}

// VoteTotal applies equality check predicate on the "vote_total" field. It's identical to VoteTotalEQ.
func VoteTotal(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldVoteTotal, v))
}

// LotteryParticipantCount applies equality check predicate on the "lottery_participant_count" field. It's identical to LotteryParticipantCountEQ.
func LotteryParticipantCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLotteryParticipantCount, v))
}

// LotteryWinnerCount applies equality check predicate on the "lottery_winner_count" field. It's identical to LotteryWinnerCountEQ.
func LotteryWinnerCount(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLotteryWinnerCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldUserID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldContent, v))
}

// HasPostscriptEQ applies the EQ predicate on the "has_postscript" field.
func HasPostscriptEQ(v bool) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldHasPostscript, v))
}

// HasPostscriptNEQ applies the NEQ predicate on the "has_postscript" field.
func HasPostscriptNEQ(v bool) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldHasPostscript, v))
}

// RewardContentEQ applies the EQ predicate on the "reward_content" field.
func RewardContentEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldRewardContent, v))
}

// RewardContentNEQ applies the NEQ predicate on the "reward_content" field.
func RewardContentNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldRewardContent, v))
}

// RewardContentIn applies the In predicate on the "reward_content" field.
func RewardContentIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldRewardContent, vs...))
}

// RewardContentNotIn applies the NotIn predicate on the "reward_content" field.
func RewardContentNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldRewardContent, vs...))
}

// RewardContentGT applies the GT predicate on the "reward_content" field.
func RewardContentGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldRewardContent, v))
}

// RewardContentGTE applies the GTE predicate on the "reward_content" field.
func RewardContentGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldRewardContent, v))
}

// RewardContentLT applies the LT predicate on the "reward_content" field.
func RewardContentLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldRewardContent, v))
}

// RewardContentLTE applies the LTE predicate on the "reward_content" field.
func RewardContentLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldRewardContent, v))
}

// RewardContentContains applies the Contains predicate on the "reward_content" field.
func RewardContentContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldRewardContent, v))
}

// RewardContentHasPrefix applies the HasPrefix predicate on the "reward_content" field.
func RewardContentHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldRewardContent, v))
}

// RewardContentHasSuffix applies the HasSuffix predicate on the "reward_content" field.
func RewardContentHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldRewardContent, v))
}

// RewardContentIsNil applies the IsNil predicate on the "reward_content" field.
func RewardContentIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldRewardContent))
}

// RewardContentNotNil applies the NotNil predicate on the "reward_content" field.
func RewardContentNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldRewardContent))
}

// RewardContentEqualFold applies the EqualFold predicate on the "reward_content" field.
func RewardContentEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldRewardContent, v))
}

// RewardContentContainsFold applies the ContainsFold predicate on the "reward_content" field.
func RewardContentContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldRewardContent, v))
}

// RewardPointsEQ applies the EQ predicate on the "reward_points" field.
func RewardPointsEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldRewardPoints, v))
}

// RewardPointsNEQ applies the NEQ predicate on the "reward_points" field.
func RewardPointsNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldRewardPoints, v))
}

// RewardPointsIn applies the In predicate on the "reward_points" field.
func RewardPointsIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldRewardPoints, vs...))
}

// RewardPointsNotIn applies the NotIn predicate on the "reward_points" field.
func RewardPointsNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldRewardPoints, vs...))
}

// RewardPointsGT applies the GT predicate on the "reward_points" field.
func RewardPointsGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldRewardPoints, v))
}

// RewardPointsGTE applies the GTE predicate on the "reward_points" field.
func RewardPointsGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldRewardPoints, v))
}

// RewardPointsLT applies the LT predicate on the "reward_points" field.
func RewardPointsLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldRewardPoints, v))
}

// RewardPointsLTE applies the LTE predicate on the "reward_points" field.
func RewardPointsLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldRewardPoints, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldStatus, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldType, v))
}

// CommentableEQ applies the EQ predicate on the "commentable" field.
func CommentableEQ(v bool) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCommentable, v))
}

// CommentableNEQ applies the NEQ predicate on the "commentable" field.
func CommentableNEQ(v bool) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCommentable, v))
}

// AnonymousEQ applies the EQ predicate on the "anonymous" field.
func AnonymousEQ(v bool) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAnonymous, v))
}

// AnonymousNEQ applies the NEQ predicate on the "anonymous" field.
func AnonymousNEQ(v bool) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldAnonymous, v))
}

// ThankCountEQ applies the EQ predicate on the "thank_count" field.
func ThankCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldThankCount, v))
}

// ThankCountNEQ applies the NEQ predicate on the "thank_count" field.
func ThankCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldThankCount, v))
}

// ThankCountIn applies the In predicate on the "thank_count" field.
func ThankCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldThankCount, vs...))
}

// ThankCountNotIn applies the NotIn predicate on the "thank_count" field.
func ThankCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldThankCount, vs...))
}

// ThankCountGT applies the GT predicate on the "thank_count" field.
func ThankCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldThankCount, v))
}

// ThankCountGTE applies the GTE predicate on the "thank_count" field.
func ThankCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldThankCount, v))
}

// ThankCountLT applies the LT predicate on the "thank_count" field.
func ThankCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldThankCount, v))
}

// ThankCountLTE applies the LTE predicate on the "thank_count" field.
func ThankCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldThankCount, v))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldLikeCount, v))
}

// DislikeCountEQ applies the EQ predicate on the "dislike_count" field.
func DislikeCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldDislikeCount, v))
}

// DislikeCountNEQ applies the NEQ predicate on the "dislike_count" field.
func DislikeCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldDislikeCount, v))
}

// DislikeCountIn applies the In predicate on the "dislike_count" field.
func DislikeCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldDislikeCount, vs...))
}

// DislikeCountNotIn applies the NotIn predicate on the "dislike_count" field.
func DislikeCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldDislikeCount, vs...))
}

// DislikeCountGT applies the GT predicate on the "dislike_count" field.
func DislikeCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldDislikeCount, v))
}

// DislikeCountGTE applies the GTE predicate on the "dislike_count" field.
func DislikeCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldDislikeCount, v))
}

// DislikeCountLT applies the LT predicate on the "dislike_count" field.
func DislikeCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldDislikeCount, v))
}

// DislikeCountLTE applies the LTE predicate on the "dislike_count" field.
func DislikeCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldDislikeCount, v))
}

// CollectCountEQ applies the EQ predicate on the "collect_count" field.
func CollectCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCollectCount, v))
}

// CollectCountNEQ applies the NEQ predicate on the "collect_count" field.
func CollectCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCollectCount, v))
}

// CollectCountIn applies the In predicate on the "collect_count" field.
func CollectCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCollectCount, vs...))
}

// CollectCountNotIn applies the NotIn predicate on the "collect_count" field.
func CollectCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCollectCount, vs...))
}

// CollectCountGT applies the GT predicate on the "collect_count" field.
func CollectCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCollectCount, v))
}

// CollectCountGTE applies the GTE predicate on the "collect_count" field.
func CollectCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCollectCount, v))
}

// CollectCountLT applies the LT predicate on the "collect_count" field.
func CollectCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCollectCount, v))
}

// CollectCountLTE applies the LTE predicate on the "collect_count" field.
func CollectCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCollectCount, v))
}

// WatchCountEQ applies the EQ predicate on the "watch_count" field.
func WatchCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldWatchCount, v))
}

// WatchCountNEQ applies the NEQ predicate on the "watch_count" field.
func WatchCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldWatchCount, v))
}

// WatchCountIn applies the In predicate on the "watch_count" field.
func WatchCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldWatchCount, vs...))
}

// WatchCountNotIn applies the NotIn predicate on the "watch_count" field.
func WatchCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldWatchCount, vs...))
}

// WatchCountGT applies the GT predicate on the "watch_count" field.
func WatchCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldWatchCount, v))
}

// WatchCountGTE applies the GTE predicate on the "watch_count" field.
func WatchCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldWatchCount, v))
}

// WatchCountLT applies the LT predicate on the "watch_count" field.
func WatchCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldWatchCount, v))
}

// WatchCountLTE applies the LTE predicate on the "watch_count" field.
func WatchCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldWatchCount, v))
}

// BountyPointsEQ applies the EQ predicate on the "bounty_points" field.
func BountyPointsEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldBountyPoints, v))
}

// BountyPointsNEQ applies the NEQ predicate on the "bounty_points" field.
func BountyPointsNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldBountyPoints, v))
}

// BountyPointsIn applies the In predicate on the "bounty_points" field.
func BountyPointsIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldBountyPoints, vs...))
}

// BountyPointsNotIn applies the NotIn predicate on the "bounty_points" field.
func BountyPointsNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldBountyPoints, vs...))
}

// BountyPointsGT applies the GT predicate on the "bounty_points" field.
func BountyPointsGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldBountyPoints, v))
}

// BountyPointsGTE applies the GTE predicate on the "bounty_points" field.
func BountyPointsGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldBountyPoints, v))
}

// BountyPointsLT applies the LT predicate on the "bounty_points" field.
func BountyPointsLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldBountyPoints, v))
}

// BountyPointsLTE applies the LTE predicate on the "bounty_points" field.
func BountyPointsLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldBountyPoints, v))
}

// AcceptedAnswerIDEQ applies the EQ predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAcceptedAnswerID, v))
}

// AcceptedAnswerIDNEQ applies the NEQ predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldAcceptedAnswerID, v))
}

// AcceptedAnswerIDIn applies the In predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldAcceptedAnswerID, vs...))
}

// AcceptedAnswerIDNotIn applies the NotIn predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldAcceptedAnswerID, vs...))
}

// AcceptedAnswerIDGT applies the GT predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldAcceptedAnswerID, v))
}

// AcceptedAnswerIDGTE applies the GTE predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldAcceptedAnswerID, v))
}

// AcceptedAnswerIDLT applies the LT predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldAcceptedAnswerID, v))
}

// AcceptedAnswerIDLTE applies the LTE predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldAcceptedAnswerID, v))
}

// AcceptedAnswerIDIsNil applies the IsNil predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldAcceptedAnswerID))
}

// AcceptedAnswerIDNotNil applies the NotNil predicate on the "accepted_answer_id" field.
func AcceptedAnswerIDNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldAcceptedAnswerID))
}

// VoteTotalEQ applies the EQ predicate on the "vote_total" field.
func VoteTotalEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldVoteTotal, v))
}

// VoteTotalNEQ applies the NEQ predicate on the "vote_total" field.
func VoteTotalNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldVoteTotal, v))
}

// VoteTotalIn applies the In predicate on the "vote_total" field.
func VoteTotalIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldVoteTotal, vs...))
}

// VoteTotalNotIn applies the NotIn predicate on the "vote_total" field.
func VoteTotalNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldVoteTotal, vs...))
}

// VoteTotalGT applies the GT predicate on the "vote_total" field.
func VoteTotalGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldVoteTotal, v))
}

// VoteTotalGTE applies the GTE predicate on the "vote_total" field.
func VoteTotalGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldVoteTotal, v))
}

// VoteTotalLT applies the LT predicate on the "vote_total" field.
func VoteTotalLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldVoteTotal, v))
}

// VoteTotalLTE applies the LTE predicate on the "vote_total" field.
func VoteTotalLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldVoteTotal, v))
}

// LotteryParticipantCountEQ applies the EQ predicate on the "lottery_participant_count" field.
func LotteryParticipantCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLotteryParticipantCount, v))
}

// LotteryParticipantCountNEQ applies the NEQ predicate on the "lottery_participant_count" field.
func LotteryParticipantCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldLotteryParticipantCount, v))
}

// LotteryParticipantCountIn applies the In predicate on the "lottery_participant_count" field.
func LotteryParticipantCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldLotteryParticipantCount, vs...))
}

// LotteryParticipantCountNotIn applies the NotIn predicate on the "lottery_participant_count" field.
func LotteryParticipantCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldLotteryParticipantCount, vs...))
}

// LotteryParticipantCountGT applies the GT predicate on the "lottery_participant_count" field.
func LotteryParticipantCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldLotteryParticipantCount, v))
}

// LotteryParticipantCountGTE applies the GTE predicate on the "lottery_participant_count" field.
func LotteryParticipantCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldLotteryParticipantCount, v))
}

// LotteryParticipantCountLT applies the LT predicate on the "lottery_participant_count" field.
func LotteryParticipantCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldLotteryParticipantCount, v))
}

// LotteryParticipantCountLTE applies the LTE predicate on the "lottery_participant_count" field.
func LotteryParticipantCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldLotteryParticipantCount, v))
}

// LotteryWinnerCountEQ applies the EQ predicate on the "lottery_winner_count" field.
func LotteryWinnerCountEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLotteryWinnerCount, v))
}

// LotteryWinnerCountNEQ applies the NEQ predicate on the "lottery_winner_count" field.
func LotteryWinnerCountNEQ(v int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldLotteryWinnerCount, v))
}

// LotteryWinnerCountIn applies the In predicate on the "lottery_winner_count" field.
func LotteryWinnerCountIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldLotteryWinnerCount, vs...))
}

// LotteryWinnerCountNotIn applies the NotIn predicate on the "lottery_winner_count" field.
func LotteryWinnerCountNotIn(vs ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldLotteryWinnerCount, vs...))
}

// LotteryWinnerCountGT applies the GT predicate on the "lottery_winner_count" field.
func LotteryWinnerCountGT(v int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldLotteryWinnerCount, v))
}

// LotteryWinnerCountGTE applies the GTE predicate on the "lottery_winner_count" field.
func LotteryWinnerCountGTE(v int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldLotteryWinnerCount, v))
}

// LotteryWinnerCountLT applies the LT predicate on the "lottery_winner_count" field.
func LotteryWinnerCountLT(v int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldLotteryWinnerCount, v))
}

// LotteryWinnerCountLTE applies the LTE predicate on the "lottery_winner_count" field.
func LotteryWinnerCountLTE(v int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldLotteryWinnerCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPostscripts applies the HasEdge predicate on the "postscripts" edge.
func HasPostscripts() predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostscriptsTable, PostscriptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostscriptsWith applies the HasEdge predicate on the "postscripts" edge with a given conditions (other predicates).
func HasPostscriptsWith(preds ...predicate.ArticlePostscript) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := newPostscriptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVotes applies the HasEdge predicate on the "votes" edge.
func HasVotes() predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVotesWith applies the HasEdge predicate on the "votes" edge with a given conditions (other predicates).
func HasVotesWith(preds ...predicate.ArticleVote) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := newVotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLotteries applies the HasEdge predicate on the "lotteries" edge.
func HasLotteries() predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LotteriesTable, LotteriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLotteriesWith applies the HasEdge predicate on the "lotteries" edge with a given conditions (other predicates).
func HasLotteriesWith(preds ...predicate.ArticleLottery) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := newLotteriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Article) predicate.Article {
	return predicate.Article(sql.NotPredicates(p))
}
