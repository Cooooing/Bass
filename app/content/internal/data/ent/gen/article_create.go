// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articleactionrecord"
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlepostscript"
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/comment"
	"content/internal/data/ent/gen/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleCreate is the builder for creating a Article entity.
type ArticleCreate struct {
	config
	mutation *ArticleMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (_c *ArticleCreate) SetUserID(v int) *ArticleCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ArticleCreate) SetTitle(v string) *ArticleCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *ArticleCreate) SetContent(v string) *ArticleCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetHasPostscript sets the "has_postscript" field.
func (_c *ArticleCreate) SetHasPostscript(v bool) *ArticleCreate {
	_c.mutation.SetHasPostscript(v)
	return _c
}

// SetNillableHasPostscript sets the "has_postscript" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableHasPostscript(v *bool) *ArticleCreate {
	if v != nil {
		_c.SetHasPostscript(*v)
	}
	return _c
}

// SetRewardContent sets the "reward_content" field.
func (_c *ArticleCreate) SetRewardContent(v string) *ArticleCreate {
	_c.mutation.SetRewardContent(v)
	return _c
}

// SetNillableRewardContent sets the "reward_content" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableRewardContent(v *string) *ArticleCreate {
	if v != nil {
		_c.SetRewardContent(*v)
	}
	return _c
}

// SetRewardPoints sets the "reward_points" field.
func (_c *ArticleCreate) SetRewardPoints(v int) *ArticleCreate {
	_c.mutation.SetRewardPoints(v)
	return _c
}

// SetNillableRewardPoints sets the "reward_points" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableRewardPoints(v *int) *ArticleCreate {
	if v != nil {
		_c.SetRewardPoints(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ArticleCreate) SetStatus(v int) *ArticleCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableStatus(v *int) *ArticleCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *ArticleCreate) SetType(v int) *ArticleCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableType(v *int) *ArticleCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetCommentable sets the "commentable" field.
func (_c *ArticleCreate) SetCommentable(v bool) *ArticleCreate {
	_c.mutation.SetCommentable(v)
	return _c
}

// SetNillableCommentable sets the "commentable" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableCommentable(v *bool) *ArticleCreate {
	if v != nil {
		_c.SetCommentable(*v)
	}
	return _c
}

// SetAnonymous sets the "anonymous" field.
func (_c *ArticleCreate) SetAnonymous(v bool) *ArticleCreate {
	_c.mutation.SetAnonymous(v)
	return _c
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableAnonymous(v *bool) *ArticleCreate {
	if v != nil {
		_c.SetAnonymous(*v)
	}
	return _c
}

// SetThankCount sets the "thank_count" field.
func (_c *ArticleCreate) SetThankCount(v int) *ArticleCreate {
	_c.mutation.SetThankCount(v)
	return _c
}

// SetNillableThankCount sets the "thank_count" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableThankCount(v *int) *ArticleCreate {
	if v != nil {
		_c.SetThankCount(*v)
	}
	return _c
}

// SetLikeCount sets the "like_count" field.
func (_c *ArticleCreate) SetLikeCount(v int) *ArticleCreate {
	_c.mutation.SetLikeCount(v)
	return _c
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableLikeCount(v *int) *ArticleCreate {
	if v != nil {
		_c.SetLikeCount(*v)
	}
	return _c
}

// SetCollectCount sets the "collect_count" field.
func (_c *ArticleCreate) SetCollectCount(v int) *ArticleCreate {
	_c.mutation.SetCollectCount(v)
	return _c
}

// SetNillableCollectCount sets the "collect_count" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableCollectCount(v *int) *ArticleCreate {
	if v != nil {
		_c.SetCollectCount(*v)
	}
	return _c
}

// SetWatchCount sets the "watch_count" field.
func (_c *ArticleCreate) SetWatchCount(v int) *ArticleCreate {
	_c.mutation.SetWatchCount(v)
	return _c
}

// SetNillableWatchCount sets the "watch_count" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableWatchCount(v *int) *ArticleCreate {
	if v != nil {
		_c.SetWatchCount(*v)
	}
	return _c
}

// SetBountyPoints sets the "bounty_points" field.
func (_c *ArticleCreate) SetBountyPoints(v int) *ArticleCreate {
	_c.mutation.SetBountyPoints(v)
	return _c
}

// SetNillableBountyPoints sets the "bounty_points" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableBountyPoints(v *int) *ArticleCreate {
	if v != nil {
		_c.SetBountyPoints(*v)
	}
	return _c
}

// SetAcceptedAnswerID sets the "accepted_answer_id" field.
func (_c *ArticleCreate) SetAcceptedAnswerID(v int) *ArticleCreate {
	_c.mutation.SetAcceptedAnswerID(v)
	return _c
}

// SetNillableAcceptedAnswerID sets the "accepted_answer_id" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableAcceptedAnswerID(v *int) *ArticleCreate {
	if v != nil {
		_c.SetAcceptedAnswerID(*v)
	}
	return _c
}

// SetVoteTotal sets the "vote_total" field.
func (_c *ArticleCreate) SetVoteTotal(v int) *ArticleCreate {
	_c.mutation.SetVoteTotal(v)
	return _c
}

// SetNillableVoteTotal sets the "vote_total" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableVoteTotal(v *int) *ArticleCreate {
	if v != nil {
		_c.SetVoteTotal(*v)
	}
	return _c
}

// SetLotteryParticipantCount sets the "lottery_participant_count" field.
func (_c *ArticleCreate) SetLotteryParticipantCount(v int) *ArticleCreate {
	_c.mutation.SetLotteryParticipantCount(v)
	return _c
}

// SetNillableLotteryParticipantCount sets the "lottery_participant_count" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableLotteryParticipantCount(v *int) *ArticleCreate {
	if v != nil {
		_c.SetLotteryParticipantCount(*v)
	}
	return _c
}

// SetLotteryWinnerCount sets the "lottery_winner_count" field.
func (_c *ArticleCreate) SetLotteryWinnerCount(v int) *ArticleCreate {
	_c.mutation.SetLotteryWinnerCount(v)
	return _c
}

// SetNillableLotteryWinnerCount sets the "lottery_winner_count" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableLotteryWinnerCount(v *int) *ArticleCreate {
	if v != nil {
		_c.SetLotteryWinnerCount(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ArticleCreate) SetCreatedAt(v time.Time) *ArticleCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableCreatedAt(v *time.Time) *ArticleCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ArticleCreate) SetUpdatedAt(v time.Time) *ArticleCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ArticleCreate) SetNillableUpdatedAt(v *time.Time) *ArticleCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddPostscriptIDs adds the "postscripts" edge to the ArticlePostscript entity by IDs.
func (_c *ArticleCreate) AddPostscriptIDs(ids ...int) *ArticleCreate {
	_c.mutation.AddPostscriptIDs(ids...)
	return _c
}

// AddPostscripts adds the "postscripts" edges to the ArticlePostscript entity.
func (_c *ArticleCreate) AddPostscripts(v ...*ArticlePostscript) *ArticleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPostscriptIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the ArticleVote entity by IDs.
func (_c *ArticleCreate) AddVoteIDs(ids ...int) *ArticleCreate {
	_c.mutation.AddVoteIDs(ids...)
	return _c
}

// AddVotes adds the "votes" edges to the ArticleVote entity.
func (_c *ArticleCreate) AddVotes(v ...*ArticleVote) *ArticleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddVoteIDs(ids...)
}

// AddLotteryIDs adds the "lotteries" edge to the ArticleLottery entity by IDs.
func (_c *ArticleCreate) AddLotteryIDs(ids ...int) *ArticleCreate {
	_c.mutation.AddLotteryIDs(ids...)
	return _c
}

// AddLotteries adds the "lotteries" edges to the ArticleLottery entity.
func (_c *ArticleCreate) AddLotteries(v ...*ArticleLottery) *ArticleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLotteryIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_c *ArticleCreate) AddCommentIDs(ids ...int) *ArticleCreate {
	_c.mutation.AddCommentIDs(ids...)
	return _c
}

// AddComments adds the "comments" edges to the Comment entity.
func (_c *ArticleCreate) AddComments(v ...*Comment) *ArticleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_c *ArticleCreate) AddTagIDs(ids ...int) *ArticleCreate {
	_c.mutation.AddTagIDs(ids...)
	return _c
}

// AddTags adds the "tags" edges to the Tag entity.
func (_c *ArticleCreate) AddTags(v ...*Tag) *ArticleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTagIDs(ids...)
}

// AddActionRecordIDs adds the "action_records" edge to the ArticleActionRecord entity by IDs.
func (_c *ArticleCreate) AddActionRecordIDs(ids ...int) *ArticleCreate {
	_c.mutation.AddActionRecordIDs(ids...)
	return _c
}

// AddActionRecords adds the "action_records" edges to the ArticleActionRecord entity.
func (_c *ArticleCreate) AddActionRecords(v ...*ArticleActionRecord) *ArticleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionRecordIDs(ids...)
}

// Mutation returns the ArticleMutation object of the builder.
func (_c *ArticleCreate) Mutation() *ArticleMutation {
	return _c.mutation
}

// Save creates the Article in the database.
func (_c *ArticleCreate) Save(ctx context.Context) (*Article, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ArticleCreate) SaveX(ctx context.Context) *Article {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArticleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArticleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ArticleCreate) defaults() {
	if _, ok := _c.mutation.HasPostscript(); !ok {
		v := article.DefaultHasPostscript
		_c.mutation.SetHasPostscript(v)
	}
	if _, ok := _c.mutation.RewardPoints(); !ok {
		v := article.DefaultRewardPoints
		_c.mutation.SetRewardPoints(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := article.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := article.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Commentable(); !ok {
		v := article.DefaultCommentable
		_c.mutation.SetCommentable(v)
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		v := article.DefaultAnonymous
		_c.mutation.SetAnonymous(v)
	}
	if _, ok := _c.mutation.ThankCount(); !ok {
		v := article.DefaultThankCount
		_c.mutation.SetThankCount(v)
	}
	if _, ok := _c.mutation.LikeCount(); !ok {
		v := article.DefaultLikeCount
		_c.mutation.SetLikeCount(v)
	}
	if _, ok := _c.mutation.CollectCount(); !ok {
		v := article.DefaultCollectCount
		_c.mutation.SetCollectCount(v)
	}
	if _, ok := _c.mutation.WatchCount(); !ok {
		v := article.DefaultWatchCount
		_c.mutation.SetWatchCount(v)
	}
	if _, ok := _c.mutation.BountyPoints(); !ok {
		v := article.DefaultBountyPoints
		_c.mutation.SetBountyPoints(v)
	}
	if _, ok := _c.mutation.VoteTotal(); !ok {
		v := article.DefaultVoteTotal
		_c.mutation.SetVoteTotal(v)
	}
	if _, ok := _c.mutation.LotteryParticipantCount(); !ok {
		v := article.DefaultLotteryParticipantCount
		_c.mutation.SetLotteryParticipantCount(v)
	}
	if _, ok := _c.mutation.LotteryWinnerCount(); !ok {
		v := article.DefaultLotteryWinnerCount
		_c.mutation.SetLotteryWinnerCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := article.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := article.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ArticleCreate) check() error {
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`gen: missing required field "Article.user_id"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`gen: missing required field "Article.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`gen: validator failed for field "Article.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`gen: missing required field "Article.content"`)}
	}
	if v, ok := _c.mutation.Content(); ok {
		if err := article.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`gen: validator failed for field "Article.content": %w`, err)}
		}
	}
	if _, ok := _c.mutation.HasPostscript(); !ok {
		return &ValidationError{Name: "has_postscript", err: errors.New(`gen: missing required field "Article.has_postscript"`)}
	}
	if _, ok := _c.mutation.RewardPoints(); !ok {
		return &ValidationError{Name: "reward_points", err: errors.New(`gen: missing required field "Article.reward_points"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Article.status"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "Article.type"`)}
	}
	if _, ok := _c.mutation.Commentable(); !ok {
		return &ValidationError{Name: "commentable", err: errors.New(`gen: missing required field "Article.commentable"`)}
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		return &ValidationError{Name: "anonymous", err: errors.New(`gen: missing required field "Article.anonymous"`)}
	}
	if _, ok := _c.mutation.ThankCount(); !ok {
		return &ValidationError{Name: "thank_count", err: errors.New(`gen: missing required field "Article.thank_count"`)}
	}
	if _, ok := _c.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`gen: missing required field "Article.like_count"`)}
	}
	if _, ok := _c.mutation.CollectCount(); !ok {
		return &ValidationError{Name: "collect_count", err: errors.New(`gen: missing required field "Article.collect_count"`)}
	}
	if _, ok := _c.mutation.WatchCount(); !ok {
		return &ValidationError{Name: "watch_count", err: errors.New(`gen: missing required field "Article.watch_count"`)}
	}
	if _, ok := _c.mutation.BountyPoints(); !ok {
		return &ValidationError{Name: "bounty_points", err: errors.New(`gen: missing required field "Article.bounty_points"`)}
	}
	if _, ok := _c.mutation.VoteTotal(); !ok {
		return &ValidationError{Name: "vote_total", err: errors.New(`gen: missing required field "Article.vote_total"`)}
	}
	if _, ok := _c.mutation.LotteryParticipantCount(); !ok {
		return &ValidationError{Name: "lottery_participant_count", err: errors.New(`gen: missing required field "Article.lottery_participant_count"`)}
	}
	if _, ok := _c.mutation.LotteryWinnerCount(); !ok {
		return &ValidationError{Name: "lottery_winner_count", err: errors.New(`gen: missing required field "Article.lottery_winner_count"`)}
	}
	return nil
}

func (_c *ArticleCreate) sqlSave(ctx context.Context) (*Article, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ArticleCreate) createSpec() (*Article, *sqlgraph.CreateSpec) {
	var (
		_node = &Article{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(article.Table, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(article.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.HasPostscript(); ok {
		_spec.SetField(article.FieldHasPostscript, field.TypeBool, value)
		_node.HasPostscript = value
	}
	if value, ok := _c.mutation.RewardContent(); ok {
		_spec.SetField(article.FieldRewardContent, field.TypeString, value)
		_node.RewardContent = &value
	}
	if value, ok := _c.mutation.RewardPoints(); ok {
		_spec.SetField(article.FieldRewardPoints, field.TypeInt, value)
		_node.RewardPoints = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(article.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(article.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Commentable(); ok {
		_spec.SetField(article.FieldCommentable, field.TypeBool, value)
		_node.Commentable = value
	}
	if value, ok := _c.mutation.Anonymous(); ok {
		_spec.SetField(article.FieldAnonymous, field.TypeBool, value)
		_node.Anonymous = value
	}
	if value, ok := _c.mutation.ThankCount(); ok {
		_spec.SetField(article.FieldThankCount, field.TypeInt, value)
		_node.ThankCount = value
	}
	if value, ok := _c.mutation.LikeCount(); ok {
		_spec.SetField(article.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := _c.mutation.CollectCount(); ok {
		_spec.SetField(article.FieldCollectCount, field.TypeInt, value)
		_node.CollectCount = value
	}
	if value, ok := _c.mutation.WatchCount(); ok {
		_spec.SetField(article.FieldWatchCount, field.TypeInt, value)
		_node.WatchCount = value
	}
	if value, ok := _c.mutation.BountyPoints(); ok {
		_spec.SetField(article.FieldBountyPoints, field.TypeInt, value)
		_node.BountyPoints = value
	}
	if value, ok := _c.mutation.AcceptedAnswerID(); ok {
		_spec.SetField(article.FieldAcceptedAnswerID, field.TypeInt, value)
		_node.AcceptedAnswerID = value
	}
	if value, ok := _c.mutation.VoteTotal(); ok {
		_spec.SetField(article.FieldVoteTotal, field.TypeInt, value)
		_node.VoteTotal = value
	}
	if value, ok := _c.mutation.LotteryParticipantCount(); ok {
		_spec.SetField(article.FieldLotteryParticipantCount, field.TypeInt, value)
		_node.LotteryParticipantCount = value
	}
	if value, ok := _c.mutation.LotteryWinnerCount(); ok {
		_spec.SetField(article.FieldLotteryWinnerCount, field.TypeInt, value)
		_node.LotteryWinnerCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(article.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.PostscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LotteriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.ActionRecordsTable,
			Columns: []string{article.ActionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articleactionrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArticleCreateBulk is the builder for creating many Article entities in bulk.
type ArticleCreateBulk struct {
	config
	err      error
	builders []*ArticleCreate
}

// Save creates the Article entities in the database.
func (_c *ArticleCreateBulk) Save(ctx context.Context) ([]*Article, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Article, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ArticleCreateBulk) SaveX(ctx context.Context) []*Article {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArticleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
