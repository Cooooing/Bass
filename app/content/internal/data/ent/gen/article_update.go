// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlepostscript"
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/comment"
	"content/internal/data/ent/gen/predicate"
	"content/internal/data/ent/gen/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleUpdate is the builder for updating Article entities.
type ArticleUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleMutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (_u *ArticleUpdate) Where(ps ...predicate.Article) *ArticleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleUpdate) SetUserID(v string) *ArticleUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableUserID(v *string) *ArticleUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ArticleUpdate) SetTitle(v string) *ArticleUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableTitle(v *string) *ArticleUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *ArticleUpdate) SetContent(v string) *ArticleUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableContent(v *string) *ArticleUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetHasPostscript sets the "has_postscript" field.
func (_u *ArticleUpdate) SetHasPostscript(v bool) *ArticleUpdate {
	_u.mutation.SetHasPostscript(v)
	return _u
}

// SetNillableHasPostscript sets the "has_postscript" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableHasPostscript(v *bool) *ArticleUpdate {
	if v != nil {
		_u.SetHasPostscript(*v)
	}
	return _u
}

// SetRewardContent sets the "reward_content" field.
func (_u *ArticleUpdate) SetRewardContent(v string) *ArticleUpdate {
	_u.mutation.SetRewardContent(v)
	return _u
}

// SetNillableRewardContent sets the "reward_content" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableRewardContent(v *string) *ArticleUpdate {
	if v != nil {
		_u.SetRewardContent(*v)
	}
	return _u
}

// ClearRewardContent clears the value of the "reward_content" field.
func (_u *ArticleUpdate) ClearRewardContent() *ArticleUpdate {
	_u.mutation.ClearRewardContent()
	return _u
}

// SetRewardPoints sets the "reward_points" field.
func (_u *ArticleUpdate) SetRewardPoints(v int) *ArticleUpdate {
	_u.mutation.ResetRewardPoints()
	_u.mutation.SetRewardPoints(v)
	return _u
}

// SetNillableRewardPoints sets the "reward_points" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableRewardPoints(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetRewardPoints(*v)
	}
	return _u
}

// AddRewardPoints adds value to the "reward_points" field.
func (_u *ArticleUpdate) AddRewardPoints(v int) *ArticleUpdate {
	_u.mutation.AddRewardPoints(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ArticleUpdate) SetStatus(v int) *ArticleUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableStatus(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *ArticleUpdate) AddStatus(v int) *ArticleUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetType sets the "type" field.
func (_u *ArticleUpdate) SetType(v int) *ArticleUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableType(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *ArticleUpdate) AddType(v int) *ArticleUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetCommentable sets the "commentable" field.
func (_u *ArticleUpdate) SetCommentable(v bool) *ArticleUpdate {
	_u.mutation.SetCommentable(v)
	return _u
}

// SetNillableCommentable sets the "commentable" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableCommentable(v *bool) *ArticleUpdate {
	if v != nil {
		_u.SetCommentable(*v)
	}
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *ArticleUpdate) SetAnonymous(v bool) *ArticleUpdate {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableAnonymous(v *bool) *ArticleUpdate {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// SetThankCount sets the "thank_count" field.
func (_u *ArticleUpdate) SetThankCount(v int) *ArticleUpdate {
	_u.mutation.ResetThankCount()
	_u.mutation.SetThankCount(v)
	return _u
}

// SetNillableThankCount sets the "thank_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableThankCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetThankCount(*v)
	}
	return _u
}

// AddThankCount adds value to the "thank_count" field.
func (_u *ArticleUpdate) AddThankCount(v int) *ArticleUpdate {
	_u.mutation.AddThankCount(v)
	return _u
}

// SetLikeCount sets the "like_count" field.
func (_u *ArticleUpdate) SetLikeCount(v int) *ArticleUpdate {
	_u.mutation.ResetLikeCount()
	_u.mutation.SetLikeCount(v)
	return _u
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableLikeCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetLikeCount(*v)
	}
	return _u
}

// AddLikeCount adds value to the "like_count" field.
func (_u *ArticleUpdate) AddLikeCount(v int) *ArticleUpdate {
	_u.mutation.AddLikeCount(v)
	return _u
}

// SetDislikeCount sets the "dislike_count" field.
func (_u *ArticleUpdate) SetDislikeCount(v int) *ArticleUpdate {
	_u.mutation.ResetDislikeCount()
	_u.mutation.SetDislikeCount(v)
	return _u
}

// SetNillableDislikeCount sets the "dislike_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableDislikeCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetDislikeCount(*v)
	}
	return _u
}

// AddDislikeCount adds value to the "dislike_count" field.
func (_u *ArticleUpdate) AddDislikeCount(v int) *ArticleUpdate {
	_u.mutation.AddDislikeCount(v)
	return _u
}

// SetCollectCount sets the "collect_count" field.
func (_u *ArticleUpdate) SetCollectCount(v int) *ArticleUpdate {
	_u.mutation.ResetCollectCount()
	_u.mutation.SetCollectCount(v)
	return _u
}

// SetNillableCollectCount sets the "collect_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableCollectCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetCollectCount(*v)
	}
	return _u
}

// AddCollectCount adds value to the "collect_count" field.
func (_u *ArticleUpdate) AddCollectCount(v int) *ArticleUpdate {
	_u.mutation.AddCollectCount(v)
	return _u
}

// SetWatchCount sets the "watch_count" field.
func (_u *ArticleUpdate) SetWatchCount(v int) *ArticleUpdate {
	_u.mutation.ResetWatchCount()
	_u.mutation.SetWatchCount(v)
	return _u
}

// SetNillableWatchCount sets the "watch_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableWatchCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetWatchCount(*v)
	}
	return _u
}

// AddWatchCount adds value to the "watch_count" field.
func (_u *ArticleUpdate) AddWatchCount(v int) *ArticleUpdate {
	_u.mutation.AddWatchCount(v)
	return _u
}

// SetBountyPoints sets the "bounty_points" field.
func (_u *ArticleUpdate) SetBountyPoints(v int) *ArticleUpdate {
	_u.mutation.ResetBountyPoints()
	_u.mutation.SetBountyPoints(v)
	return _u
}

// SetNillableBountyPoints sets the "bounty_points" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableBountyPoints(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetBountyPoints(*v)
	}
	return _u
}

// AddBountyPoints adds value to the "bounty_points" field.
func (_u *ArticleUpdate) AddBountyPoints(v int) *ArticleUpdate {
	_u.mutation.AddBountyPoints(v)
	return _u
}

// SetAcceptedAnswerID sets the "accepted_answer_id" field.
func (_u *ArticleUpdate) SetAcceptedAnswerID(v int) *ArticleUpdate {
	_u.mutation.ResetAcceptedAnswerID()
	_u.mutation.SetAcceptedAnswerID(v)
	return _u
}

// SetNillableAcceptedAnswerID sets the "accepted_answer_id" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableAcceptedAnswerID(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetAcceptedAnswerID(*v)
	}
	return _u
}

// AddAcceptedAnswerID adds value to the "accepted_answer_id" field.
func (_u *ArticleUpdate) AddAcceptedAnswerID(v int) *ArticleUpdate {
	_u.mutation.AddAcceptedAnswerID(v)
	return _u
}

// ClearAcceptedAnswerID clears the value of the "accepted_answer_id" field.
func (_u *ArticleUpdate) ClearAcceptedAnswerID() *ArticleUpdate {
	_u.mutation.ClearAcceptedAnswerID()
	return _u
}

// SetVoteTotal sets the "vote_total" field.
func (_u *ArticleUpdate) SetVoteTotal(v int) *ArticleUpdate {
	_u.mutation.ResetVoteTotal()
	_u.mutation.SetVoteTotal(v)
	return _u
}

// SetNillableVoteTotal sets the "vote_total" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableVoteTotal(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetVoteTotal(*v)
	}
	return _u
}

// AddVoteTotal adds value to the "vote_total" field.
func (_u *ArticleUpdate) AddVoteTotal(v int) *ArticleUpdate {
	_u.mutation.AddVoteTotal(v)
	return _u
}

// SetLotteryParticipantCount sets the "lottery_participant_count" field.
func (_u *ArticleUpdate) SetLotteryParticipantCount(v int) *ArticleUpdate {
	_u.mutation.ResetLotteryParticipantCount()
	_u.mutation.SetLotteryParticipantCount(v)
	return _u
}

// SetNillableLotteryParticipantCount sets the "lottery_participant_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableLotteryParticipantCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetLotteryParticipantCount(*v)
	}
	return _u
}

// AddLotteryParticipantCount adds value to the "lottery_participant_count" field.
func (_u *ArticleUpdate) AddLotteryParticipantCount(v int) *ArticleUpdate {
	_u.mutation.AddLotteryParticipantCount(v)
	return _u
}

// SetLotteryWinnerCount sets the "lottery_winner_count" field.
func (_u *ArticleUpdate) SetLotteryWinnerCount(v int) *ArticleUpdate {
	_u.mutation.ResetLotteryWinnerCount()
	_u.mutation.SetLotteryWinnerCount(v)
	return _u
}

// SetNillableLotteryWinnerCount sets the "lottery_winner_count" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableLotteryWinnerCount(v *int) *ArticleUpdate {
	if v != nil {
		_u.SetLotteryWinnerCount(*v)
	}
	return _u
}

// AddLotteryWinnerCount adds value to the "lottery_winner_count" field.
func (_u *ArticleUpdate) AddLotteryWinnerCount(v int) *ArticleUpdate {
	_u.mutation.AddLotteryWinnerCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleUpdate) SetCreatedAt(v time.Time) *ArticleUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableCreatedAt(v *time.Time) *ArticleUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleUpdate) SetUpdatedAt(v time.Time) *ArticleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleUpdate) SetNillableUpdatedAt(v *time.Time) *ArticleUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// AddPostscriptIDs adds the "postscripts" edge to the ArticlePostscript entity by IDs.
func (_u *ArticleUpdate) AddPostscriptIDs(ids ...int) *ArticleUpdate {
	_u.mutation.AddPostscriptIDs(ids...)
	return _u
}

// AddPostscripts adds the "postscripts" edges to the ArticlePostscript entity.
func (_u *ArticleUpdate) AddPostscripts(v ...*ArticlePostscript) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostscriptIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the ArticleVote entity by IDs.
func (_u *ArticleUpdate) AddVoteIDs(ids ...int) *ArticleUpdate {
	_u.mutation.AddVoteIDs(ids...)
	return _u
}

// AddVotes adds the "votes" edges to the ArticleVote entity.
func (_u *ArticleUpdate) AddVotes(v ...*ArticleVote) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVoteIDs(ids...)
}

// AddLotteryIDs adds the "lotteries" edge to the ArticleLottery entity by IDs.
func (_u *ArticleUpdate) AddLotteryIDs(ids ...int) *ArticleUpdate {
	_u.mutation.AddLotteryIDs(ids...)
	return _u
}

// AddLotteries adds the "lotteries" edges to the ArticleLottery entity.
func (_u *ArticleUpdate) AddLotteries(v ...*ArticleLottery) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLotteryIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_u *ArticleUpdate) AddCommentIDs(ids ...int) *ArticleUpdate {
	_u.mutation.AddCommentIDs(ids...)
	return _u
}

// AddComments adds the "comments" edges to the Comment entity.
func (_u *ArticleUpdate) AddComments(v ...*Comment) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *ArticleUpdate) AddTagIDs(ids ...int) *ArticleUpdate {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *ArticleUpdate) AddTags(v ...*Tag) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the ArticleMutation object of the builder.
func (_u *ArticleUpdate) Mutation() *ArticleMutation {
	return _u.mutation
}

// ClearPostscripts clears all "postscripts" edges to the ArticlePostscript entity.
func (_u *ArticleUpdate) ClearPostscripts() *ArticleUpdate {
	_u.mutation.ClearPostscripts()
	return _u
}

// RemovePostscriptIDs removes the "postscripts" edge to ArticlePostscript entities by IDs.
func (_u *ArticleUpdate) RemovePostscriptIDs(ids ...int) *ArticleUpdate {
	_u.mutation.RemovePostscriptIDs(ids...)
	return _u
}

// RemovePostscripts removes "postscripts" edges to ArticlePostscript entities.
func (_u *ArticleUpdate) RemovePostscripts(v ...*ArticlePostscript) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostscriptIDs(ids...)
}

// ClearVotes clears all "votes" edges to the ArticleVote entity.
func (_u *ArticleUpdate) ClearVotes() *ArticleUpdate {
	_u.mutation.ClearVotes()
	return _u
}

// RemoveVoteIDs removes the "votes" edge to ArticleVote entities by IDs.
func (_u *ArticleUpdate) RemoveVoteIDs(ids ...int) *ArticleUpdate {
	_u.mutation.RemoveVoteIDs(ids...)
	return _u
}

// RemoveVotes removes "votes" edges to ArticleVote entities.
func (_u *ArticleUpdate) RemoveVotes(v ...*ArticleVote) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVoteIDs(ids...)
}

// ClearLotteries clears all "lotteries" edges to the ArticleLottery entity.
func (_u *ArticleUpdate) ClearLotteries() *ArticleUpdate {
	_u.mutation.ClearLotteries()
	return _u
}

// RemoveLotteryIDs removes the "lotteries" edge to ArticleLottery entities by IDs.
func (_u *ArticleUpdate) RemoveLotteryIDs(ids ...int) *ArticleUpdate {
	_u.mutation.RemoveLotteryIDs(ids...)
	return _u
}

// RemoveLotteries removes "lotteries" edges to ArticleLottery entities.
func (_u *ArticleUpdate) RemoveLotteries(v ...*ArticleLottery) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLotteryIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (_u *ArticleUpdate) ClearComments() *ArticleUpdate {
	_u.mutation.ClearComments()
	return _u
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (_u *ArticleUpdate) RemoveCommentIDs(ids ...int) *ArticleUpdate {
	_u.mutation.RemoveCommentIDs(ids...)
	return _u
}

// RemoveComments removes "comments" edges to Comment entities.
func (_u *ArticleUpdate) RemoveComments(v ...*Comment) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *ArticleUpdate) ClearTags() *ArticleUpdate {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *ArticleUpdate) RemoveTagIDs(ids ...int) *ArticleUpdate {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *ArticleUpdate) RemoveTags(v ...*Tag) *ArticleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleUpdate) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := article.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "Article.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`gen: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Content(); ok {
		if err := article.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`gen: validator failed for field "Article.content": %w`, err)}
		}
	}
	return nil
}

func (_u *ArticleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(article.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.HasPostscript(); ok {
		_spec.SetField(article.FieldHasPostscript, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RewardContent(); ok {
		_spec.SetField(article.FieldRewardContent, field.TypeString, value)
	}
	if _u.mutation.RewardContentCleared() {
		_spec.ClearField(article.FieldRewardContent, field.TypeString)
	}
	if value, ok := _u.mutation.RewardPoints(); ok {
		_spec.SetField(article.FieldRewardPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRewardPoints(); ok {
		_spec.AddField(article.FieldRewardPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(article.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(article.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(article.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(article.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Commentable(); ok {
		_spec.SetField(article.FieldCommentable, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(article.FieldAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ThankCount(); ok {
		_spec.SetField(article.FieldThankCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedThankCount(); ok {
		_spec.AddField(article.FieldThankCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LikeCount(); ok {
		_spec.SetField(article.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLikeCount(); ok {
		_spec.AddField(article.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DislikeCount(); ok {
		_spec.SetField(article.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDislikeCount(); ok {
		_spec.AddField(article.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CollectCount(); ok {
		_spec.SetField(article.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCollectCount(); ok {
		_spec.AddField(article.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WatchCount(); ok {
		_spec.SetField(article.FieldWatchCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWatchCount(); ok {
		_spec.AddField(article.FieldWatchCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BountyPoints(); ok {
		_spec.SetField(article.FieldBountyPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBountyPoints(); ok {
		_spec.AddField(article.FieldBountyPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AcceptedAnswerID(); ok {
		_spec.SetField(article.FieldAcceptedAnswerID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAcceptedAnswerID(); ok {
		_spec.AddField(article.FieldAcceptedAnswerID, field.TypeInt, value)
	}
	if _u.mutation.AcceptedAnswerIDCleared() {
		_spec.ClearField(article.FieldAcceptedAnswerID, field.TypeInt)
	}
	if value, ok := _u.mutation.VoteTotal(); ok {
		_spec.SetField(article.FieldVoteTotal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVoteTotal(); ok {
		_spec.AddField(article.FieldVoteTotal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LotteryParticipantCount(); ok {
		_spec.SetField(article.FieldLotteryParticipantCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLotteryParticipantCount(); ok {
		_spec.AddField(article.FieldLotteryParticipantCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LotteryWinnerCount(); ok {
		_spec.SetField(article.FieldLotteryWinnerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLotteryWinnerCount(); ok {
		_spec.AddField(article.FieldLotteryWinnerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(article.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PostscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostscriptsIDs(); len(nodes) > 0 && !_u.mutation.PostscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVotesIDs(); len(nodes) > 0 && !_u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LotteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLotteriesIDs(); len(nodes) > 0 && !_u.mutation.LotteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LotteriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !_u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleUpdateOne is the builder for updating a single Article entity.
type ArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleMutation
}

// SetUserID sets the "user_id" field.
func (_u *ArticleUpdateOne) SetUserID(v string) *ArticleUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableUserID(v *string) *ArticleUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ArticleUpdateOne) SetTitle(v string) *ArticleUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableTitle(v *string) *ArticleUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *ArticleUpdateOne) SetContent(v string) *ArticleUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableContent(v *string) *ArticleUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetHasPostscript sets the "has_postscript" field.
func (_u *ArticleUpdateOne) SetHasPostscript(v bool) *ArticleUpdateOne {
	_u.mutation.SetHasPostscript(v)
	return _u
}

// SetNillableHasPostscript sets the "has_postscript" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableHasPostscript(v *bool) *ArticleUpdateOne {
	if v != nil {
		_u.SetHasPostscript(*v)
	}
	return _u
}

// SetRewardContent sets the "reward_content" field.
func (_u *ArticleUpdateOne) SetRewardContent(v string) *ArticleUpdateOne {
	_u.mutation.SetRewardContent(v)
	return _u
}

// SetNillableRewardContent sets the "reward_content" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableRewardContent(v *string) *ArticleUpdateOne {
	if v != nil {
		_u.SetRewardContent(*v)
	}
	return _u
}

// ClearRewardContent clears the value of the "reward_content" field.
func (_u *ArticleUpdateOne) ClearRewardContent() *ArticleUpdateOne {
	_u.mutation.ClearRewardContent()
	return _u
}

// SetRewardPoints sets the "reward_points" field.
func (_u *ArticleUpdateOne) SetRewardPoints(v int) *ArticleUpdateOne {
	_u.mutation.ResetRewardPoints()
	_u.mutation.SetRewardPoints(v)
	return _u
}

// SetNillableRewardPoints sets the "reward_points" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableRewardPoints(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetRewardPoints(*v)
	}
	return _u
}

// AddRewardPoints adds value to the "reward_points" field.
func (_u *ArticleUpdateOne) AddRewardPoints(v int) *ArticleUpdateOne {
	_u.mutation.AddRewardPoints(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ArticleUpdateOne) SetStatus(v int) *ArticleUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableStatus(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *ArticleUpdateOne) AddStatus(v int) *ArticleUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetType sets the "type" field.
func (_u *ArticleUpdateOne) SetType(v int) *ArticleUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableType(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *ArticleUpdateOne) AddType(v int) *ArticleUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetCommentable sets the "commentable" field.
func (_u *ArticleUpdateOne) SetCommentable(v bool) *ArticleUpdateOne {
	_u.mutation.SetCommentable(v)
	return _u
}

// SetNillableCommentable sets the "commentable" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableCommentable(v *bool) *ArticleUpdateOne {
	if v != nil {
		_u.SetCommentable(*v)
	}
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *ArticleUpdateOne) SetAnonymous(v bool) *ArticleUpdateOne {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableAnonymous(v *bool) *ArticleUpdateOne {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// SetThankCount sets the "thank_count" field.
func (_u *ArticleUpdateOne) SetThankCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetThankCount()
	_u.mutation.SetThankCount(v)
	return _u
}

// SetNillableThankCount sets the "thank_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableThankCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetThankCount(*v)
	}
	return _u
}

// AddThankCount adds value to the "thank_count" field.
func (_u *ArticleUpdateOne) AddThankCount(v int) *ArticleUpdateOne {
	_u.mutation.AddThankCount(v)
	return _u
}

// SetLikeCount sets the "like_count" field.
func (_u *ArticleUpdateOne) SetLikeCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetLikeCount()
	_u.mutation.SetLikeCount(v)
	return _u
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableLikeCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetLikeCount(*v)
	}
	return _u
}

// AddLikeCount adds value to the "like_count" field.
func (_u *ArticleUpdateOne) AddLikeCount(v int) *ArticleUpdateOne {
	_u.mutation.AddLikeCount(v)
	return _u
}

// SetDislikeCount sets the "dislike_count" field.
func (_u *ArticleUpdateOne) SetDislikeCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetDislikeCount()
	_u.mutation.SetDislikeCount(v)
	return _u
}

// SetNillableDislikeCount sets the "dislike_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableDislikeCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetDislikeCount(*v)
	}
	return _u
}

// AddDislikeCount adds value to the "dislike_count" field.
func (_u *ArticleUpdateOne) AddDislikeCount(v int) *ArticleUpdateOne {
	_u.mutation.AddDislikeCount(v)
	return _u
}

// SetCollectCount sets the "collect_count" field.
func (_u *ArticleUpdateOne) SetCollectCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetCollectCount()
	_u.mutation.SetCollectCount(v)
	return _u
}

// SetNillableCollectCount sets the "collect_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableCollectCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetCollectCount(*v)
	}
	return _u
}

// AddCollectCount adds value to the "collect_count" field.
func (_u *ArticleUpdateOne) AddCollectCount(v int) *ArticleUpdateOne {
	_u.mutation.AddCollectCount(v)
	return _u
}

// SetWatchCount sets the "watch_count" field.
func (_u *ArticleUpdateOne) SetWatchCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetWatchCount()
	_u.mutation.SetWatchCount(v)
	return _u
}

// SetNillableWatchCount sets the "watch_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableWatchCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetWatchCount(*v)
	}
	return _u
}

// AddWatchCount adds value to the "watch_count" field.
func (_u *ArticleUpdateOne) AddWatchCount(v int) *ArticleUpdateOne {
	_u.mutation.AddWatchCount(v)
	return _u
}

// SetBountyPoints sets the "bounty_points" field.
func (_u *ArticleUpdateOne) SetBountyPoints(v int) *ArticleUpdateOne {
	_u.mutation.ResetBountyPoints()
	_u.mutation.SetBountyPoints(v)
	return _u
}

// SetNillableBountyPoints sets the "bounty_points" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableBountyPoints(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetBountyPoints(*v)
	}
	return _u
}

// AddBountyPoints adds value to the "bounty_points" field.
func (_u *ArticleUpdateOne) AddBountyPoints(v int) *ArticleUpdateOne {
	_u.mutation.AddBountyPoints(v)
	return _u
}

// SetAcceptedAnswerID sets the "accepted_answer_id" field.
func (_u *ArticleUpdateOne) SetAcceptedAnswerID(v int) *ArticleUpdateOne {
	_u.mutation.ResetAcceptedAnswerID()
	_u.mutation.SetAcceptedAnswerID(v)
	return _u
}

// SetNillableAcceptedAnswerID sets the "accepted_answer_id" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableAcceptedAnswerID(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetAcceptedAnswerID(*v)
	}
	return _u
}

// AddAcceptedAnswerID adds value to the "accepted_answer_id" field.
func (_u *ArticleUpdateOne) AddAcceptedAnswerID(v int) *ArticleUpdateOne {
	_u.mutation.AddAcceptedAnswerID(v)
	return _u
}

// ClearAcceptedAnswerID clears the value of the "accepted_answer_id" field.
func (_u *ArticleUpdateOne) ClearAcceptedAnswerID() *ArticleUpdateOne {
	_u.mutation.ClearAcceptedAnswerID()
	return _u
}

// SetVoteTotal sets the "vote_total" field.
func (_u *ArticleUpdateOne) SetVoteTotal(v int) *ArticleUpdateOne {
	_u.mutation.ResetVoteTotal()
	_u.mutation.SetVoteTotal(v)
	return _u
}

// SetNillableVoteTotal sets the "vote_total" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableVoteTotal(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetVoteTotal(*v)
	}
	return _u
}

// AddVoteTotal adds value to the "vote_total" field.
func (_u *ArticleUpdateOne) AddVoteTotal(v int) *ArticleUpdateOne {
	_u.mutation.AddVoteTotal(v)
	return _u
}

// SetLotteryParticipantCount sets the "lottery_participant_count" field.
func (_u *ArticleUpdateOne) SetLotteryParticipantCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetLotteryParticipantCount()
	_u.mutation.SetLotteryParticipantCount(v)
	return _u
}

// SetNillableLotteryParticipantCount sets the "lottery_participant_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableLotteryParticipantCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetLotteryParticipantCount(*v)
	}
	return _u
}

// AddLotteryParticipantCount adds value to the "lottery_participant_count" field.
func (_u *ArticleUpdateOne) AddLotteryParticipantCount(v int) *ArticleUpdateOne {
	_u.mutation.AddLotteryParticipantCount(v)
	return _u
}

// SetLotteryWinnerCount sets the "lottery_winner_count" field.
func (_u *ArticleUpdateOne) SetLotteryWinnerCount(v int) *ArticleUpdateOne {
	_u.mutation.ResetLotteryWinnerCount()
	_u.mutation.SetLotteryWinnerCount(v)
	return _u
}

// SetNillableLotteryWinnerCount sets the "lottery_winner_count" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableLotteryWinnerCount(v *int) *ArticleUpdateOne {
	if v != nil {
		_u.SetLotteryWinnerCount(*v)
	}
	return _u
}

// AddLotteryWinnerCount adds value to the "lottery_winner_count" field.
func (_u *ArticleUpdateOne) AddLotteryWinnerCount(v int) *ArticleUpdateOne {
	_u.mutation.AddLotteryWinnerCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleUpdateOne) SetCreatedAt(v time.Time) *ArticleUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableCreatedAt(v *time.Time) *ArticleUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleUpdateOne) SetUpdatedAt(v time.Time) *ArticleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleUpdateOne) SetNillableUpdatedAt(v *time.Time) *ArticleUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// AddPostscriptIDs adds the "postscripts" edge to the ArticlePostscript entity by IDs.
func (_u *ArticleUpdateOne) AddPostscriptIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.AddPostscriptIDs(ids...)
	return _u
}

// AddPostscripts adds the "postscripts" edges to the ArticlePostscript entity.
func (_u *ArticleUpdateOne) AddPostscripts(v ...*ArticlePostscript) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostscriptIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the ArticleVote entity by IDs.
func (_u *ArticleUpdateOne) AddVoteIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.AddVoteIDs(ids...)
	return _u
}

// AddVotes adds the "votes" edges to the ArticleVote entity.
func (_u *ArticleUpdateOne) AddVotes(v ...*ArticleVote) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVoteIDs(ids...)
}

// AddLotteryIDs adds the "lotteries" edge to the ArticleLottery entity by IDs.
func (_u *ArticleUpdateOne) AddLotteryIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.AddLotteryIDs(ids...)
	return _u
}

// AddLotteries adds the "lotteries" edges to the ArticleLottery entity.
func (_u *ArticleUpdateOne) AddLotteries(v ...*ArticleLottery) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLotteryIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (_u *ArticleUpdateOne) AddCommentIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.AddCommentIDs(ids...)
	return _u
}

// AddComments adds the "comments" edges to the Comment entity.
func (_u *ArticleUpdateOne) AddComments(v ...*Comment) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *ArticleUpdateOne) AddTagIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *ArticleUpdateOne) AddTags(v ...*Tag) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the ArticleMutation object of the builder.
func (_u *ArticleUpdateOne) Mutation() *ArticleMutation {
	return _u.mutation
}

// ClearPostscripts clears all "postscripts" edges to the ArticlePostscript entity.
func (_u *ArticleUpdateOne) ClearPostscripts() *ArticleUpdateOne {
	_u.mutation.ClearPostscripts()
	return _u
}

// RemovePostscriptIDs removes the "postscripts" edge to ArticlePostscript entities by IDs.
func (_u *ArticleUpdateOne) RemovePostscriptIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.RemovePostscriptIDs(ids...)
	return _u
}

// RemovePostscripts removes "postscripts" edges to ArticlePostscript entities.
func (_u *ArticleUpdateOne) RemovePostscripts(v ...*ArticlePostscript) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostscriptIDs(ids...)
}

// ClearVotes clears all "votes" edges to the ArticleVote entity.
func (_u *ArticleUpdateOne) ClearVotes() *ArticleUpdateOne {
	_u.mutation.ClearVotes()
	return _u
}

// RemoveVoteIDs removes the "votes" edge to ArticleVote entities by IDs.
func (_u *ArticleUpdateOne) RemoveVoteIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.RemoveVoteIDs(ids...)
	return _u
}

// RemoveVotes removes "votes" edges to ArticleVote entities.
func (_u *ArticleUpdateOne) RemoveVotes(v ...*ArticleVote) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVoteIDs(ids...)
}

// ClearLotteries clears all "lotteries" edges to the ArticleLottery entity.
func (_u *ArticleUpdateOne) ClearLotteries() *ArticleUpdateOne {
	_u.mutation.ClearLotteries()
	return _u
}

// RemoveLotteryIDs removes the "lotteries" edge to ArticleLottery entities by IDs.
func (_u *ArticleUpdateOne) RemoveLotteryIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.RemoveLotteryIDs(ids...)
	return _u
}

// RemoveLotteries removes "lotteries" edges to ArticleLottery entities.
func (_u *ArticleUpdateOne) RemoveLotteries(v ...*ArticleLottery) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLotteryIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (_u *ArticleUpdateOne) ClearComments() *ArticleUpdateOne {
	_u.mutation.ClearComments()
	return _u
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (_u *ArticleUpdateOne) RemoveCommentIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.RemoveCommentIDs(ids...)
	return _u
}

// RemoveComments removes "comments" edges to Comment entities.
func (_u *ArticleUpdateOne) RemoveComments(v ...*Comment) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *ArticleUpdateOne) ClearTags() *ArticleUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *ArticleUpdateOne) RemoveTagIDs(ids ...int) *ArticleUpdateOne {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *ArticleUpdateOne) RemoveTags(v ...*Tag) *ArticleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the ArticleUpdate builder.
func (_u *ArticleUpdateOne) Where(ps ...predicate.Article) *ArticleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleUpdateOne) Select(field string, fields ...string) *ArticleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Article entity.
func (_u *ArticleUpdateOne) Save(ctx context.Context) (*Article, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleUpdateOne) SaveX(ctx context.Context) *Article {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleUpdateOne) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := article.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`gen: validator failed for field "Article.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`gen: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Content(); ok {
		if err := article.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`gen: validator failed for field "Article.content": %w`, err)}
		}
	}
	return nil
}

func (_u *ArticleUpdateOne) sqlSave(ctx context.Context) (_node *Article, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Article.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, article.FieldID)
		for _, f := range fields {
			if !article.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != article.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(article.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.HasPostscript(); ok {
		_spec.SetField(article.FieldHasPostscript, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RewardContent(); ok {
		_spec.SetField(article.FieldRewardContent, field.TypeString, value)
	}
	if _u.mutation.RewardContentCleared() {
		_spec.ClearField(article.FieldRewardContent, field.TypeString)
	}
	if value, ok := _u.mutation.RewardPoints(); ok {
		_spec.SetField(article.FieldRewardPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRewardPoints(); ok {
		_spec.AddField(article.FieldRewardPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(article.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(article.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(article.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(article.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Commentable(); ok {
		_spec.SetField(article.FieldCommentable, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(article.FieldAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ThankCount(); ok {
		_spec.SetField(article.FieldThankCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedThankCount(); ok {
		_spec.AddField(article.FieldThankCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LikeCount(); ok {
		_spec.SetField(article.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLikeCount(); ok {
		_spec.AddField(article.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DislikeCount(); ok {
		_spec.SetField(article.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDislikeCount(); ok {
		_spec.AddField(article.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CollectCount(); ok {
		_spec.SetField(article.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCollectCount(); ok {
		_spec.AddField(article.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WatchCount(); ok {
		_spec.SetField(article.FieldWatchCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWatchCount(); ok {
		_spec.AddField(article.FieldWatchCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BountyPoints(); ok {
		_spec.SetField(article.FieldBountyPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedBountyPoints(); ok {
		_spec.AddField(article.FieldBountyPoints, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AcceptedAnswerID(); ok {
		_spec.SetField(article.FieldAcceptedAnswerID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAcceptedAnswerID(); ok {
		_spec.AddField(article.FieldAcceptedAnswerID, field.TypeInt, value)
	}
	if _u.mutation.AcceptedAnswerIDCleared() {
		_spec.ClearField(article.FieldAcceptedAnswerID, field.TypeInt)
	}
	if value, ok := _u.mutation.VoteTotal(); ok {
		_spec.SetField(article.FieldVoteTotal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVoteTotal(); ok {
		_spec.AddField(article.FieldVoteTotal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LotteryParticipantCount(); ok {
		_spec.SetField(article.FieldLotteryParticipantCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLotteryParticipantCount(); ok {
		_spec.AddField(article.FieldLotteryParticipantCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LotteryWinnerCount(); ok {
		_spec.SetField(article.FieldLotteryWinnerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLotteryWinnerCount(); ok {
		_spec.AddField(article.FieldLotteryWinnerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(article.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PostscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostscriptsIDs(); len(nodes) > 0 && !_u.mutation.PostscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.PostscriptsTable,
			Columns: []string{article.PostscriptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlepostscript.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVotesIDs(); len(nodes) > 0 && !_u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.VotesTable,
			Columns: []string{article.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LotteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLotteriesIDs(); len(nodes) > 0 && !_u.mutation.LotteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LotteriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.LotteriesTable,
			Columns: []string{article.LotteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !_u.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   article.CommentsTable,
			Columns: []string{article.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   article.TagsTable,
			Columns: article.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Article{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
