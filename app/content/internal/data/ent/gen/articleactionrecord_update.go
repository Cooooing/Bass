// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articleactionrecord"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleActionRecordUpdate is the builder for updating ArticleActionRecord entities.
type ArticleActionRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleActionRecordMutation
}

// Where appends a list predicates to the ArticleActionRecordUpdate builder.
func (_u *ArticleActionRecordUpdate) Where(ps ...predicate.ArticleActionRecord) *ArticleActionRecordUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetArticleID sets the "article_id" field.
func (_u *ArticleActionRecordUpdate) SetArticleID(v int64) *ArticleActionRecordUpdate {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *ArticleActionRecordUpdate) SetNillableArticleID(v *int64) *ArticleActionRecordUpdate {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleActionRecordUpdate) SetUserID(v int64) *ArticleActionRecordUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleActionRecordUpdate) SetNillableUserID(v *int64) *ArticleActionRecordUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleActionRecordUpdate) AddUserID(v int64) *ArticleActionRecordUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetType sets the "type" field.
func (_u *ArticleActionRecordUpdate) SetType(v int32) *ArticleActionRecordUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ArticleActionRecordUpdate) SetNillableType(v *int32) *ArticleActionRecordUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *ArticleActionRecordUpdate) AddType(v int32) *ArticleActionRecordUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *ArticleActionRecordUpdate) SetArticle(v *Article) *ArticleActionRecordUpdate {
	return _u.SetArticleID(v.ID)
}

// Mutation returns the ArticleActionRecordMutation object of the builder.
func (_u *ArticleActionRecordUpdate) Mutation() *ArticleActionRecordMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *ArticleActionRecordUpdate) ClearArticle() *ArticleActionRecordUpdate {
	_u.mutation.ClearArticle()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleActionRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleActionRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleActionRecordUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleActionRecordUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleActionRecordUpdate) check() error {
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleActionRecord.article"`)
	}
	return nil
}

func (_u *ArticleActionRecordUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articleactionrecord.Table, articleactionrecord.Columns, sqlgraph.NewFieldSpec(articleactionrecord.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articleactionrecord.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articleactionrecord.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(articleactionrecord.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(articleactionrecord.FieldType, field.TypeInt32, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articleactionrecord.ArticleTable,
			Columns: []string{articleactionrecord.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articleactionrecord.ArticleTable,
			Columns: []string{articleactionrecord.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articleactionrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleActionRecordUpdateOne is the builder for updating a single ArticleActionRecord entity.
type ArticleActionRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleActionRecordMutation
}

// SetArticleID sets the "article_id" field.
func (_u *ArticleActionRecordUpdateOne) SetArticleID(v int64) *ArticleActionRecordUpdateOne {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *ArticleActionRecordUpdateOne) SetNillableArticleID(v *int64) *ArticleActionRecordUpdateOne {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleActionRecordUpdateOne) SetUserID(v int64) *ArticleActionRecordUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleActionRecordUpdateOne) SetNillableUserID(v *int64) *ArticleActionRecordUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleActionRecordUpdateOne) AddUserID(v int64) *ArticleActionRecordUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetType sets the "type" field.
func (_u *ArticleActionRecordUpdateOne) SetType(v int32) *ArticleActionRecordUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ArticleActionRecordUpdateOne) SetNillableType(v *int32) *ArticleActionRecordUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *ArticleActionRecordUpdateOne) AddType(v int32) *ArticleActionRecordUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *ArticleActionRecordUpdateOne) SetArticle(v *Article) *ArticleActionRecordUpdateOne {
	return _u.SetArticleID(v.ID)
}

// Mutation returns the ArticleActionRecordMutation object of the builder.
func (_u *ArticleActionRecordUpdateOne) Mutation() *ArticleActionRecordMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *ArticleActionRecordUpdateOne) ClearArticle() *ArticleActionRecordUpdateOne {
	_u.mutation.ClearArticle()
	return _u
}

// Where appends a list predicates to the ArticleActionRecordUpdate builder.
func (_u *ArticleActionRecordUpdateOne) Where(ps ...predicate.ArticleActionRecord) *ArticleActionRecordUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleActionRecordUpdateOne) Select(field string, fields ...string) *ArticleActionRecordUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ArticleActionRecord entity.
func (_u *ArticleActionRecordUpdateOne) Save(ctx context.Context) (*ArticleActionRecord, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleActionRecordUpdateOne) SaveX(ctx context.Context) *ArticleActionRecord {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleActionRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleActionRecordUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleActionRecordUpdateOne) check() error {
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleActionRecord.article"`)
	}
	return nil
}

func (_u *ArticleActionRecordUpdateOne) sqlSave(ctx context.Context) (_node *ArticleActionRecord, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articleactionrecord.Table, articleactionrecord.Columns, sqlgraph.NewFieldSpec(articleactionrecord.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ArticleActionRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articleactionrecord.FieldID)
		for _, f := range fields {
			if !articleactionrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != articleactionrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articleactionrecord.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articleactionrecord.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(articleactionrecord.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(articleactionrecord.FieldType, field.TypeInt32, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articleactionrecord.ArticleTable,
			Columns: []string{articleactionrecord.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articleactionrecord.ArticleTable,
			Columns: []string{articleactionrecord.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleActionRecord{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articleactionrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
