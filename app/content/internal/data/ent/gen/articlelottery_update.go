// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlelotteryparticipant"
	"content/internal/data/ent/gen/articlelotterywinner"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ArticleLotteryUpdate is the builder for updating ArticleLottery entities.
type ArticleLotteryUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleLotteryMutation
}

// Where appends a list predicates to the ArticleLotteryUpdate builder.
func (_u *ArticleLotteryUpdate) Where(ps ...predicate.ArticleLottery) *ArticleLotteryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetArticleID sets the "article_id" field.
func (_u *ArticleLotteryUpdate) SetArticleID(v int) *ArticleLotteryUpdate {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *ArticleLotteryUpdate) SetNillableArticleID(v *int) *ArticleLotteryUpdate {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetPrizes sets the "prizes" field.
func (_u *ArticleLotteryUpdate) SetPrizes(v []string) *ArticleLotteryUpdate {
	_u.mutation.SetPrizes(v)
	return _u
}

// AppendPrizes appends value to the "prizes" field.
func (_u *ArticleLotteryUpdate) AppendPrizes(v []string) *ArticleLotteryUpdate {
	_u.mutation.AppendPrizes(v)
	return _u
}

// ClearPrizes clears the value of the "prizes" field.
func (_u *ArticleLotteryUpdate) ClearPrizes() *ArticleLotteryUpdate {
	_u.mutation.ClearPrizes()
	return _u
}

// SetStartAt sets the "start_at" field.
func (_u *ArticleLotteryUpdate) SetStartAt(v time.Time) *ArticleLotteryUpdate {
	_u.mutation.SetStartAt(v)
	return _u
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdate) SetNillableStartAt(v *time.Time) *ArticleLotteryUpdate {
	if v != nil {
		_u.SetStartAt(*v)
	}
	return _u
}

// ClearStartAt clears the value of the "start_at" field.
func (_u *ArticleLotteryUpdate) ClearStartAt() *ArticleLotteryUpdate {
	_u.mutation.ClearStartAt()
	return _u
}

// SetEndAt sets the "end_at" field.
func (_u *ArticleLotteryUpdate) SetEndAt(v time.Time) *ArticleLotteryUpdate {
	_u.mutation.SetEndAt(v)
	return _u
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdate) SetNillableEndAt(v *time.Time) *ArticleLotteryUpdate {
	if v != nil {
		_u.SetEndAt(*v)
	}
	return _u
}

// ClearEndAt clears the value of the "end_at" field.
func (_u *ArticleLotteryUpdate) ClearEndAt() *ArticleLotteryUpdate {
	_u.mutation.ClearEndAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ArticleLotteryUpdate) SetStatus(v int) *ArticleLotteryUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ArticleLotteryUpdate) SetNillableStatus(v *int) *ArticleLotteryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *ArticleLotteryUpdate) AddStatus(v int) *ArticleLotteryUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleLotteryUpdate) SetCreatedAt(v time.Time) *ArticleLotteryUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdate) SetNillableCreatedAt(v *time.Time) *ArticleLotteryUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleLotteryUpdate) SetUpdatedAt(v time.Time) *ArticleLotteryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdate) SetNillableUpdatedAt(v *time.Time) *ArticleLotteryUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *ArticleLotteryUpdate) SetArticle(v *Article) *ArticleLotteryUpdate {
	return _u.SetArticleID(v.ID)
}

// AddParticipantIDs adds the "participants" edge to the ArticleLotteryParticipant entity by IDs.
func (_u *ArticleLotteryUpdate) AddParticipantIDs(ids ...int) *ArticleLotteryUpdate {
	_u.mutation.AddParticipantIDs(ids...)
	return _u
}

// AddParticipants adds the "participants" edges to the ArticleLotteryParticipant entity.
func (_u *ArticleLotteryUpdate) AddParticipants(v ...*ArticleLotteryParticipant) *ArticleLotteryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantIDs(ids...)
}

// AddWinnerIDs adds the "winners" edge to the ArticleLotteryWinner entity by IDs.
func (_u *ArticleLotteryUpdate) AddWinnerIDs(ids ...int) *ArticleLotteryUpdate {
	_u.mutation.AddWinnerIDs(ids...)
	return _u
}

// AddWinners adds the "winners" edges to the ArticleLotteryWinner entity.
func (_u *ArticleLotteryUpdate) AddWinners(v ...*ArticleLotteryWinner) *ArticleLotteryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWinnerIDs(ids...)
}

// Mutation returns the ArticleLotteryMutation object of the builder.
func (_u *ArticleLotteryUpdate) Mutation() *ArticleLotteryMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *ArticleLotteryUpdate) ClearArticle() *ArticleLotteryUpdate {
	_u.mutation.ClearArticle()
	return _u
}

// ClearParticipants clears all "participants" edges to the ArticleLotteryParticipant entity.
func (_u *ArticleLotteryUpdate) ClearParticipants() *ArticleLotteryUpdate {
	_u.mutation.ClearParticipants()
	return _u
}

// RemoveParticipantIDs removes the "participants" edge to ArticleLotteryParticipant entities by IDs.
func (_u *ArticleLotteryUpdate) RemoveParticipantIDs(ids ...int) *ArticleLotteryUpdate {
	_u.mutation.RemoveParticipantIDs(ids...)
	return _u
}

// RemoveParticipants removes "participants" edges to ArticleLotteryParticipant entities.
func (_u *ArticleLotteryUpdate) RemoveParticipants(v ...*ArticleLotteryParticipant) *ArticleLotteryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantIDs(ids...)
}

// ClearWinners clears all "winners" edges to the ArticleLotteryWinner entity.
func (_u *ArticleLotteryUpdate) ClearWinners() *ArticleLotteryUpdate {
	_u.mutation.ClearWinners()
	return _u
}

// RemoveWinnerIDs removes the "winners" edge to ArticleLotteryWinner entities by IDs.
func (_u *ArticleLotteryUpdate) RemoveWinnerIDs(ids ...int) *ArticleLotteryUpdate {
	_u.mutation.RemoveWinnerIDs(ids...)
	return _u
}

// RemoveWinners removes "winners" edges to ArticleLotteryWinner entities.
func (_u *ArticleLotteryUpdate) RemoveWinners(v ...*ArticleLotteryWinner) *ArticleLotteryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWinnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleLotteryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleLotteryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleLotteryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleLotteryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleLotteryUpdate) check() error {
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleLottery.article"`)
	}
	return nil
}

func (_u *ArticleLotteryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelottery.Table, articlelottery.Columns, sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Prizes(); ok {
		_spec.SetField(articlelottery.FieldPrizes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPrizes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, articlelottery.FieldPrizes, value)
		})
	}
	if _u.mutation.PrizesCleared() {
		_spec.ClearField(articlelottery.FieldPrizes, field.TypeJSON)
	}
	if value, ok := _u.mutation.StartAt(); ok {
		_spec.SetField(articlelottery.FieldStartAt, field.TypeTime, value)
	}
	if _u.mutation.StartAtCleared() {
		_spec.ClearField(articlelottery.FieldStartAt, field.TypeTime)
	}
	if value, ok := _u.mutation.EndAt(); ok {
		_spec.SetField(articlelottery.FieldEndAt, field.TypeTime, value)
	}
	if _u.mutation.EndAtCleared() {
		_spec.ClearField(articlelottery.FieldEndAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(articlelottery.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(articlelottery.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlelottery.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelottery.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelottery.ArticleTable,
			Columns: []string{articlelottery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelottery.ArticleTable,
			Columns: []string{articlelottery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.ParticipantsTable,
			Columns: []string{articlelottery.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !_u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.ParticipantsTable,
			Columns: []string{articlelottery.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.ParticipantsTable,
			Columns: []string{articlelottery.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WinnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.WinnersTable,
			Columns: []string{articlelottery.WinnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWinnersIDs(); len(nodes) > 0 && !_u.mutation.WinnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.WinnersTable,
			Columns: []string{articlelottery.WinnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WinnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.WinnersTable,
			Columns: []string{articlelottery.WinnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelottery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleLotteryUpdateOne is the builder for updating a single ArticleLottery entity.
type ArticleLotteryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleLotteryMutation
}

// SetArticleID sets the "article_id" field.
func (_u *ArticleLotteryUpdateOne) SetArticleID(v int) *ArticleLotteryUpdateOne {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *ArticleLotteryUpdateOne) SetNillableArticleID(v *int) *ArticleLotteryUpdateOne {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetPrizes sets the "prizes" field.
func (_u *ArticleLotteryUpdateOne) SetPrizes(v []string) *ArticleLotteryUpdateOne {
	_u.mutation.SetPrizes(v)
	return _u
}

// AppendPrizes appends value to the "prizes" field.
func (_u *ArticleLotteryUpdateOne) AppendPrizes(v []string) *ArticleLotteryUpdateOne {
	_u.mutation.AppendPrizes(v)
	return _u
}

// ClearPrizes clears the value of the "prizes" field.
func (_u *ArticleLotteryUpdateOne) ClearPrizes() *ArticleLotteryUpdateOne {
	_u.mutation.ClearPrizes()
	return _u
}

// SetStartAt sets the "start_at" field.
func (_u *ArticleLotteryUpdateOne) SetStartAt(v time.Time) *ArticleLotteryUpdateOne {
	_u.mutation.SetStartAt(v)
	return _u
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdateOne) SetNillableStartAt(v *time.Time) *ArticleLotteryUpdateOne {
	if v != nil {
		_u.SetStartAt(*v)
	}
	return _u
}

// ClearStartAt clears the value of the "start_at" field.
func (_u *ArticleLotteryUpdateOne) ClearStartAt() *ArticleLotteryUpdateOne {
	_u.mutation.ClearStartAt()
	return _u
}

// SetEndAt sets the "end_at" field.
func (_u *ArticleLotteryUpdateOne) SetEndAt(v time.Time) *ArticleLotteryUpdateOne {
	_u.mutation.SetEndAt(v)
	return _u
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdateOne) SetNillableEndAt(v *time.Time) *ArticleLotteryUpdateOne {
	if v != nil {
		_u.SetEndAt(*v)
	}
	return _u
}

// ClearEndAt clears the value of the "end_at" field.
func (_u *ArticleLotteryUpdateOne) ClearEndAt() *ArticleLotteryUpdateOne {
	_u.mutation.ClearEndAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ArticleLotteryUpdateOne) SetStatus(v int) *ArticleLotteryUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ArticleLotteryUpdateOne) SetNillableStatus(v *int) *ArticleLotteryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *ArticleLotteryUpdateOne) AddStatus(v int) *ArticleLotteryUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleLotteryUpdateOne) SetCreatedAt(v time.Time) *ArticleLotteryUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdateOne) SetNillableCreatedAt(v *time.Time) *ArticleLotteryUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleLotteryUpdateOne) SetUpdatedAt(v time.Time) *ArticleLotteryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleLotteryUpdateOne) SetNillableUpdatedAt(v *time.Time) *ArticleLotteryUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *ArticleLotteryUpdateOne) SetArticle(v *Article) *ArticleLotteryUpdateOne {
	return _u.SetArticleID(v.ID)
}

// AddParticipantIDs adds the "participants" edge to the ArticleLotteryParticipant entity by IDs.
func (_u *ArticleLotteryUpdateOne) AddParticipantIDs(ids ...int) *ArticleLotteryUpdateOne {
	_u.mutation.AddParticipantIDs(ids...)
	return _u
}

// AddParticipants adds the "participants" edges to the ArticleLotteryParticipant entity.
func (_u *ArticleLotteryUpdateOne) AddParticipants(v ...*ArticleLotteryParticipant) *ArticleLotteryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantIDs(ids...)
}

// AddWinnerIDs adds the "winners" edge to the ArticleLotteryWinner entity by IDs.
func (_u *ArticleLotteryUpdateOne) AddWinnerIDs(ids ...int) *ArticleLotteryUpdateOne {
	_u.mutation.AddWinnerIDs(ids...)
	return _u
}

// AddWinners adds the "winners" edges to the ArticleLotteryWinner entity.
func (_u *ArticleLotteryUpdateOne) AddWinners(v ...*ArticleLotteryWinner) *ArticleLotteryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWinnerIDs(ids...)
}

// Mutation returns the ArticleLotteryMutation object of the builder.
func (_u *ArticleLotteryUpdateOne) Mutation() *ArticleLotteryMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *ArticleLotteryUpdateOne) ClearArticle() *ArticleLotteryUpdateOne {
	_u.mutation.ClearArticle()
	return _u
}

// ClearParticipants clears all "participants" edges to the ArticleLotteryParticipant entity.
func (_u *ArticleLotteryUpdateOne) ClearParticipants() *ArticleLotteryUpdateOne {
	_u.mutation.ClearParticipants()
	return _u
}

// RemoveParticipantIDs removes the "participants" edge to ArticleLotteryParticipant entities by IDs.
func (_u *ArticleLotteryUpdateOne) RemoveParticipantIDs(ids ...int) *ArticleLotteryUpdateOne {
	_u.mutation.RemoveParticipantIDs(ids...)
	return _u
}

// RemoveParticipants removes "participants" edges to ArticleLotteryParticipant entities.
func (_u *ArticleLotteryUpdateOne) RemoveParticipants(v ...*ArticleLotteryParticipant) *ArticleLotteryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantIDs(ids...)
}

// ClearWinners clears all "winners" edges to the ArticleLotteryWinner entity.
func (_u *ArticleLotteryUpdateOne) ClearWinners() *ArticleLotteryUpdateOne {
	_u.mutation.ClearWinners()
	return _u
}

// RemoveWinnerIDs removes the "winners" edge to ArticleLotteryWinner entities by IDs.
func (_u *ArticleLotteryUpdateOne) RemoveWinnerIDs(ids ...int) *ArticleLotteryUpdateOne {
	_u.mutation.RemoveWinnerIDs(ids...)
	return _u
}

// RemoveWinners removes "winners" edges to ArticleLotteryWinner entities.
func (_u *ArticleLotteryUpdateOne) RemoveWinners(v ...*ArticleLotteryWinner) *ArticleLotteryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWinnerIDs(ids...)
}

// Where appends a list predicates to the ArticleLotteryUpdate builder.
func (_u *ArticleLotteryUpdateOne) Where(ps ...predicate.ArticleLottery) *ArticleLotteryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleLotteryUpdateOne) Select(field string, fields ...string) *ArticleLotteryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ArticleLottery entity.
func (_u *ArticleLotteryUpdateOne) Save(ctx context.Context) (*ArticleLottery, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleLotteryUpdateOne) SaveX(ctx context.Context) *ArticleLottery {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleLotteryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleLotteryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleLotteryUpdateOne) check() error {
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleLottery.article"`)
	}
	return nil
}

func (_u *ArticleLotteryUpdateOne) sqlSave(ctx context.Context) (_node *ArticleLottery, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelottery.Table, articlelottery.Columns, sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ArticleLottery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlelottery.FieldID)
		for _, f := range fields {
			if !articlelottery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != articlelottery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Prizes(); ok {
		_spec.SetField(articlelottery.FieldPrizes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPrizes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, articlelottery.FieldPrizes, value)
		})
	}
	if _u.mutation.PrizesCleared() {
		_spec.ClearField(articlelottery.FieldPrizes, field.TypeJSON)
	}
	if value, ok := _u.mutation.StartAt(); ok {
		_spec.SetField(articlelottery.FieldStartAt, field.TypeTime, value)
	}
	if _u.mutation.StartAtCleared() {
		_spec.ClearField(articlelottery.FieldStartAt, field.TypeTime)
	}
	if value, ok := _u.mutation.EndAt(); ok {
		_spec.SetField(articlelottery.FieldEndAt, field.TypeTime, value)
	}
	if _u.mutation.EndAtCleared() {
		_spec.ClearField(articlelottery.FieldEndAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(articlelottery.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(articlelottery.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlelottery.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelottery.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelottery.ArticleTable,
			Columns: []string{articlelottery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelottery.ArticleTable,
			Columns: []string{articlelottery.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.ParticipantsTable,
			Columns: []string{articlelottery.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !_u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.ParticipantsTable,
			Columns: []string{articlelottery.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.ParticipantsTable,
			Columns: []string{articlelottery.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WinnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.WinnersTable,
			Columns: []string{articlelottery.WinnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWinnersIDs(); len(nodes) > 0 && !_u.mutation.WinnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.WinnersTable,
			Columns: []string{articlelottery.WinnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WinnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlelottery.WinnersTable,
			Columns: []string{articlelottery.WinnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleLottery{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelottery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
