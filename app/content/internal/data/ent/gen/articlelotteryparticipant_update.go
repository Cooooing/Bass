// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlelotteryparticipant"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleLotteryParticipantUpdate is the builder for updating ArticleLotteryParticipant entities.
type ArticleLotteryParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleLotteryParticipantMutation
}

// Where appends a list predicates to the ArticleLotteryParticipantUpdate builder.
func (_u *ArticleLotteryParticipantUpdate) Where(ps ...predicate.ArticleLotteryParticipant) *ArticleLotteryParticipantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLotteryID sets the "lottery_id" field.
func (_u *ArticleLotteryParticipantUpdate) SetLotteryID(v int64) *ArticleLotteryParticipantUpdate {
	_u.mutation.SetLotteryID(v)
	return _u
}

// SetNillableLotteryID sets the "lottery_id" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdate) SetNillableLotteryID(v *int64) *ArticleLotteryParticipantUpdate {
	if v != nil {
		_u.SetLotteryID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleLotteryParticipantUpdate) SetUserID(v int64) *ArticleLotteryParticipantUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdate) SetNillableUserID(v *int64) *ArticleLotteryParticipantUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleLotteryParticipantUpdate) AddUserID(v int64) *ArticleLotteryParticipantUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleLotteryParticipantUpdate) SetCreatedAt(v time.Time) *ArticleLotteryParticipantUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdate) SetNillableCreatedAt(v *time.Time) *ArticleLotteryParticipantUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *ArticleLotteryParticipantUpdate) ClearCreatedAt() *ArticleLotteryParticipantUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleLotteryParticipantUpdate) SetUpdatedAt(v time.Time) *ArticleLotteryParticipantUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdate) SetNillableUpdatedAt(v *time.Time) *ArticleLotteryParticipantUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ArticleLotteryParticipantUpdate) ClearUpdatedAt() *ArticleLotteryParticipantUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetLottery sets the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryParticipantUpdate) SetLottery(v *ArticleLottery) *ArticleLotteryParticipantUpdate {
	return _u.SetLotteryID(v.ID)
}

// Mutation returns the ArticleLotteryParticipantMutation object of the builder.
func (_u *ArticleLotteryParticipantUpdate) Mutation() *ArticleLotteryParticipantMutation {
	return _u.mutation
}

// ClearLottery clears the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryParticipantUpdate) ClearLottery() *ArticleLotteryParticipantUpdate {
	_u.mutation.ClearLottery()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleLotteryParticipantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleLotteryParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleLotteryParticipantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleLotteryParticipantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleLotteryParticipantUpdate) check() error {
	if _u.mutation.LotteryCleared() && len(_u.mutation.LotteryIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleLotteryParticipant.lottery"`)
	}
	return nil
}

func (_u *ArticleLotteryParticipantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelotteryparticipant.Table, articlelotteryparticipant.Columns, sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articlelotteryparticipant.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articlelotteryparticipant.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlelotteryparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(articlelotteryparticipant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelotteryparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(articlelotteryparticipant.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.LotteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotteryparticipant.LotteryTable,
			Columns: []string{articlelotteryparticipant.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LotteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotteryparticipant.LotteryTable,
			Columns: []string{articlelotteryparticipant.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelotteryparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleLotteryParticipantUpdateOne is the builder for updating a single ArticleLotteryParticipant entity.
type ArticleLotteryParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleLotteryParticipantMutation
}

// SetLotteryID sets the "lottery_id" field.
func (_u *ArticleLotteryParticipantUpdateOne) SetLotteryID(v int64) *ArticleLotteryParticipantUpdateOne {
	_u.mutation.SetLotteryID(v)
	return _u
}

// SetNillableLotteryID sets the "lottery_id" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdateOne) SetNillableLotteryID(v *int64) *ArticleLotteryParticipantUpdateOne {
	if v != nil {
		_u.SetLotteryID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleLotteryParticipantUpdateOne) SetUserID(v int64) *ArticleLotteryParticipantUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdateOne) SetNillableUserID(v *int64) *ArticleLotteryParticipantUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleLotteryParticipantUpdateOne) AddUserID(v int64) *ArticleLotteryParticipantUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleLotteryParticipantUpdateOne) SetCreatedAt(v time.Time) *ArticleLotteryParticipantUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdateOne) SetNillableCreatedAt(v *time.Time) *ArticleLotteryParticipantUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *ArticleLotteryParticipantUpdateOne) ClearCreatedAt() *ArticleLotteryParticipantUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleLotteryParticipantUpdateOne) SetUpdatedAt(v time.Time) *ArticleLotteryParticipantUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleLotteryParticipantUpdateOne) SetNillableUpdatedAt(v *time.Time) *ArticleLotteryParticipantUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ArticleLotteryParticipantUpdateOne) ClearUpdatedAt() *ArticleLotteryParticipantUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetLottery sets the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryParticipantUpdateOne) SetLottery(v *ArticleLottery) *ArticleLotteryParticipantUpdateOne {
	return _u.SetLotteryID(v.ID)
}

// Mutation returns the ArticleLotteryParticipantMutation object of the builder.
func (_u *ArticleLotteryParticipantUpdateOne) Mutation() *ArticleLotteryParticipantMutation {
	return _u.mutation
}

// ClearLottery clears the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryParticipantUpdateOne) ClearLottery() *ArticleLotteryParticipantUpdateOne {
	_u.mutation.ClearLottery()
	return _u
}

// Where appends a list predicates to the ArticleLotteryParticipantUpdate builder.
func (_u *ArticleLotteryParticipantUpdateOne) Where(ps ...predicate.ArticleLotteryParticipant) *ArticleLotteryParticipantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleLotteryParticipantUpdateOne) Select(field string, fields ...string) *ArticleLotteryParticipantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ArticleLotteryParticipant entity.
func (_u *ArticleLotteryParticipantUpdateOne) Save(ctx context.Context) (*ArticleLotteryParticipant, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleLotteryParticipantUpdateOne) SaveX(ctx context.Context) *ArticleLotteryParticipant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleLotteryParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleLotteryParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleLotteryParticipantUpdateOne) check() error {
	if _u.mutation.LotteryCleared() && len(_u.mutation.LotteryIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleLotteryParticipant.lottery"`)
	}
	return nil
}

func (_u *ArticleLotteryParticipantUpdateOne) sqlSave(ctx context.Context) (_node *ArticleLotteryParticipant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelotteryparticipant.Table, articlelotteryparticipant.Columns, sqlgraph.NewFieldSpec(articlelotteryparticipant.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ArticleLotteryParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlelotteryparticipant.FieldID)
		for _, f := range fields {
			if !articlelotteryparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != articlelotteryparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articlelotteryparticipant.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articlelotteryparticipant.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlelotteryparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(articlelotteryparticipant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelotteryparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(articlelotteryparticipant.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.LotteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotteryparticipant.LotteryTable,
			Columns: []string{articlelotteryparticipant.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LotteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotteryparticipant.LotteryTable,
			Columns: []string{articlelotteryparticipant.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleLotteryParticipant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelotteryparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
