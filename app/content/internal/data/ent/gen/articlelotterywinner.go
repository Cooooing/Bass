// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlelotterywinner"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ArticleLotteryWinner is the model entity for the ArticleLotteryWinner schema.
type ArticleLotteryWinner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 所属抽奖ID
	LotteryID int `json:"lottery_id,omitempty"`
	// 获奖用户ID
	UserID int `json:"user_id,omitempty"`
	// 奖品名称
	Prize string `json:"prize,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArticleLotteryWinnerQuery when eager-loading is set.
	Edges        ArticleLotteryWinnerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArticleLotteryWinnerEdges holds the relations/edges for other nodes in the graph.
type ArticleLotteryWinnerEdges struct {
	// Lottery holds the value of the lottery edge.
	Lottery *ArticleLottery `json:"lottery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LotteryOrErr returns the Lottery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArticleLotteryWinnerEdges) LotteryOrErr() (*ArticleLottery, error) {
	if e.Lottery != nil {
		return e.Lottery, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: articlelottery.Label}
	}
	return nil, &NotLoadedError{edge: "lottery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArticleLotteryWinner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case articlelotterywinner.FieldID, articlelotterywinner.FieldLotteryID, articlelotterywinner.FieldUserID:
			values[i] = new(sql.NullInt64)
		case articlelotterywinner.FieldPrize:
			values[i] = new(sql.NullString)
		case articlelotterywinner.FieldCreatedAt, articlelotterywinner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArticleLotteryWinner fields.
func (_m *ArticleLotteryWinner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case articlelotterywinner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case articlelotterywinner.FieldLotteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lottery_id", values[i])
			} else if value.Valid {
				_m.LotteryID = int(value.Int64)
			}
		case articlelotterywinner.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = int(value.Int64)
			}
		case articlelotterywinner.FieldPrize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prize", values[i])
			} else if value.Valid {
				_m.Prize = value.String
			}
		case articlelotterywinner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case articlelotterywinner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArticleLotteryWinner.
// This includes values selected through modifiers, order, etc.
func (_m *ArticleLotteryWinner) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryLottery queries the "lottery" edge of the ArticleLotteryWinner entity.
func (_m *ArticleLotteryWinner) QueryLottery() *ArticleLotteryQuery {
	return NewArticleLotteryWinnerClient(_m.config).QueryLottery(_m)
}

// Update returns a builder for updating this ArticleLotteryWinner.
// Note that you need to call ArticleLotteryWinner.Unwrap() before calling this method if this ArticleLotteryWinner
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ArticleLotteryWinner) Update() *ArticleLotteryWinnerUpdateOne {
	return NewArticleLotteryWinnerClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ArticleLotteryWinner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ArticleLotteryWinner) Unwrap() *ArticleLotteryWinner {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: ArticleLotteryWinner is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ArticleLotteryWinner) String() string {
	var builder strings.Builder
	builder.WriteString("ArticleLotteryWinner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("lottery_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.LotteryID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("prize=")
	builder.WriteString(_m.Prize)
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ArticleLotteryWinners is a parsable slice of ArticleLotteryWinner.
type ArticleLotteryWinners []*ArticleLotteryWinner
