// Code generated by ent, DO NOT EDIT.

package articlelotterywinner

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the articlelotterywinner type in the database.
	Label = "article_lottery_winner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLotteryID holds the string denoting the lottery_id field in the database.
	FieldLotteryID = "lottery_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPrize holds the string denoting the prize field in the database.
	FieldPrize = "prize"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeLottery holds the string denoting the lottery edge name in mutations.
	EdgeLottery = "lottery"
	// Table holds the table name of the articlelotterywinner in the database.
	Table = "article_lottery_winners"
	// LotteryTable is the table that holds the lottery relation/edge.
	LotteryTable = "article_lottery_winners"
	// LotteryInverseTable is the table name for the ArticleLottery entity.
	// It exists in this package in order to avoid circular dependency with the "articlelottery" package.
	LotteryInverseTable = "article_lotteries"
	// LotteryColumn is the table column denoting the lottery relation/edge.
	LotteryColumn = "lottery_id"
)

// Columns holds all SQL columns for articlelotterywinner fields.
var Columns = []string{
	FieldID,
	FieldLotteryID,
	FieldUserID,
	FieldPrize,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PrizeValidator is a validator for the "prize" field. It is called by the builders before save.
	PrizeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ArticleLotteryWinner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLotteryID orders the results by the lottery_id field.
func ByLotteryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLotteryID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPrize orders the results by the prize field.
func ByPrize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrize, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLotteryField orders the results by lottery field.
func ByLotteryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLotteryStep(), sql.OrderByField(field, opts...))
	}
}
func newLotteryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LotteryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LotteryTable, LotteryColumn),
	)
}
