// Code generated by ent, DO NOT EDIT.

package articlelotterywinner

import (
	"content/internal/data/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLTE(FieldID, id))
}

// LotteryID applies equality check predicate on the "lottery_id" field. It's identical to LotteryIDEQ.
func LotteryID(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldLotteryID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldUserID, v))
}

// Prize applies equality check predicate on the "prize" field. It's identical to PrizeEQ.
func Prize(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldPrize, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldUpdatedAt, v))
}

// LotteryIDEQ applies the EQ predicate on the "lottery_id" field.
func LotteryIDEQ(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldLotteryID, v))
}

// LotteryIDNEQ applies the NEQ predicate on the "lottery_id" field.
func LotteryIDNEQ(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNEQ(FieldLotteryID, v))
}

// LotteryIDIn applies the In predicate on the "lottery_id" field.
func LotteryIDIn(vs ...int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldIn(FieldLotteryID, vs...))
}

// LotteryIDNotIn applies the NotIn predicate on the "lottery_id" field.
func LotteryIDNotIn(vs ...int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNotIn(FieldLotteryID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLTE(FieldUserID, v))
}

// PrizeEQ applies the EQ predicate on the "prize" field.
func PrizeEQ(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldPrize, v))
}

// PrizeNEQ applies the NEQ predicate on the "prize" field.
func PrizeNEQ(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNEQ(FieldPrize, v))
}

// PrizeIn applies the In predicate on the "prize" field.
func PrizeIn(vs ...string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldIn(FieldPrize, vs...))
}

// PrizeNotIn applies the NotIn predicate on the "prize" field.
func PrizeNotIn(vs ...string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNotIn(FieldPrize, vs...))
}

// PrizeGT applies the GT predicate on the "prize" field.
func PrizeGT(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGT(FieldPrize, v))
}

// PrizeGTE applies the GTE predicate on the "prize" field.
func PrizeGTE(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGTE(FieldPrize, v))
}

// PrizeLT applies the LT predicate on the "prize" field.
func PrizeLT(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLT(FieldPrize, v))
}

// PrizeLTE applies the LTE predicate on the "prize" field.
func PrizeLTE(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLTE(FieldPrize, v))
}

// PrizeContains applies the Contains predicate on the "prize" field.
func PrizeContains(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldContains(FieldPrize, v))
}

// PrizeHasPrefix applies the HasPrefix predicate on the "prize" field.
func PrizeHasPrefix(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldHasPrefix(FieldPrize, v))
}

// PrizeHasSuffix applies the HasSuffix predicate on the "prize" field.
func PrizeHasSuffix(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldHasSuffix(FieldPrize, v))
}

// PrizeEqualFold applies the EqualFold predicate on the "prize" field.
func PrizeEqualFold(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEqualFold(FieldPrize, v))
}

// PrizeContainsFold applies the ContainsFold predicate on the "prize" field.
func PrizeContainsFold(v string) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldContainsFold(FieldPrize, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasLottery applies the HasEdge predicate on the "lottery" edge.
func HasLottery() predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LotteryTable, LotteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLotteryWith applies the HasEdge predicate on the "lottery" edge with a given conditions (other predicates).
func HasLotteryWith(preds ...predicate.ArticleLottery) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(func(s *sql.Selector) {
		step := newLotteryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ArticleLotteryWinner) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ArticleLotteryWinner) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ArticleLotteryWinner) predicate.ArticleLotteryWinner {
	return predicate.ArticleLotteryWinner(sql.NotPredicates(p))
}
