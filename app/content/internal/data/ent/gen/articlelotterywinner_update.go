// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlelotterywinner"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleLotteryWinnerUpdate is the builder for updating ArticleLotteryWinner entities.
type ArticleLotteryWinnerUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleLotteryWinnerMutation
}

// Where appends a list predicates to the ArticleLotteryWinnerUpdate builder.
func (_u *ArticleLotteryWinnerUpdate) Where(ps ...predicate.ArticleLotteryWinner) *ArticleLotteryWinnerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLotteryID sets the "lottery_id" field.
func (_u *ArticleLotteryWinnerUpdate) SetLotteryID(v int) *ArticleLotteryWinnerUpdate {
	_u.mutation.SetLotteryID(v)
	return _u
}

// SetNillableLotteryID sets the "lottery_id" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdate) SetNillableLotteryID(v *int) *ArticleLotteryWinnerUpdate {
	if v != nil {
		_u.SetLotteryID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleLotteryWinnerUpdate) SetUserID(v int) *ArticleLotteryWinnerUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdate) SetNillableUserID(v *int) *ArticleLotteryWinnerUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleLotteryWinnerUpdate) AddUserID(v int) *ArticleLotteryWinnerUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetPrize sets the "prize" field.
func (_u *ArticleLotteryWinnerUpdate) SetPrize(v string) *ArticleLotteryWinnerUpdate {
	_u.mutation.SetPrize(v)
	return _u
}

// SetNillablePrize sets the "prize" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdate) SetNillablePrize(v *string) *ArticleLotteryWinnerUpdate {
	if v != nil {
		_u.SetPrize(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleLotteryWinnerUpdate) SetCreatedAt(v time.Time) *ArticleLotteryWinnerUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdate) SetNillableCreatedAt(v *time.Time) *ArticleLotteryWinnerUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleLotteryWinnerUpdate) SetUpdatedAt(v time.Time) *ArticleLotteryWinnerUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdate) SetNillableUpdatedAt(v *time.Time) *ArticleLotteryWinnerUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetLottery sets the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryWinnerUpdate) SetLottery(v *ArticleLottery) *ArticleLotteryWinnerUpdate {
	return _u.SetLotteryID(v.ID)
}

// Mutation returns the ArticleLotteryWinnerMutation object of the builder.
func (_u *ArticleLotteryWinnerUpdate) Mutation() *ArticleLotteryWinnerMutation {
	return _u.mutation
}

// ClearLottery clears the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryWinnerUpdate) ClearLottery() *ArticleLotteryWinnerUpdate {
	_u.mutation.ClearLottery()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleLotteryWinnerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleLotteryWinnerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleLotteryWinnerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleLotteryWinnerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleLotteryWinnerUpdate) check() error {
	if v, ok := _u.mutation.Prize(); ok {
		if err := articlelotterywinner.PrizeValidator(v); err != nil {
			return &ValidationError{Name: "prize", err: fmt.Errorf(`gen: validator failed for field "ArticleLotteryWinner.prize": %w`, err)}
		}
	}
	if _u.mutation.LotteryCleared() && len(_u.mutation.LotteryIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleLotteryWinner.lottery"`)
	}
	return nil
}

func (_u *ArticleLotteryWinnerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelotterywinner.Table, articlelotterywinner.Columns, sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articlelotterywinner.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articlelotterywinner.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Prize(); ok {
		_spec.SetField(articlelotterywinner.FieldPrize, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlelotterywinner.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelotterywinner.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.LotteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotterywinner.LotteryTable,
			Columns: []string{articlelotterywinner.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LotteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotterywinner.LotteryTable,
			Columns: []string{articlelotterywinner.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelotterywinner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleLotteryWinnerUpdateOne is the builder for updating a single ArticleLotteryWinner entity.
type ArticleLotteryWinnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleLotteryWinnerMutation
}

// SetLotteryID sets the "lottery_id" field.
func (_u *ArticleLotteryWinnerUpdateOne) SetLotteryID(v int) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.SetLotteryID(v)
	return _u
}

// SetNillableLotteryID sets the "lottery_id" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdateOne) SetNillableLotteryID(v *int) *ArticleLotteryWinnerUpdateOne {
	if v != nil {
		_u.SetLotteryID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleLotteryWinnerUpdateOne) SetUserID(v int) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdateOne) SetNillableUserID(v *int) *ArticleLotteryWinnerUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleLotteryWinnerUpdateOne) AddUserID(v int) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetPrize sets the "prize" field.
func (_u *ArticleLotteryWinnerUpdateOne) SetPrize(v string) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.SetPrize(v)
	return _u
}

// SetNillablePrize sets the "prize" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdateOne) SetNillablePrize(v *string) *ArticleLotteryWinnerUpdateOne {
	if v != nil {
		_u.SetPrize(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleLotteryWinnerUpdateOne) SetCreatedAt(v time.Time) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdateOne) SetNillableCreatedAt(v *time.Time) *ArticleLotteryWinnerUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleLotteryWinnerUpdateOne) SetUpdatedAt(v time.Time) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleLotteryWinnerUpdateOne) SetNillableUpdatedAt(v *time.Time) *ArticleLotteryWinnerUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetLottery sets the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryWinnerUpdateOne) SetLottery(v *ArticleLottery) *ArticleLotteryWinnerUpdateOne {
	return _u.SetLotteryID(v.ID)
}

// Mutation returns the ArticleLotteryWinnerMutation object of the builder.
func (_u *ArticleLotteryWinnerUpdateOne) Mutation() *ArticleLotteryWinnerMutation {
	return _u.mutation
}

// ClearLottery clears the "lottery" edge to the ArticleLottery entity.
func (_u *ArticleLotteryWinnerUpdateOne) ClearLottery() *ArticleLotteryWinnerUpdateOne {
	_u.mutation.ClearLottery()
	return _u
}

// Where appends a list predicates to the ArticleLotteryWinnerUpdate builder.
func (_u *ArticleLotteryWinnerUpdateOne) Where(ps ...predicate.ArticleLotteryWinner) *ArticleLotteryWinnerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleLotteryWinnerUpdateOne) Select(field string, fields ...string) *ArticleLotteryWinnerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ArticleLotteryWinner entity.
func (_u *ArticleLotteryWinnerUpdateOne) Save(ctx context.Context) (*ArticleLotteryWinner, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleLotteryWinnerUpdateOne) SaveX(ctx context.Context) *ArticleLotteryWinner {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleLotteryWinnerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleLotteryWinnerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleLotteryWinnerUpdateOne) check() error {
	if v, ok := _u.mutation.Prize(); ok {
		if err := articlelotterywinner.PrizeValidator(v); err != nil {
			return &ValidationError{Name: "prize", err: fmt.Errorf(`gen: validator failed for field "ArticleLotteryWinner.prize": %w`, err)}
		}
	}
	if _u.mutation.LotteryCleared() && len(_u.mutation.LotteryIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleLotteryWinner.lottery"`)
	}
	return nil
}

func (_u *ArticleLotteryWinnerUpdateOne) sqlSave(ctx context.Context) (_node *ArticleLotteryWinner, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelotterywinner.Table, articlelotterywinner.Columns, sqlgraph.NewFieldSpec(articlelotterywinner.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ArticleLotteryWinner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlelotterywinner.FieldID)
		for _, f := range fields {
			if !articlelotterywinner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != articlelotterywinner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articlelotterywinner.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articlelotterywinner.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Prize(); ok {
		_spec.SetField(articlelotterywinner.FieldPrize, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlelotterywinner.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelotterywinner.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.LotteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotterywinner.LotteryTable,
			Columns: []string{articlelotterywinner.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LotteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelotterywinner.LotteryTable,
			Columns: []string{articlelotterywinner.LotteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlelottery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleLotteryWinner{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelotterywinner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
