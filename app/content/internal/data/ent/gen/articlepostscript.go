// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articlepostscript"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ArticlePostscript is the model entity for the ArticlePostscript schema.
type ArticlePostscript struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 所属文章ID
	ArticleID int64 `json:"article_id,omitempty"`
	// 附言内容
	Content string `json:"content,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArticlePostscriptQuery when eager-loading is set.
	Edges        ArticlePostscriptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArticlePostscriptEdges holds the relations/edges for other nodes in the graph.
type ArticlePostscriptEdges struct {
	// Article holds the value of the article edge.
	Article *Article `json:"article,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArticlePostscriptEdges) ArticleOrErr() (*Article, error) {
	if e.Article != nil {
		return e.Article, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: article.Label}
	}
	return nil, &NotLoadedError{edge: "article"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArticlePostscript) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case articlepostscript.FieldID, articlepostscript.FieldArticleID:
			values[i] = new(sql.NullInt64)
		case articlepostscript.FieldContent:
			values[i] = new(sql.NullString)
		case articlepostscript.FieldCreatedAt, articlepostscript.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArticlePostscript fields.
func (_m *ArticlePostscript) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case articlepostscript.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case articlepostscript.FieldArticleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value.Valid {
				_m.ArticleID = value.Int64
			}
		case articlepostscript.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case articlepostscript.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case articlepostscript.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArticlePostscript.
// This includes values selected through modifiers, order, etc.
func (_m *ArticlePostscript) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryArticle queries the "article" edge of the ArticlePostscript entity.
func (_m *ArticlePostscript) QueryArticle() *ArticleQuery {
	return NewArticlePostscriptClient(_m.config).QueryArticle(_m)
}

// Update returns a builder for updating this ArticlePostscript.
// Note that you need to call ArticlePostscript.Unwrap() before calling this method if this ArticlePostscript
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ArticlePostscript) Update() *ArticlePostscriptUpdateOne {
	return NewArticlePostscriptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ArticlePostscript entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ArticlePostscript) Unwrap() *ArticlePostscript {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: ArticlePostscript is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ArticlePostscript) String() string {
	var builder strings.Builder
	builder.WriteString("ArticlePostscript(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("article_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ArticleID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ArticlePostscripts is a parsable slice of ArticlePostscript.
type ArticlePostscripts []*ArticlePostscript
