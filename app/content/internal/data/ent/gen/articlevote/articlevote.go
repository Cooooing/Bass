// Code generated by ent, DO NOT EDIT.

package articlevote

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the articlevote type in the database.
	Label = "article_vote"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArticleID holds the string denoting the article_id field in the database.
	FieldArticleID = "article_id"
	// FieldVoteOptions holds the string denoting the vote_options field in the database.
	FieldVoteOptions = "vote_options"
	// FieldVoteCounts holds the string denoting the vote_counts field in the database.
	FieldVoteCounts = "vote_counts"
	// FieldVoteMultiple holds the string denoting the vote_multiple field in the database.
	FieldVoteMultiple = "vote_multiple"
	// FieldVoteAnonymous holds the string denoting the vote_anonymous field in the database.
	FieldVoteAnonymous = "vote_anonymous"
	// FieldTotalCount holds the string denoting the total_count field in the database.
	FieldTotalCount = "total_count"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeArticle holds the string denoting the article edge name in mutations.
	EdgeArticle = "article"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the articlevote in the database.
	Table = "article_votes"
	// ArticleTable is the table that holds the article relation/edge.
	ArticleTable = "article_votes"
	// ArticleInverseTable is the table name for the Article entity.
	// It exists in this package in order to avoid circular dependency with the "article" package.
	ArticleInverseTable = "articles"
	// ArticleColumn is the table column denoting the article relation/edge.
	ArticleColumn = "article_id"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "article_vote_records"
	// RecordsInverseTable is the table name for the ArticleVoteRecord entity.
	// It exists in this package in order to avoid circular dependency with the "articlevoterecord" package.
	RecordsInverseTable = "article_vote_records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "vote_id"
)

// Columns holds all SQL columns for articlevote fields.
var Columns = []string{
	FieldID,
	FieldArticleID,
	FieldVoteOptions,
	FieldVoteCounts,
	FieldVoteMultiple,
	FieldVoteAnonymous,
	FieldTotalCount,
	FieldEndAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVoteMultiple holds the default value on creation for the "vote_multiple" field.
	DefaultVoteMultiple bool
	// DefaultVoteAnonymous holds the default value on creation for the "vote_anonymous" field.
	DefaultVoteAnonymous bool
	// DefaultTotalCount holds the default value on creation for the "total_count" field.
	DefaultTotalCount int32
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ArticleVote queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArticleID orders the results by the article_id field.
func ByArticleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArticleID, opts...).ToFunc()
}

// ByVoteMultiple orders the results by the vote_multiple field.
func ByVoteMultiple(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoteMultiple, opts...).ToFunc()
}

// ByVoteAnonymous orders the results by the vote_anonymous field.
func ByVoteAnonymous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoteAnonymous, opts...).ToFunc()
}

// ByTotalCount orders the results by the total_count field.
func ByTotalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCount, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByArticleField orders the results by article field.
func ByArticleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArticleStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newArticleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArticleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ArticleTable, ArticleColumn),
	)
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
