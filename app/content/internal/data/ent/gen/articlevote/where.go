// Code generated by ent, DO NOT EDIT.

package articlevote

import (
	"content/internal/data/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLTE(FieldID, id))
}

// ArticleID applies equality check predicate on the "article_id" field. It's identical to ArticleIDEQ.
func ArticleID(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldArticleID, v))
}

// VoteMultiple applies equality check predicate on the "vote_multiple" field. It's identical to VoteMultipleEQ.
func VoteMultiple(v bool) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldVoteMultiple, v))
}

// VoteAnonymous applies equality check predicate on the "vote_anonymous" field. It's identical to VoteAnonymousEQ.
func VoteAnonymous(v bool) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldVoteAnonymous, v))
}

// TotalCount applies equality check predicate on the "total_count" field. It's identical to TotalCountEQ.
func TotalCount(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldTotalCount, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldEndAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldUpdatedAt, v))
}

// ArticleIDEQ applies the EQ predicate on the "article_id" field.
func ArticleIDEQ(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldArticleID, v))
}

// ArticleIDNEQ applies the NEQ predicate on the "article_id" field.
func ArticleIDNEQ(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldArticleID, v))
}

// ArticleIDIn applies the In predicate on the "article_id" field.
func ArticleIDIn(vs ...int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIn(FieldArticleID, vs...))
}

// ArticleIDNotIn applies the NotIn predicate on the "article_id" field.
func ArticleIDNotIn(vs ...int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotIn(FieldArticleID, vs...))
}

// VoteOptionsIsNil applies the IsNil predicate on the "vote_options" field.
func VoteOptionsIsNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIsNull(FieldVoteOptions))
}

// VoteOptionsNotNil applies the NotNil predicate on the "vote_options" field.
func VoteOptionsNotNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotNull(FieldVoteOptions))
}

// VoteCountsIsNil applies the IsNil predicate on the "vote_counts" field.
func VoteCountsIsNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIsNull(FieldVoteCounts))
}

// VoteCountsNotNil applies the NotNil predicate on the "vote_counts" field.
func VoteCountsNotNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotNull(FieldVoteCounts))
}

// VoteMultipleEQ applies the EQ predicate on the "vote_multiple" field.
func VoteMultipleEQ(v bool) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldVoteMultiple, v))
}

// VoteMultipleNEQ applies the NEQ predicate on the "vote_multiple" field.
func VoteMultipleNEQ(v bool) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldVoteMultiple, v))
}

// VoteAnonymousEQ applies the EQ predicate on the "vote_anonymous" field.
func VoteAnonymousEQ(v bool) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldVoteAnonymous, v))
}

// VoteAnonymousNEQ applies the NEQ predicate on the "vote_anonymous" field.
func VoteAnonymousNEQ(v bool) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldVoteAnonymous, v))
}

// TotalCountEQ applies the EQ predicate on the "total_count" field.
func TotalCountEQ(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldTotalCount, v))
}

// TotalCountNEQ applies the NEQ predicate on the "total_count" field.
func TotalCountNEQ(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldTotalCount, v))
}

// TotalCountIn applies the In predicate on the "total_count" field.
func TotalCountIn(vs ...int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIn(FieldTotalCount, vs...))
}

// TotalCountNotIn applies the NotIn predicate on the "total_count" field.
func TotalCountNotIn(vs ...int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotIn(FieldTotalCount, vs...))
}

// TotalCountGT applies the GT predicate on the "total_count" field.
func TotalCountGT(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGT(FieldTotalCount, v))
}

// TotalCountGTE applies the GTE predicate on the "total_count" field.
func TotalCountGTE(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGTE(FieldTotalCount, v))
}

// TotalCountLT applies the LT predicate on the "total_count" field.
func TotalCountLT(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLT(FieldTotalCount, v))
}

// TotalCountLTE applies the LTE predicate on the "total_count" field.
func TotalCountLTE(v int) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLTE(FieldTotalCount, v))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotNull(FieldEndAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ArticleVote {
	return predicate.ArticleVote(sql.FieldNotNull(FieldUpdatedAt))
}

// HasArticle applies the HasEdge predicate on the "article" edge.
func HasArticle() predicate.ArticleVote {
	return predicate.ArticleVote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ArticleTable, ArticleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArticleWith applies the HasEdge predicate on the "article" edge with a given conditions (other predicates).
func HasArticleWith(preds ...predicate.Article) predicate.ArticleVote {
	return predicate.ArticleVote(func(s *sql.Selector) {
		step := newArticleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecords applies the HasEdge predicate on the "records" edge.
func HasRecords() predicate.ArticleVote {
	return predicate.ArticleVote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordsWith applies the HasEdge predicate on the "records" edge with a given conditions (other predicates).
func HasRecordsWith(preds ...predicate.ArticleVoteRecord) predicate.ArticleVote {
	return predicate.ArticleVote(func(s *sql.Selector) {
		step := newRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ArticleVote) predicate.ArticleVote {
	return predicate.ArticleVote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ArticleVote) predicate.ArticleVote {
	return predicate.ArticleVote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ArticleVote) predicate.ArticleVote {
	return predicate.ArticleVote(sql.NotPredicates(p))
}
