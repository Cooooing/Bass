// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/articlevoterecord"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleVoteCreate is the builder for creating a ArticleVote entity.
type ArticleVoteCreate struct {
	config
	mutation *ArticleVoteMutation
	hooks    []Hook
}

// SetArticleID sets the "article_id" field.
func (_c *ArticleVoteCreate) SetArticleID(v int) *ArticleVoteCreate {
	_c.mutation.SetArticleID(v)
	return _c
}

// SetVoteOptions sets the "vote_options" field.
func (_c *ArticleVoteCreate) SetVoteOptions(v []string) *ArticleVoteCreate {
	_c.mutation.SetVoteOptions(v)
	return _c
}

// SetVoteCounts sets the "vote_counts" field.
func (_c *ArticleVoteCreate) SetVoteCounts(v []int) *ArticleVoteCreate {
	_c.mutation.SetVoteCounts(v)
	return _c
}

// SetVoteMultiple sets the "vote_multiple" field.
func (_c *ArticleVoteCreate) SetVoteMultiple(v bool) *ArticleVoteCreate {
	_c.mutation.SetVoteMultiple(v)
	return _c
}

// SetNillableVoteMultiple sets the "vote_multiple" field if the given value is not nil.
func (_c *ArticleVoteCreate) SetNillableVoteMultiple(v *bool) *ArticleVoteCreate {
	if v != nil {
		_c.SetVoteMultiple(*v)
	}
	return _c
}

// SetVoteAnonymous sets the "vote_anonymous" field.
func (_c *ArticleVoteCreate) SetVoteAnonymous(v bool) *ArticleVoteCreate {
	_c.mutation.SetVoteAnonymous(v)
	return _c
}

// SetNillableVoteAnonymous sets the "vote_anonymous" field if the given value is not nil.
func (_c *ArticleVoteCreate) SetNillableVoteAnonymous(v *bool) *ArticleVoteCreate {
	if v != nil {
		_c.SetVoteAnonymous(*v)
	}
	return _c
}

// SetTotalCount sets the "total_count" field.
func (_c *ArticleVoteCreate) SetTotalCount(v int) *ArticleVoteCreate {
	_c.mutation.SetTotalCount(v)
	return _c
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (_c *ArticleVoteCreate) SetNillableTotalCount(v *int) *ArticleVoteCreate {
	if v != nil {
		_c.SetTotalCount(*v)
	}
	return _c
}

// SetEndAt sets the "end_at" field.
func (_c *ArticleVoteCreate) SetEndAt(v time.Time) *ArticleVoteCreate {
	_c.mutation.SetEndAt(v)
	return _c
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_c *ArticleVoteCreate) SetNillableEndAt(v *time.Time) *ArticleVoteCreate {
	if v != nil {
		_c.SetEndAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ArticleVoteCreate) SetCreatedAt(v time.Time) *ArticleVoteCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ArticleVoteCreate) SetNillableCreatedAt(v *time.Time) *ArticleVoteCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ArticleVoteCreate) SetUpdatedAt(v time.Time) *ArticleVoteCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ArticleVoteCreate) SetNillableUpdatedAt(v *time.Time) *ArticleVoteCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetArticle sets the "article" edge to the Article entity.
func (_c *ArticleVoteCreate) SetArticle(v *Article) *ArticleVoteCreate {
	return _c.SetArticleID(v.ID)
}

// AddRecordIDs adds the "records" edge to the ArticleVoteRecord entity by IDs.
func (_c *ArticleVoteCreate) AddRecordIDs(ids ...int) *ArticleVoteCreate {
	_c.mutation.AddRecordIDs(ids...)
	return _c
}

// AddRecords adds the "records" edges to the ArticleVoteRecord entity.
func (_c *ArticleVoteCreate) AddRecords(v ...*ArticleVoteRecord) *ArticleVoteCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRecordIDs(ids...)
}

// Mutation returns the ArticleVoteMutation object of the builder.
func (_c *ArticleVoteCreate) Mutation() *ArticleVoteMutation {
	return _c.mutation
}

// Save creates the ArticleVote in the database.
func (_c *ArticleVoteCreate) Save(ctx context.Context) (*ArticleVote, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ArticleVoteCreate) SaveX(ctx context.Context) *ArticleVote {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArticleVoteCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArticleVoteCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ArticleVoteCreate) defaults() {
	if _, ok := _c.mutation.VoteMultiple(); !ok {
		v := articlevote.DefaultVoteMultiple
		_c.mutation.SetVoteMultiple(v)
	}
	if _, ok := _c.mutation.VoteAnonymous(); !ok {
		v := articlevote.DefaultVoteAnonymous
		_c.mutation.SetVoteAnonymous(v)
	}
	if _, ok := _c.mutation.TotalCount(); !ok {
		v := articlevote.DefaultTotalCount
		_c.mutation.SetTotalCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := articlevote.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := articlevote.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ArticleVoteCreate) check() error {
	if _, ok := _c.mutation.ArticleID(); !ok {
		return &ValidationError{Name: "article_id", err: errors.New(`gen: missing required field "ArticleVote.article_id"`)}
	}
	if _, ok := _c.mutation.VoteMultiple(); !ok {
		return &ValidationError{Name: "vote_multiple", err: errors.New(`gen: missing required field "ArticleVote.vote_multiple"`)}
	}
	if _, ok := _c.mutation.VoteAnonymous(); !ok {
		return &ValidationError{Name: "vote_anonymous", err: errors.New(`gen: missing required field "ArticleVote.vote_anonymous"`)}
	}
	if _, ok := _c.mutation.TotalCount(); !ok {
		return &ValidationError{Name: "total_count", err: errors.New(`gen: missing required field "ArticleVote.total_count"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "ArticleVote.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "ArticleVote.updated_at"`)}
	}
	if len(_c.mutation.ArticleIDs()) == 0 {
		return &ValidationError{Name: "article", err: errors.New(`gen: missing required edge "ArticleVote.article"`)}
	}
	return nil
}

func (_c *ArticleVoteCreate) sqlSave(ctx context.Context) (*ArticleVote, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ArticleVoteCreate) createSpec() (*ArticleVote, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticleVote{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(articlevote.Table, sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.VoteOptions(); ok {
		_spec.SetField(articlevote.FieldVoteOptions, field.TypeJSON, value)
		_node.VoteOptions = value
	}
	if value, ok := _c.mutation.VoteCounts(); ok {
		_spec.SetField(articlevote.FieldVoteCounts, field.TypeJSON, value)
		_node.VoteCounts = value
	}
	if value, ok := _c.mutation.VoteMultiple(); ok {
		_spec.SetField(articlevote.FieldVoteMultiple, field.TypeBool, value)
		_node.VoteMultiple = value
	}
	if value, ok := _c.mutation.VoteAnonymous(); ok {
		_spec.SetField(articlevote.FieldVoteAnonymous, field.TypeBool, value)
		_node.VoteAnonymous = value
	}
	if value, ok := _c.mutation.TotalCount(); ok {
		_spec.SetField(articlevote.FieldTotalCount, field.TypeInt, value)
		_node.TotalCount = value
	}
	if value, ok := _c.mutation.EndAt(); ok {
		_spec.SetField(articlevote.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(articlevote.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(articlevote.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevote.ArticleTable,
			Columns: []string{articlevote.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArticleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArticleVoteCreateBulk is the builder for creating many ArticleVote entities in bulk.
type ArticleVoteCreateBulk struct {
	config
	err      error
	builders []*ArticleVoteCreate
}

// Save creates the ArticleVote entities in the database.
func (_c *ArticleVoteCreateBulk) Save(ctx context.Context) ([]*ArticleVote, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ArticleVote, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleVoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ArticleVoteCreateBulk) SaveX(ctx context.Context) []*ArticleVote {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArticleVoteCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArticleVoteCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
