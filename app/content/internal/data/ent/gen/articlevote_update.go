// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/articlevoterecord"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ArticleVoteUpdate is the builder for updating ArticleVote entities.
type ArticleVoteUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleVoteMutation
}

// Where appends a list predicates to the ArticleVoteUpdate builder.
func (_u *ArticleVoteUpdate) Where(ps ...predicate.ArticleVote) *ArticleVoteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetArticleID sets the "article_id" field.
func (_u *ArticleVoteUpdate) SetArticleID(v int) *ArticleVoteUpdate {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableArticleID(v *int) *ArticleVoteUpdate {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetVoteOptions sets the "vote_options" field.
func (_u *ArticleVoteUpdate) SetVoteOptions(v []string) *ArticleVoteUpdate {
	_u.mutation.SetVoteOptions(v)
	return _u
}

// AppendVoteOptions appends value to the "vote_options" field.
func (_u *ArticleVoteUpdate) AppendVoteOptions(v []string) *ArticleVoteUpdate {
	_u.mutation.AppendVoteOptions(v)
	return _u
}

// ClearVoteOptions clears the value of the "vote_options" field.
func (_u *ArticleVoteUpdate) ClearVoteOptions() *ArticleVoteUpdate {
	_u.mutation.ClearVoteOptions()
	return _u
}

// SetVoteCounts sets the "vote_counts" field.
func (_u *ArticleVoteUpdate) SetVoteCounts(v []int) *ArticleVoteUpdate {
	_u.mutation.SetVoteCounts(v)
	return _u
}

// AppendVoteCounts appends value to the "vote_counts" field.
func (_u *ArticleVoteUpdate) AppendVoteCounts(v []int) *ArticleVoteUpdate {
	_u.mutation.AppendVoteCounts(v)
	return _u
}

// ClearVoteCounts clears the value of the "vote_counts" field.
func (_u *ArticleVoteUpdate) ClearVoteCounts() *ArticleVoteUpdate {
	_u.mutation.ClearVoteCounts()
	return _u
}

// SetVoteMultiple sets the "vote_multiple" field.
func (_u *ArticleVoteUpdate) SetVoteMultiple(v bool) *ArticleVoteUpdate {
	_u.mutation.SetVoteMultiple(v)
	return _u
}

// SetNillableVoteMultiple sets the "vote_multiple" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableVoteMultiple(v *bool) *ArticleVoteUpdate {
	if v != nil {
		_u.SetVoteMultiple(*v)
	}
	return _u
}

// SetVoteAnonymous sets the "vote_anonymous" field.
func (_u *ArticleVoteUpdate) SetVoteAnonymous(v bool) *ArticleVoteUpdate {
	_u.mutation.SetVoteAnonymous(v)
	return _u
}

// SetNillableVoteAnonymous sets the "vote_anonymous" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableVoteAnonymous(v *bool) *ArticleVoteUpdate {
	if v != nil {
		_u.SetVoteAnonymous(*v)
	}
	return _u
}

// SetTotalCount sets the "total_count" field.
func (_u *ArticleVoteUpdate) SetTotalCount(v int) *ArticleVoteUpdate {
	_u.mutation.ResetTotalCount()
	_u.mutation.SetTotalCount(v)
	return _u
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableTotalCount(v *int) *ArticleVoteUpdate {
	if v != nil {
		_u.SetTotalCount(*v)
	}
	return _u
}

// AddTotalCount adds value to the "total_count" field.
func (_u *ArticleVoteUpdate) AddTotalCount(v int) *ArticleVoteUpdate {
	_u.mutation.AddTotalCount(v)
	return _u
}

// SetEndAt sets the "end_at" field.
func (_u *ArticleVoteUpdate) SetEndAt(v time.Time) *ArticleVoteUpdate {
	_u.mutation.SetEndAt(v)
	return _u
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableEndAt(v *time.Time) *ArticleVoteUpdate {
	if v != nil {
		_u.SetEndAt(*v)
	}
	return _u
}

// ClearEndAt clears the value of the "end_at" field.
func (_u *ArticleVoteUpdate) ClearEndAt() *ArticleVoteUpdate {
	_u.mutation.ClearEndAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleVoteUpdate) SetCreatedAt(v time.Time) *ArticleVoteUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableCreatedAt(v *time.Time) *ArticleVoteUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleVoteUpdate) SetUpdatedAt(v time.Time) *ArticleVoteUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleVoteUpdate) SetNillableUpdatedAt(v *time.Time) *ArticleVoteUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *ArticleVoteUpdate) SetArticle(v *Article) *ArticleVoteUpdate {
	return _u.SetArticleID(v.ID)
}

// AddRecordIDs adds the "records" edge to the ArticleVoteRecord entity by IDs.
func (_u *ArticleVoteUpdate) AddRecordIDs(ids ...int) *ArticleVoteUpdate {
	_u.mutation.AddRecordIDs(ids...)
	return _u
}

// AddRecords adds the "records" edges to the ArticleVoteRecord entity.
func (_u *ArticleVoteUpdate) AddRecords(v ...*ArticleVoteRecord) *ArticleVoteUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRecordIDs(ids...)
}

// Mutation returns the ArticleVoteMutation object of the builder.
func (_u *ArticleVoteUpdate) Mutation() *ArticleVoteMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *ArticleVoteUpdate) ClearArticle() *ArticleVoteUpdate {
	_u.mutation.ClearArticle()
	return _u
}

// ClearRecords clears all "records" edges to the ArticleVoteRecord entity.
func (_u *ArticleVoteUpdate) ClearRecords() *ArticleVoteUpdate {
	_u.mutation.ClearRecords()
	return _u
}

// RemoveRecordIDs removes the "records" edge to ArticleVoteRecord entities by IDs.
func (_u *ArticleVoteUpdate) RemoveRecordIDs(ids ...int) *ArticleVoteUpdate {
	_u.mutation.RemoveRecordIDs(ids...)
	return _u
}

// RemoveRecords removes "records" edges to ArticleVoteRecord entities.
func (_u *ArticleVoteUpdate) RemoveRecords(v ...*ArticleVoteRecord) *ArticleVoteUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleVoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleVoteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleVoteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleVoteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleVoteUpdate) check() error {
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleVote.article"`)
	}
	return nil
}

func (_u *ArticleVoteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlevote.Table, articlevote.Columns, sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.VoteOptions(); ok {
		_spec.SetField(articlevote.FieldVoteOptions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedVoteOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, articlevote.FieldVoteOptions, value)
		})
	}
	if _u.mutation.VoteOptionsCleared() {
		_spec.ClearField(articlevote.FieldVoteOptions, field.TypeJSON)
	}
	if value, ok := _u.mutation.VoteCounts(); ok {
		_spec.SetField(articlevote.FieldVoteCounts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedVoteCounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, articlevote.FieldVoteCounts, value)
		})
	}
	if _u.mutation.VoteCountsCleared() {
		_spec.ClearField(articlevote.FieldVoteCounts, field.TypeJSON)
	}
	if value, ok := _u.mutation.VoteMultiple(); ok {
		_spec.SetField(articlevote.FieldVoteMultiple, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VoteAnonymous(); ok {
		_spec.SetField(articlevote.FieldVoteAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TotalCount(); ok {
		_spec.SetField(articlevote.FieldTotalCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalCount(); ok {
		_spec.AddField(articlevote.FieldTotalCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EndAt(); ok {
		_spec.SetField(articlevote.FieldEndAt, field.TypeTime, value)
	}
	if _u.mutation.EndAtCleared() {
		_spec.ClearField(articlevote.FieldEndAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlevote.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlevote.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevote.ArticleTable,
			Columns: []string{articlevote.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevote.ArticleTable,
			Columns: []string{articlevote.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !_u.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlevote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleVoteUpdateOne is the builder for updating a single ArticleVote entity.
type ArticleVoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleVoteMutation
}

// SetArticleID sets the "article_id" field.
func (_u *ArticleVoteUpdateOne) SetArticleID(v int) *ArticleVoteUpdateOne {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableArticleID(v *int) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetVoteOptions sets the "vote_options" field.
func (_u *ArticleVoteUpdateOne) SetVoteOptions(v []string) *ArticleVoteUpdateOne {
	_u.mutation.SetVoteOptions(v)
	return _u
}

// AppendVoteOptions appends value to the "vote_options" field.
func (_u *ArticleVoteUpdateOne) AppendVoteOptions(v []string) *ArticleVoteUpdateOne {
	_u.mutation.AppendVoteOptions(v)
	return _u
}

// ClearVoteOptions clears the value of the "vote_options" field.
func (_u *ArticleVoteUpdateOne) ClearVoteOptions() *ArticleVoteUpdateOne {
	_u.mutation.ClearVoteOptions()
	return _u
}

// SetVoteCounts sets the "vote_counts" field.
func (_u *ArticleVoteUpdateOne) SetVoteCounts(v []int) *ArticleVoteUpdateOne {
	_u.mutation.SetVoteCounts(v)
	return _u
}

// AppendVoteCounts appends value to the "vote_counts" field.
func (_u *ArticleVoteUpdateOne) AppendVoteCounts(v []int) *ArticleVoteUpdateOne {
	_u.mutation.AppendVoteCounts(v)
	return _u
}

// ClearVoteCounts clears the value of the "vote_counts" field.
func (_u *ArticleVoteUpdateOne) ClearVoteCounts() *ArticleVoteUpdateOne {
	_u.mutation.ClearVoteCounts()
	return _u
}

// SetVoteMultiple sets the "vote_multiple" field.
func (_u *ArticleVoteUpdateOne) SetVoteMultiple(v bool) *ArticleVoteUpdateOne {
	_u.mutation.SetVoteMultiple(v)
	return _u
}

// SetNillableVoteMultiple sets the "vote_multiple" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableVoteMultiple(v *bool) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetVoteMultiple(*v)
	}
	return _u
}

// SetVoteAnonymous sets the "vote_anonymous" field.
func (_u *ArticleVoteUpdateOne) SetVoteAnonymous(v bool) *ArticleVoteUpdateOne {
	_u.mutation.SetVoteAnonymous(v)
	return _u
}

// SetNillableVoteAnonymous sets the "vote_anonymous" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableVoteAnonymous(v *bool) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetVoteAnonymous(*v)
	}
	return _u
}

// SetTotalCount sets the "total_count" field.
func (_u *ArticleVoteUpdateOne) SetTotalCount(v int) *ArticleVoteUpdateOne {
	_u.mutation.ResetTotalCount()
	_u.mutation.SetTotalCount(v)
	return _u
}

// SetNillableTotalCount sets the "total_count" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableTotalCount(v *int) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetTotalCount(*v)
	}
	return _u
}

// AddTotalCount adds value to the "total_count" field.
func (_u *ArticleVoteUpdateOne) AddTotalCount(v int) *ArticleVoteUpdateOne {
	_u.mutation.AddTotalCount(v)
	return _u
}

// SetEndAt sets the "end_at" field.
func (_u *ArticleVoteUpdateOne) SetEndAt(v time.Time) *ArticleVoteUpdateOne {
	_u.mutation.SetEndAt(v)
	return _u
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableEndAt(v *time.Time) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetEndAt(*v)
	}
	return _u
}

// ClearEndAt clears the value of the "end_at" field.
func (_u *ArticleVoteUpdateOne) ClearEndAt() *ArticleVoteUpdateOne {
	_u.mutation.ClearEndAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleVoteUpdateOne) SetCreatedAt(v time.Time) *ArticleVoteUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableCreatedAt(v *time.Time) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleVoteUpdateOne) SetUpdatedAt(v time.Time) *ArticleVoteUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleVoteUpdateOne) SetNillableUpdatedAt(v *time.Time) *ArticleVoteUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *ArticleVoteUpdateOne) SetArticle(v *Article) *ArticleVoteUpdateOne {
	return _u.SetArticleID(v.ID)
}

// AddRecordIDs adds the "records" edge to the ArticleVoteRecord entity by IDs.
func (_u *ArticleVoteUpdateOne) AddRecordIDs(ids ...int) *ArticleVoteUpdateOne {
	_u.mutation.AddRecordIDs(ids...)
	return _u
}

// AddRecords adds the "records" edges to the ArticleVoteRecord entity.
func (_u *ArticleVoteUpdateOne) AddRecords(v ...*ArticleVoteRecord) *ArticleVoteUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRecordIDs(ids...)
}

// Mutation returns the ArticleVoteMutation object of the builder.
func (_u *ArticleVoteUpdateOne) Mutation() *ArticleVoteMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *ArticleVoteUpdateOne) ClearArticle() *ArticleVoteUpdateOne {
	_u.mutation.ClearArticle()
	return _u
}

// ClearRecords clears all "records" edges to the ArticleVoteRecord entity.
func (_u *ArticleVoteUpdateOne) ClearRecords() *ArticleVoteUpdateOne {
	_u.mutation.ClearRecords()
	return _u
}

// RemoveRecordIDs removes the "records" edge to ArticleVoteRecord entities by IDs.
func (_u *ArticleVoteUpdateOne) RemoveRecordIDs(ids ...int) *ArticleVoteUpdateOne {
	_u.mutation.RemoveRecordIDs(ids...)
	return _u
}

// RemoveRecords removes "records" edges to ArticleVoteRecord entities.
func (_u *ArticleVoteUpdateOne) RemoveRecords(v ...*ArticleVoteRecord) *ArticleVoteUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRecordIDs(ids...)
}

// Where appends a list predicates to the ArticleVoteUpdate builder.
func (_u *ArticleVoteUpdateOne) Where(ps ...predicate.ArticleVote) *ArticleVoteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleVoteUpdateOne) Select(field string, fields ...string) *ArticleVoteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ArticleVote entity.
func (_u *ArticleVoteUpdateOne) Save(ctx context.Context) (*ArticleVote, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleVoteUpdateOne) SaveX(ctx context.Context) *ArticleVote {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleVoteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleVoteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleVoteUpdateOne) check() error {
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleVote.article"`)
	}
	return nil
}

func (_u *ArticleVoteUpdateOne) sqlSave(ctx context.Context) (_node *ArticleVote, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlevote.Table, articlevote.Columns, sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ArticleVote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlevote.FieldID)
		for _, f := range fields {
			if !articlevote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != articlevote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.VoteOptions(); ok {
		_spec.SetField(articlevote.FieldVoteOptions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedVoteOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, articlevote.FieldVoteOptions, value)
		})
	}
	if _u.mutation.VoteOptionsCleared() {
		_spec.ClearField(articlevote.FieldVoteOptions, field.TypeJSON)
	}
	if value, ok := _u.mutation.VoteCounts(); ok {
		_spec.SetField(articlevote.FieldVoteCounts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedVoteCounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, articlevote.FieldVoteCounts, value)
		})
	}
	if _u.mutation.VoteCountsCleared() {
		_spec.ClearField(articlevote.FieldVoteCounts, field.TypeJSON)
	}
	if value, ok := _u.mutation.VoteMultiple(); ok {
		_spec.SetField(articlevote.FieldVoteMultiple, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VoteAnonymous(); ok {
		_spec.SetField(articlevote.FieldVoteAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TotalCount(); ok {
		_spec.SetField(articlevote.FieldTotalCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalCount(); ok {
		_spec.AddField(articlevote.FieldTotalCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EndAt(); ok {
		_spec.SetField(articlevote.FieldEndAt, field.TypeTime, value)
	}
	if _u.mutation.EndAtCleared() {
		_spec.ClearField(articlevote.FieldEndAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlevote.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlevote.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevote.ArticleTable,
			Columns: []string{articlevote.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevote.ArticleTable,
			Columns: []string{articlevote.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !_u.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   articlevote.RecordsTable,
			Columns: []string{articlevote.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleVote{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlevote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
