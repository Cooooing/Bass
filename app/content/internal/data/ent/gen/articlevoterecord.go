// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/articlevoterecord"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ArticleVoteRecord is the model entity for the ArticleVoteRecord schema.
type ArticleVoteRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 所属投票ID
	VoteID int `json:"vote_id,omitempty"`
	// 投票用户ID
	UserID int `json:"user_id,omitempty"`
	// 投票选项索引
	OptionIndex int `json:"option_index,omitempty"`
	// 是否匿名
	Anonymous bool `json:"anonymous,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArticleVoteRecordQuery when eager-loading is set.
	Edges        ArticleVoteRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArticleVoteRecordEdges holds the relations/edges for other nodes in the graph.
type ArticleVoteRecordEdges struct {
	// Vote holds the value of the vote edge.
	Vote *ArticleVote `json:"vote,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VoteOrErr returns the Vote value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArticleVoteRecordEdges) VoteOrErr() (*ArticleVote, error) {
	if e.Vote != nil {
		return e.Vote, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: articlevote.Label}
	}
	return nil, &NotLoadedError{edge: "vote"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArticleVoteRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case articlevoterecord.FieldAnonymous:
			values[i] = new(sql.NullBool)
		case articlevoterecord.FieldID, articlevoterecord.FieldVoteID, articlevoterecord.FieldUserID, articlevoterecord.FieldOptionIndex:
			values[i] = new(sql.NullInt64)
		case articlevoterecord.FieldCreatedAt, articlevoterecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArticleVoteRecord fields.
func (_m *ArticleVoteRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case articlevoterecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case articlevoterecord.FieldVoteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vote_id", values[i])
			} else if value.Valid {
				_m.VoteID = int(value.Int64)
			}
		case articlevoterecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = int(value.Int64)
			}
		case articlevoterecord.FieldOptionIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field option_index", values[i])
			} else if value.Valid {
				_m.OptionIndex = int(value.Int64)
			}
		case articlevoterecord.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				_m.Anonymous = value.Bool
			}
		case articlevoterecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case articlevoterecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArticleVoteRecord.
// This includes values selected through modifiers, order, etc.
func (_m *ArticleVoteRecord) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryVote queries the "vote" edge of the ArticleVoteRecord entity.
func (_m *ArticleVoteRecord) QueryVote() *ArticleVoteQuery {
	return NewArticleVoteRecordClient(_m.config).QueryVote(_m)
}

// Update returns a builder for updating this ArticleVoteRecord.
// Note that you need to call ArticleVoteRecord.Unwrap() before calling this method if this ArticleVoteRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ArticleVoteRecord) Update() *ArticleVoteRecordUpdateOne {
	return NewArticleVoteRecordClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ArticleVoteRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ArticleVoteRecord) Unwrap() *ArticleVoteRecord {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: ArticleVoteRecord is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ArticleVoteRecord) String() string {
	var builder strings.Builder
	builder.WriteString("ArticleVoteRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("vote_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.VoteID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("option_index=")
	builder.WriteString(fmt.Sprintf("%v", _m.OptionIndex))
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", _m.Anonymous))
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ArticleVoteRecords is a parsable slice of ArticleVoteRecord.
type ArticleVoteRecords []*ArticleVoteRecord
