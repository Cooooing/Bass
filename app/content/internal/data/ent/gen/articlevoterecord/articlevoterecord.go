// Code generated by ent, DO NOT EDIT.

package articlevoterecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the articlevoterecord type in the database.
	Label = "article_vote_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVoteID holds the string denoting the vote_id field in the database.
	FieldVoteID = "vote_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOptionIndex holds the string denoting the option_index field in the database.
	FieldOptionIndex = "option_index"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeVote holds the string denoting the vote edge name in mutations.
	EdgeVote = "vote"
	// Table holds the table name of the articlevoterecord in the database.
	Table = "article_vote_records"
	// VoteTable is the table that holds the vote relation/edge.
	VoteTable = "article_vote_records"
	// VoteInverseTable is the table name for the ArticleVote entity.
	// It exists in this package in order to avoid circular dependency with the "articlevote" package.
	VoteInverseTable = "article_votes"
	// VoteColumn is the table column denoting the vote relation/edge.
	VoteColumn = "vote_id"
)

// Columns holds all SQL columns for articlevoterecord fields.
var Columns = []string{
	FieldID,
	FieldVoteID,
	FieldUserID,
	FieldOptionIndex,
	FieldAnonymous,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAnonymous holds the default value on creation for the "anonymous" field.
	DefaultAnonymous bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ArticleVoteRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVoteID orders the results by the vote_id field.
func ByVoteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoteID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOptionIndex orders the results by the option_index field.
func ByOptionIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionIndex, opts...).ToFunc()
}

// ByAnonymous orders the results by the anonymous field.
func ByAnonymous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnonymous, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVoteField orders the results by vote field.
func ByVoteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoteStep(), sql.OrderByField(field, opts...))
	}
}
func newVoteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VoteTable, VoteColumn),
	)
}
