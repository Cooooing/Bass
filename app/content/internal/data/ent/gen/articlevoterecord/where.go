// Code generated by ent, DO NOT EDIT.

package articlevoterecord

import (
	"content/internal/data/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLTE(FieldID, id))
}

// VoteID applies equality check predicate on the "vote_id" field. It's identical to VoteIDEQ.
func VoteID(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldVoteID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldUserID, v))
}

// OptionIndex applies equality check predicate on the "option_index" field. It's identical to OptionIndexEQ.
func OptionIndex(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldOptionIndex, v))
}

// Anonymous applies equality check predicate on the "anonymous" field. It's identical to AnonymousEQ.
func Anonymous(v bool) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldAnonymous, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// VoteIDEQ applies the EQ predicate on the "vote_id" field.
func VoteIDEQ(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldVoteID, v))
}

// VoteIDNEQ applies the NEQ predicate on the "vote_id" field.
func VoteIDNEQ(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldVoteID, v))
}

// VoteIDIn applies the In predicate on the "vote_id" field.
func VoteIDIn(vs ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldIn(FieldVoteID, vs...))
}

// VoteIDNotIn applies the NotIn predicate on the "vote_id" field.
func VoteIDNotIn(vs ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNotIn(FieldVoteID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLTE(FieldUserID, v))
}

// OptionIndexEQ applies the EQ predicate on the "option_index" field.
func OptionIndexEQ(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldOptionIndex, v))
}

// OptionIndexNEQ applies the NEQ predicate on the "option_index" field.
func OptionIndexNEQ(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldOptionIndex, v))
}

// OptionIndexIn applies the In predicate on the "option_index" field.
func OptionIndexIn(vs ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldIn(FieldOptionIndex, vs...))
}

// OptionIndexNotIn applies the NotIn predicate on the "option_index" field.
func OptionIndexNotIn(vs ...int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNotIn(FieldOptionIndex, vs...))
}

// OptionIndexGT applies the GT predicate on the "option_index" field.
func OptionIndexGT(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGT(FieldOptionIndex, v))
}

// OptionIndexGTE applies the GTE predicate on the "option_index" field.
func OptionIndexGTE(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGTE(FieldOptionIndex, v))
}

// OptionIndexLT applies the LT predicate on the "option_index" field.
func OptionIndexLT(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLT(FieldOptionIndex, v))
}

// OptionIndexLTE applies the LTE predicate on the "option_index" field.
func OptionIndexLTE(v int) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLTE(FieldOptionIndex, v))
}

// AnonymousEQ applies the EQ predicate on the "anonymous" field.
func AnonymousEQ(v bool) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldAnonymous, v))
}

// AnonymousNEQ applies the NEQ predicate on the "anonymous" field.
func AnonymousNEQ(v bool) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldAnonymous, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasVote applies the HasEdge predicate on the "vote" edge.
func HasVote() predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VoteTable, VoteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoteWith applies the HasEdge predicate on the "vote" edge with a given conditions (other predicates).
func HasVoteWith(preds ...predicate.ArticleVote) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(func(s *sql.Selector) {
		step := newVoteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ArticleVoteRecord) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ArticleVoteRecord) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ArticleVoteRecord) predicate.ArticleVoteRecord {
	return predicate.ArticleVoteRecord(sql.NotPredicates(p))
}
