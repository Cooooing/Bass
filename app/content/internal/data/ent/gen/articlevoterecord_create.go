// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/articlevoterecord"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleVoteRecordCreate is the builder for creating a ArticleVoteRecord entity.
type ArticleVoteRecordCreate struct {
	config
	mutation *ArticleVoteRecordMutation
	hooks    []Hook
}

// SetVoteID sets the "vote_id" field.
func (_c *ArticleVoteRecordCreate) SetVoteID(v int) *ArticleVoteRecordCreate {
	_c.mutation.SetVoteID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *ArticleVoteRecordCreate) SetUserID(v int) *ArticleVoteRecordCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetOptionIndex sets the "option_index" field.
func (_c *ArticleVoteRecordCreate) SetOptionIndex(v int) *ArticleVoteRecordCreate {
	_c.mutation.SetOptionIndex(v)
	return _c
}

// SetAnonymous sets the "anonymous" field.
func (_c *ArticleVoteRecordCreate) SetAnonymous(v bool) *ArticleVoteRecordCreate {
	_c.mutation.SetAnonymous(v)
	return _c
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_c *ArticleVoteRecordCreate) SetNillableAnonymous(v *bool) *ArticleVoteRecordCreate {
	if v != nil {
		_c.SetAnonymous(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ArticleVoteRecordCreate) SetCreatedAt(v time.Time) *ArticleVoteRecordCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ArticleVoteRecordCreate) SetNillableCreatedAt(v *time.Time) *ArticleVoteRecordCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ArticleVoteRecordCreate) SetUpdatedAt(v time.Time) *ArticleVoteRecordCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ArticleVoteRecordCreate) SetNillableUpdatedAt(v *time.Time) *ArticleVoteRecordCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetVote sets the "vote" edge to the ArticleVote entity.
func (_c *ArticleVoteRecordCreate) SetVote(v *ArticleVote) *ArticleVoteRecordCreate {
	return _c.SetVoteID(v.ID)
}

// Mutation returns the ArticleVoteRecordMutation object of the builder.
func (_c *ArticleVoteRecordCreate) Mutation() *ArticleVoteRecordMutation {
	return _c.mutation
}

// Save creates the ArticleVoteRecord in the database.
func (_c *ArticleVoteRecordCreate) Save(ctx context.Context) (*ArticleVoteRecord, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ArticleVoteRecordCreate) SaveX(ctx context.Context) *ArticleVoteRecord {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArticleVoteRecordCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArticleVoteRecordCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ArticleVoteRecordCreate) defaults() {
	if _, ok := _c.mutation.Anonymous(); !ok {
		v := articlevoterecord.DefaultAnonymous
		_c.mutation.SetAnonymous(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := articlevoterecord.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := articlevoterecord.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ArticleVoteRecordCreate) check() error {
	if _, ok := _c.mutation.VoteID(); !ok {
		return &ValidationError{Name: "vote_id", err: errors.New(`gen: missing required field "ArticleVoteRecord.vote_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`gen: missing required field "ArticleVoteRecord.user_id"`)}
	}
	if _, ok := _c.mutation.OptionIndex(); !ok {
		return &ValidationError{Name: "option_index", err: errors.New(`gen: missing required field "ArticleVoteRecord.option_index"`)}
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		return &ValidationError{Name: "anonymous", err: errors.New(`gen: missing required field "ArticleVoteRecord.anonymous"`)}
	}
	if len(_c.mutation.VoteIDs()) == 0 {
		return &ValidationError{Name: "vote", err: errors.New(`gen: missing required edge "ArticleVoteRecord.vote"`)}
	}
	return nil
}

func (_c *ArticleVoteRecordCreate) sqlSave(ctx context.Context) (*ArticleVoteRecord, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ArticleVoteRecordCreate) createSpec() (*ArticleVoteRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticleVoteRecord{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(articlevoterecord.Table, sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(articlevoterecord.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.OptionIndex(); ok {
		_spec.SetField(articlevoterecord.FieldOptionIndex, field.TypeInt, value)
		_node.OptionIndex = value
	}
	if value, ok := _c.mutation.Anonymous(); ok {
		_spec.SetField(articlevoterecord.FieldAnonymous, field.TypeBool, value)
		_node.Anonymous = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(articlevoterecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(articlevoterecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevoterecord.VoteTable,
			Columns: []string{articlevoterecord.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VoteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArticleVoteRecordCreateBulk is the builder for creating many ArticleVoteRecord entities in bulk.
type ArticleVoteRecordCreateBulk struct {
	config
	err      error
	builders []*ArticleVoteRecordCreate
}

// Save creates the ArticleVoteRecord entities in the database.
func (_c *ArticleVoteRecordCreateBulk) Save(ctx context.Context) ([]*ArticleVoteRecord, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ArticleVoteRecord, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleVoteRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ArticleVoteRecordCreateBulk) SaveX(ctx context.Context) []*ArticleVoteRecord {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ArticleVoteRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ArticleVoteRecordCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
