// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/articlevoterecord"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleVoteRecordUpdate is the builder for updating ArticleVoteRecord entities.
type ArticleVoteRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleVoteRecordMutation
}

// Where appends a list predicates to the ArticleVoteRecordUpdate builder.
func (_u *ArticleVoteRecordUpdate) Where(ps ...predicate.ArticleVoteRecord) *ArticleVoteRecordUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetVoteID sets the "vote_id" field.
func (_u *ArticleVoteRecordUpdate) SetVoteID(v int) *ArticleVoteRecordUpdate {
	_u.mutation.SetVoteID(v)
	return _u
}

// SetNillableVoteID sets the "vote_id" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdate) SetNillableVoteID(v *int) *ArticleVoteRecordUpdate {
	if v != nil {
		_u.SetVoteID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleVoteRecordUpdate) SetUserID(v int) *ArticleVoteRecordUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdate) SetNillableUserID(v *int) *ArticleVoteRecordUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleVoteRecordUpdate) AddUserID(v int) *ArticleVoteRecordUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetOptionIndex sets the "option_index" field.
func (_u *ArticleVoteRecordUpdate) SetOptionIndex(v int) *ArticleVoteRecordUpdate {
	_u.mutation.ResetOptionIndex()
	_u.mutation.SetOptionIndex(v)
	return _u
}

// SetNillableOptionIndex sets the "option_index" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdate) SetNillableOptionIndex(v *int) *ArticleVoteRecordUpdate {
	if v != nil {
		_u.SetOptionIndex(*v)
	}
	return _u
}

// AddOptionIndex adds value to the "option_index" field.
func (_u *ArticleVoteRecordUpdate) AddOptionIndex(v int) *ArticleVoteRecordUpdate {
	_u.mutation.AddOptionIndex(v)
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *ArticleVoteRecordUpdate) SetAnonymous(v bool) *ArticleVoteRecordUpdate {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdate) SetNillableAnonymous(v *bool) *ArticleVoteRecordUpdate {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleVoteRecordUpdate) SetCreatedAt(v time.Time) *ArticleVoteRecordUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdate) SetNillableCreatedAt(v *time.Time) *ArticleVoteRecordUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *ArticleVoteRecordUpdate) ClearCreatedAt() *ArticleVoteRecordUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleVoteRecordUpdate) SetUpdatedAt(v time.Time) *ArticleVoteRecordUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdate) SetNillableUpdatedAt(v *time.Time) *ArticleVoteRecordUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ArticleVoteRecordUpdate) ClearUpdatedAt() *ArticleVoteRecordUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetVote sets the "vote" edge to the ArticleVote entity.
func (_u *ArticleVoteRecordUpdate) SetVote(v *ArticleVote) *ArticleVoteRecordUpdate {
	return _u.SetVoteID(v.ID)
}

// Mutation returns the ArticleVoteRecordMutation object of the builder.
func (_u *ArticleVoteRecordUpdate) Mutation() *ArticleVoteRecordMutation {
	return _u.mutation
}

// ClearVote clears the "vote" edge to the ArticleVote entity.
func (_u *ArticleVoteRecordUpdate) ClearVote() *ArticleVoteRecordUpdate {
	_u.mutation.ClearVote()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ArticleVoteRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleVoteRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ArticleVoteRecordUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleVoteRecordUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleVoteRecordUpdate) check() error {
	if _u.mutation.VoteCleared() && len(_u.mutation.VoteIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleVoteRecord.vote"`)
	}
	return nil
}

func (_u *ArticleVoteRecordUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlevoterecord.Table, articlevoterecord.Columns, sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articlevoterecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articlevoterecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OptionIndex(); ok {
		_spec.SetField(articlevoterecord.FieldOptionIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOptionIndex(); ok {
		_spec.AddField(articlevoterecord.FieldOptionIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(articlevoterecord.FieldAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlevoterecord.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(articlevoterecord.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlevoterecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(articlevoterecord.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevoterecord.VoteTable,
			Columns: []string{articlevoterecord.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevoterecord.VoteTable,
			Columns: []string{articlevoterecord.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlevoterecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ArticleVoteRecordUpdateOne is the builder for updating a single ArticleVoteRecord entity.
type ArticleVoteRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleVoteRecordMutation
}

// SetVoteID sets the "vote_id" field.
func (_u *ArticleVoteRecordUpdateOne) SetVoteID(v int) *ArticleVoteRecordUpdateOne {
	_u.mutation.SetVoteID(v)
	return _u
}

// SetNillableVoteID sets the "vote_id" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdateOne) SetNillableVoteID(v *int) *ArticleVoteRecordUpdateOne {
	if v != nil {
		_u.SetVoteID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ArticleVoteRecordUpdateOne) SetUserID(v int) *ArticleVoteRecordUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdateOne) SetNillableUserID(v *int) *ArticleVoteRecordUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *ArticleVoteRecordUpdateOne) AddUserID(v int) *ArticleVoteRecordUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetOptionIndex sets the "option_index" field.
func (_u *ArticleVoteRecordUpdateOne) SetOptionIndex(v int) *ArticleVoteRecordUpdateOne {
	_u.mutation.ResetOptionIndex()
	_u.mutation.SetOptionIndex(v)
	return _u
}

// SetNillableOptionIndex sets the "option_index" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdateOne) SetNillableOptionIndex(v *int) *ArticleVoteRecordUpdateOne {
	if v != nil {
		_u.SetOptionIndex(*v)
	}
	return _u
}

// AddOptionIndex adds value to the "option_index" field.
func (_u *ArticleVoteRecordUpdateOne) AddOptionIndex(v int) *ArticleVoteRecordUpdateOne {
	_u.mutation.AddOptionIndex(v)
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *ArticleVoteRecordUpdateOne) SetAnonymous(v bool) *ArticleVoteRecordUpdateOne {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdateOne) SetNillableAnonymous(v *bool) *ArticleVoteRecordUpdateOne {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ArticleVoteRecordUpdateOne) SetCreatedAt(v time.Time) *ArticleVoteRecordUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdateOne) SetNillableCreatedAt(v *time.Time) *ArticleVoteRecordUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *ArticleVoteRecordUpdateOne) ClearCreatedAt() *ArticleVoteRecordUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ArticleVoteRecordUpdateOne) SetUpdatedAt(v time.Time) *ArticleVoteRecordUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ArticleVoteRecordUpdateOne) SetNillableUpdatedAt(v *time.Time) *ArticleVoteRecordUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ArticleVoteRecordUpdateOne) ClearUpdatedAt() *ArticleVoteRecordUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetVote sets the "vote" edge to the ArticleVote entity.
func (_u *ArticleVoteRecordUpdateOne) SetVote(v *ArticleVote) *ArticleVoteRecordUpdateOne {
	return _u.SetVoteID(v.ID)
}

// Mutation returns the ArticleVoteRecordMutation object of the builder.
func (_u *ArticleVoteRecordUpdateOne) Mutation() *ArticleVoteRecordMutation {
	return _u.mutation
}

// ClearVote clears the "vote" edge to the ArticleVote entity.
func (_u *ArticleVoteRecordUpdateOne) ClearVote() *ArticleVoteRecordUpdateOne {
	_u.mutation.ClearVote()
	return _u
}

// Where appends a list predicates to the ArticleVoteRecordUpdate builder.
func (_u *ArticleVoteRecordUpdateOne) Where(ps ...predicate.ArticleVoteRecord) *ArticleVoteRecordUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ArticleVoteRecordUpdateOne) Select(field string, fields ...string) *ArticleVoteRecordUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ArticleVoteRecord entity.
func (_u *ArticleVoteRecordUpdateOne) Save(ctx context.Context) (*ArticleVoteRecord, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ArticleVoteRecordUpdateOne) SaveX(ctx context.Context) *ArticleVoteRecord {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ArticleVoteRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ArticleVoteRecordUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ArticleVoteRecordUpdateOne) check() error {
	if _u.mutation.VoteCleared() && len(_u.mutation.VoteIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "ArticleVoteRecord.vote"`)
	}
	return nil
}

func (_u *ArticleVoteRecordUpdateOne) sqlSave(ctx context.Context) (_node *ArticleVoteRecord, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlevoterecord.Table, articlevoterecord.Columns, sqlgraph.NewFieldSpec(articlevoterecord.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ArticleVoteRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlevoterecord.FieldID)
		for _, f := range fields {
			if !articlevoterecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != articlevoterecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(articlevoterecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(articlevoterecord.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OptionIndex(); ok {
		_spec.SetField(articlevoterecord.FieldOptionIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOptionIndex(); ok {
		_spec.AddField(articlevoterecord.FieldOptionIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(articlevoterecord.FieldAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(articlevoterecord.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(articlevoterecord.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(articlevoterecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(articlevoterecord.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevoterecord.VoteTable,
			Columns: []string{articlevoterecord.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlevoterecord.VoteTable,
			Columns: []string{articlevoterecord.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(articlevote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleVoteRecord{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlevoterecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
