// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"content/internal/data/ent/gen/migrate"

	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/articleactionrecord"
	"content/internal/data/ent/gen/articlelottery"
	"content/internal/data/ent/gen/articlelotteryparticipant"
	"content/internal/data/ent/gen/articlelotterywinner"
	"content/internal/data/ent/gen/articlepostscript"
	"content/internal/data/ent/gen/articlevote"
	"content/internal/data/ent/gen/articlevoterecord"
	"content/internal/data/ent/gen/comment"
	"content/internal/data/ent/gen/commentactionrecord"
	"content/internal/data/ent/gen/domain"
	"content/internal/data/ent/gen/tag"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Article is the client for interacting with the Article builders.
	Article *ArticleClient
	// ArticleActionRecord is the client for interacting with the ArticleActionRecord builders.
	ArticleActionRecord *ArticleActionRecordClient
	// ArticleLottery is the client for interacting with the ArticleLottery builders.
	ArticleLottery *ArticleLotteryClient
	// ArticleLotteryParticipant is the client for interacting with the ArticleLotteryParticipant builders.
	ArticleLotteryParticipant *ArticleLotteryParticipantClient
	// ArticleLotteryWinner is the client for interacting with the ArticleLotteryWinner builders.
	ArticleLotteryWinner *ArticleLotteryWinnerClient
	// ArticlePostscript is the client for interacting with the ArticlePostscript builders.
	ArticlePostscript *ArticlePostscriptClient
	// ArticleVote is the client for interacting with the ArticleVote builders.
	ArticleVote *ArticleVoteClient
	// ArticleVoteRecord is the client for interacting with the ArticleVoteRecord builders.
	ArticleVoteRecord *ArticleVoteRecordClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// CommentActionRecord is the client for interacting with the CommentActionRecord builders.
	CommentActionRecord *CommentActionRecordClient
	// Domain is the client for interacting with the Domain builders.
	Domain *DomainClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Article = NewArticleClient(c.config)
	c.ArticleActionRecord = NewArticleActionRecordClient(c.config)
	c.ArticleLottery = NewArticleLotteryClient(c.config)
	c.ArticleLotteryParticipant = NewArticleLotteryParticipantClient(c.config)
	c.ArticleLotteryWinner = NewArticleLotteryWinnerClient(c.config)
	c.ArticlePostscript = NewArticlePostscriptClient(c.config)
	c.ArticleVote = NewArticleVoteClient(c.config)
	c.ArticleVoteRecord = NewArticleVoteRecordClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.CommentActionRecord = NewCommentActionRecordClient(c.config)
	c.Domain = NewDomainClient(c.config)
	c.Tag = NewTagClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("gen: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("gen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Article:                   NewArticleClient(cfg),
		ArticleActionRecord:       NewArticleActionRecordClient(cfg),
		ArticleLottery:            NewArticleLotteryClient(cfg),
		ArticleLotteryParticipant: NewArticleLotteryParticipantClient(cfg),
		ArticleLotteryWinner:      NewArticleLotteryWinnerClient(cfg),
		ArticlePostscript:         NewArticlePostscriptClient(cfg),
		ArticleVote:               NewArticleVoteClient(cfg),
		ArticleVoteRecord:         NewArticleVoteRecordClient(cfg),
		Comment:                   NewCommentClient(cfg),
		CommentActionRecord:       NewCommentActionRecordClient(cfg),
		Domain:                    NewDomainClient(cfg),
		Tag:                       NewTagClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Article:                   NewArticleClient(cfg),
		ArticleActionRecord:       NewArticleActionRecordClient(cfg),
		ArticleLottery:            NewArticleLotteryClient(cfg),
		ArticleLotteryParticipant: NewArticleLotteryParticipantClient(cfg),
		ArticleLotteryWinner:      NewArticleLotteryWinnerClient(cfg),
		ArticlePostscript:         NewArticlePostscriptClient(cfg),
		ArticleVote:               NewArticleVoteClient(cfg),
		ArticleVoteRecord:         NewArticleVoteRecordClient(cfg),
		Comment:                   NewCommentClient(cfg),
		CommentActionRecord:       NewCommentActionRecordClient(cfg),
		Domain:                    NewDomainClient(cfg),
		Tag:                       NewTagClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Article.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Article, c.ArticleActionRecord, c.ArticleLottery, c.ArticleLotteryParticipant,
		c.ArticleLotteryWinner, c.ArticlePostscript, c.ArticleVote,
		c.ArticleVoteRecord, c.Comment, c.CommentActionRecord, c.Domain, c.Tag,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Article, c.ArticleActionRecord, c.ArticleLottery, c.ArticleLotteryParticipant,
		c.ArticleLotteryWinner, c.ArticlePostscript, c.ArticleVote,
		c.ArticleVoteRecord, c.Comment, c.CommentActionRecord, c.Domain, c.Tag,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArticleMutation:
		return c.Article.mutate(ctx, m)
	case *ArticleActionRecordMutation:
		return c.ArticleActionRecord.mutate(ctx, m)
	case *ArticleLotteryMutation:
		return c.ArticleLottery.mutate(ctx, m)
	case *ArticleLotteryParticipantMutation:
		return c.ArticleLotteryParticipant.mutate(ctx, m)
	case *ArticleLotteryWinnerMutation:
		return c.ArticleLotteryWinner.mutate(ctx, m)
	case *ArticlePostscriptMutation:
		return c.ArticlePostscript.mutate(ctx, m)
	case *ArticleVoteMutation:
		return c.ArticleVote.mutate(ctx, m)
	case *ArticleVoteRecordMutation:
		return c.ArticleVoteRecord.mutate(ctx, m)
	case *CommentMutation:
		return c.Comment.mutate(ctx, m)
	case *CommentActionRecordMutation:
		return c.CommentActionRecord.mutate(ctx, m)
	case *DomainMutation:
		return c.Domain.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("gen: unknown mutation type %T", m)
	}
}

// ArticleClient is a client for the Article schema.
type ArticleClient struct {
	config
}

// NewArticleClient returns a client for the Article from the given config.
func NewArticleClient(c config) *ArticleClient {
	return &ArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `article.Hooks(f(g(h())))`.
func (c *ArticleClient) Use(hooks ...Hook) {
	c.hooks.Article = append(c.hooks.Article, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `article.Intercept(f(g(h())))`.
func (c *ArticleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Article = append(c.inters.Article, interceptors...)
}

// Create returns a builder for creating a Article entity.
func (c *ArticleClient) Create() *ArticleCreate {
	mutation := newArticleMutation(c.config, OpCreate)
	return &ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Article entities.
func (c *ArticleClient) CreateBulk(builders ...*ArticleCreate) *ArticleCreateBulk {
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleClient) MapCreateBulk(slice any, setFunc func(*ArticleCreate, int)) *ArticleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleCreateBulk{err: fmt.Errorf("calling to ArticleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Article.
func (c *ArticleClient) Update() *ArticleUpdate {
	mutation := newArticleMutation(c.config, OpUpdate)
	return &ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleClient) UpdateOne(_m *Article) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticle(_m))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleClient) UpdateOneID(id int) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticleID(id))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Article.
func (c *ArticleClient) Delete() *ArticleDelete {
	mutation := newArticleMutation(c.config, OpDelete)
	return &ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleClient) DeleteOne(_m *Article) *ArticleDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleClient) DeleteOneID(id int) *ArticleDeleteOne {
	builder := c.Delete().Where(article.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleDeleteOne{builder}
}

// Query returns a query builder for Article.
func (c *ArticleClient) Query() *ArticleQuery {
	return &ArticleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticle},
		inters: c.Interceptors(),
	}
}

// Get returns a Article entity by its id.
func (c *ArticleClient) Get(ctx context.Context, id int) (*Article, error) {
	return c.Query().Where(article.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleClient) GetX(ctx context.Context, id int) *Article {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPostscripts queries the postscripts edge of a Article.
func (c *ArticleClient) QueryPostscripts(_m *Article) *ArticlePostscriptQuery {
	query := (&ArticlePostscriptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(articlepostscript.Table, articlepostscript.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, article.PostscriptsTable, article.PostscriptsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVotes queries the votes edge of a Article.
func (c *ArticleClient) QueryVotes(_m *Article) *ArticleVoteQuery {
	query := (&ArticleVoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(articlevote.Table, articlevote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, article.VotesTable, article.VotesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLotteries queries the lotteries edge of a Article.
func (c *ArticleClient) QueryLotteries(_m *Article) *ArticleLotteryQuery {
	query := (&ArticleLotteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(articlelottery.Table, articlelottery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, article.LotteriesTable, article.LotteriesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a Article.
func (c *ArticleClient) QueryComments(_m *Article) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, article.CommentsTable, article.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Article.
func (c *ArticleClient) QueryTags(_m *Article) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, article.TagsTable, article.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActionRecords queries the action_records edge of a Article.
func (c *ArticleClient) QueryActionRecords(_m *Article) *ArticleActionRecordQuery {
	query := (&ArticleActionRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(articleactionrecord.Table, articleactionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, article.ActionRecordsTable, article.ActionRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleClient) Hooks() []Hook {
	return c.hooks.Article
}

// Interceptors returns the client interceptors.
func (c *ArticleClient) Interceptors() []Interceptor {
	return c.inters.Article
}

func (c *ArticleClient) mutate(ctx context.Context, m *ArticleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown Article mutation op: %q", m.Op())
	}
}

// ArticleActionRecordClient is a client for the ArticleActionRecord schema.
type ArticleActionRecordClient struct {
	config
}

// NewArticleActionRecordClient returns a client for the ArticleActionRecord from the given config.
func NewArticleActionRecordClient(c config) *ArticleActionRecordClient {
	return &ArticleActionRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articleactionrecord.Hooks(f(g(h())))`.
func (c *ArticleActionRecordClient) Use(hooks ...Hook) {
	c.hooks.ArticleActionRecord = append(c.hooks.ArticleActionRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articleactionrecord.Intercept(f(g(h())))`.
func (c *ArticleActionRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticleActionRecord = append(c.inters.ArticleActionRecord, interceptors...)
}

// Create returns a builder for creating a ArticleActionRecord entity.
func (c *ArticleActionRecordClient) Create() *ArticleActionRecordCreate {
	mutation := newArticleActionRecordMutation(c.config, OpCreate)
	return &ArticleActionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticleActionRecord entities.
func (c *ArticleActionRecordClient) CreateBulk(builders ...*ArticleActionRecordCreate) *ArticleActionRecordCreateBulk {
	return &ArticleActionRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleActionRecordClient) MapCreateBulk(slice any, setFunc func(*ArticleActionRecordCreate, int)) *ArticleActionRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleActionRecordCreateBulk{err: fmt.Errorf("calling to ArticleActionRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleActionRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleActionRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticleActionRecord.
func (c *ArticleActionRecordClient) Update() *ArticleActionRecordUpdate {
	mutation := newArticleActionRecordMutation(c.config, OpUpdate)
	return &ArticleActionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleActionRecordClient) UpdateOne(_m *ArticleActionRecord) *ArticleActionRecordUpdateOne {
	mutation := newArticleActionRecordMutation(c.config, OpUpdateOne, withArticleActionRecord(_m))
	return &ArticleActionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleActionRecordClient) UpdateOneID(id int) *ArticleActionRecordUpdateOne {
	mutation := newArticleActionRecordMutation(c.config, OpUpdateOne, withArticleActionRecordID(id))
	return &ArticleActionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticleActionRecord.
func (c *ArticleActionRecordClient) Delete() *ArticleActionRecordDelete {
	mutation := newArticleActionRecordMutation(c.config, OpDelete)
	return &ArticleActionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleActionRecordClient) DeleteOne(_m *ArticleActionRecord) *ArticleActionRecordDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleActionRecordClient) DeleteOneID(id int) *ArticleActionRecordDeleteOne {
	builder := c.Delete().Where(articleactionrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleActionRecordDeleteOne{builder}
}

// Query returns a query builder for ArticleActionRecord.
func (c *ArticleActionRecordClient) Query() *ArticleActionRecordQuery {
	return &ArticleActionRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticleActionRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticleActionRecord entity by its id.
func (c *ArticleActionRecordClient) Get(ctx context.Context, id int) (*ArticleActionRecord, error) {
	return c.Query().Where(articleactionrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleActionRecordClient) GetX(ctx context.Context, id int) *ArticleActionRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticle queries the article edge of a ArticleActionRecord.
func (c *ArticleActionRecordClient) QueryArticle(_m *ArticleActionRecord) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articleactionrecord.Table, articleactionrecord.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articleactionrecord.ArticleTable, articleactionrecord.ArticleColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleActionRecordClient) Hooks() []Hook {
	return c.hooks.ArticleActionRecord
}

// Interceptors returns the client interceptors.
func (c *ArticleActionRecordClient) Interceptors() []Interceptor {
	return c.inters.ArticleActionRecord
}

func (c *ArticleActionRecordClient) mutate(ctx context.Context, m *ArticleActionRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleActionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleActionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleActionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleActionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticleActionRecord mutation op: %q", m.Op())
	}
}

// ArticleLotteryClient is a client for the ArticleLottery schema.
type ArticleLotteryClient struct {
	config
}

// NewArticleLotteryClient returns a client for the ArticleLottery from the given config.
func NewArticleLotteryClient(c config) *ArticleLotteryClient {
	return &ArticleLotteryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlelottery.Hooks(f(g(h())))`.
func (c *ArticleLotteryClient) Use(hooks ...Hook) {
	c.hooks.ArticleLottery = append(c.hooks.ArticleLottery, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articlelottery.Intercept(f(g(h())))`.
func (c *ArticleLotteryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticleLottery = append(c.inters.ArticleLottery, interceptors...)
}

// Create returns a builder for creating a ArticleLottery entity.
func (c *ArticleLotteryClient) Create() *ArticleLotteryCreate {
	mutation := newArticleLotteryMutation(c.config, OpCreate)
	return &ArticleLotteryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticleLottery entities.
func (c *ArticleLotteryClient) CreateBulk(builders ...*ArticleLotteryCreate) *ArticleLotteryCreateBulk {
	return &ArticleLotteryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleLotteryClient) MapCreateBulk(slice any, setFunc func(*ArticleLotteryCreate, int)) *ArticleLotteryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleLotteryCreateBulk{err: fmt.Errorf("calling to ArticleLotteryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleLotteryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleLotteryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticleLottery.
func (c *ArticleLotteryClient) Update() *ArticleLotteryUpdate {
	mutation := newArticleLotteryMutation(c.config, OpUpdate)
	return &ArticleLotteryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleLotteryClient) UpdateOne(_m *ArticleLottery) *ArticleLotteryUpdateOne {
	mutation := newArticleLotteryMutation(c.config, OpUpdateOne, withArticleLottery(_m))
	return &ArticleLotteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleLotteryClient) UpdateOneID(id int) *ArticleLotteryUpdateOne {
	mutation := newArticleLotteryMutation(c.config, OpUpdateOne, withArticleLotteryID(id))
	return &ArticleLotteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticleLottery.
func (c *ArticleLotteryClient) Delete() *ArticleLotteryDelete {
	mutation := newArticleLotteryMutation(c.config, OpDelete)
	return &ArticleLotteryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleLotteryClient) DeleteOne(_m *ArticleLottery) *ArticleLotteryDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleLotteryClient) DeleteOneID(id int) *ArticleLotteryDeleteOne {
	builder := c.Delete().Where(articlelottery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleLotteryDeleteOne{builder}
}

// Query returns a query builder for ArticleLottery.
func (c *ArticleLotteryClient) Query() *ArticleLotteryQuery {
	return &ArticleLotteryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticleLottery},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticleLottery entity by its id.
func (c *ArticleLotteryClient) Get(ctx context.Context, id int) (*ArticleLottery, error) {
	return c.Query().Where(articlelottery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleLotteryClient) GetX(ctx context.Context, id int) *ArticleLottery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticle queries the article edge of a ArticleLottery.
func (c *ArticleLotteryClient) QueryArticle(_m *ArticleLottery) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlelottery.Table, articlelottery.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articlelottery.ArticleTable, articlelottery.ArticleColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipants queries the participants edge of a ArticleLottery.
func (c *ArticleLotteryClient) QueryParticipants(_m *ArticleLottery) *ArticleLotteryParticipantQuery {
	query := (&ArticleLotteryParticipantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlelottery.Table, articlelottery.FieldID, id),
			sqlgraph.To(articlelotteryparticipant.Table, articlelotteryparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, articlelottery.ParticipantsTable, articlelottery.ParticipantsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWinners queries the winners edge of a ArticleLottery.
func (c *ArticleLotteryClient) QueryWinners(_m *ArticleLottery) *ArticleLotteryWinnerQuery {
	query := (&ArticleLotteryWinnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlelottery.Table, articlelottery.FieldID, id),
			sqlgraph.To(articlelotterywinner.Table, articlelotterywinner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, articlelottery.WinnersTable, articlelottery.WinnersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleLotteryClient) Hooks() []Hook {
	return c.hooks.ArticleLottery
}

// Interceptors returns the client interceptors.
func (c *ArticleLotteryClient) Interceptors() []Interceptor {
	return c.inters.ArticleLottery
}

func (c *ArticleLotteryClient) mutate(ctx context.Context, m *ArticleLotteryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleLotteryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleLotteryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleLotteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleLotteryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticleLottery mutation op: %q", m.Op())
	}
}

// ArticleLotteryParticipantClient is a client for the ArticleLotteryParticipant schema.
type ArticleLotteryParticipantClient struct {
	config
}

// NewArticleLotteryParticipantClient returns a client for the ArticleLotteryParticipant from the given config.
func NewArticleLotteryParticipantClient(c config) *ArticleLotteryParticipantClient {
	return &ArticleLotteryParticipantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlelotteryparticipant.Hooks(f(g(h())))`.
func (c *ArticleLotteryParticipantClient) Use(hooks ...Hook) {
	c.hooks.ArticleLotteryParticipant = append(c.hooks.ArticleLotteryParticipant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articlelotteryparticipant.Intercept(f(g(h())))`.
func (c *ArticleLotteryParticipantClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticleLotteryParticipant = append(c.inters.ArticleLotteryParticipant, interceptors...)
}

// Create returns a builder for creating a ArticleLotteryParticipant entity.
func (c *ArticleLotteryParticipantClient) Create() *ArticleLotteryParticipantCreate {
	mutation := newArticleLotteryParticipantMutation(c.config, OpCreate)
	return &ArticleLotteryParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticleLotteryParticipant entities.
func (c *ArticleLotteryParticipantClient) CreateBulk(builders ...*ArticleLotteryParticipantCreate) *ArticleLotteryParticipantCreateBulk {
	return &ArticleLotteryParticipantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleLotteryParticipantClient) MapCreateBulk(slice any, setFunc func(*ArticleLotteryParticipantCreate, int)) *ArticleLotteryParticipantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleLotteryParticipantCreateBulk{err: fmt.Errorf("calling to ArticleLotteryParticipantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleLotteryParticipantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleLotteryParticipantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticleLotteryParticipant.
func (c *ArticleLotteryParticipantClient) Update() *ArticleLotteryParticipantUpdate {
	mutation := newArticleLotteryParticipantMutation(c.config, OpUpdate)
	return &ArticleLotteryParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleLotteryParticipantClient) UpdateOne(_m *ArticleLotteryParticipant) *ArticleLotteryParticipantUpdateOne {
	mutation := newArticleLotteryParticipantMutation(c.config, OpUpdateOne, withArticleLotteryParticipant(_m))
	return &ArticleLotteryParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleLotteryParticipantClient) UpdateOneID(id int) *ArticleLotteryParticipantUpdateOne {
	mutation := newArticleLotteryParticipantMutation(c.config, OpUpdateOne, withArticleLotteryParticipantID(id))
	return &ArticleLotteryParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticleLotteryParticipant.
func (c *ArticleLotteryParticipantClient) Delete() *ArticleLotteryParticipantDelete {
	mutation := newArticleLotteryParticipantMutation(c.config, OpDelete)
	return &ArticleLotteryParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleLotteryParticipantClient) DeleteOne(_m *ArticleLotteryParticipant) *ArticleLotteryParticipantDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleLotteryParticipantClient) DeleteOneID(id int) *ArticleLotteryParticipantDeleteOne {
	builder := c.Delete().Where(articlelotteryparticipant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleLotteryParticipantDeleteOne{builder}
}

// Query returns a query builder for ArticleLotteryParticipant.
func (c *ArticleLotteryParticipantClient) Query() *ArticleLotteryParticipantQuery {
	return &ArticleLotteryParticipantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticleLotteryParticipant},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticleLotteryParticipant entity by its id.
func (c *ArticleLotteryParticipantClient) Get(ctx context.Context, id int) (*ArticleLotteryParticipant, error) {
	return c.Query().Where(articlelotteryparticipant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleLotteryParticipantClient) GetX(ctx context.Context, id int) *ArticleLotteryParticipant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLottery queries the lottery edge of a ArticleLotteryParticipant.
func (c *ArticleLotteryParticipantClient) QueryLottery(_m *ArticleLotteryParticipant) *ArticleLotteryQuery {
	query := (&ArticleLotteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlelotteryparticipant.Table, articlelotteryparticipant.FieldID, id),
			sqlgraph.To(articlelottery.Table, articlelottery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articlelotteryparticipant.LotteryTable, articlelotteryparticipant.LotteryColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleLotteryParticipantClient) Hooks() []Hook {
	return c.hooks.ArticleLotteryParticipant
}

// Interceptors returns the client interceptors.
func (c *ArticleLotteryParticipantClient) Interceptors() []Interceptor {
	return c.inters.ArticleLotteryParticipant
}

func (c *ArticleLotteryParticipantClient) mutate(ctx context.Context, m *ArticleLotteryParticipantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleLotteryParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleLotteryParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleLotteryParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleLotteryParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticleLotteryParticipant mutation op: %q", m.Op())
	}
}

// ArticleLotteryWinnerClient is a client for the ArticleLotteryWinner schema.
type ArticleLotteryWinnerClient struct {
	config
}

// NewArticleLotteryWinnerClient returns a client for the ArticleLotteryWinner from the given config.
func NewArticleLotteryWinnerClient(c config) *ArticleLotteryWinnerClient {
	return &ArticleLotteryWinnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlelotterywinner.Hooks(f(g(h())))`.
func (c *ArticleLotteryWinnerClient) Use(hooks ...Hook) {
	c.hooks.ArticleLotteryWinner = append(c.hooks.ArticleLotteryWinner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articlelotterywinner.Intercept(f(g(h())))`.
func (c *ArticleLotteryWinnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticleLotteryWinner = append(c.inters.ArticleLotteryWinner, interceptors...)
}

// Create returns a builder for creating a ArticleLotteryWinner entity.
func (c *ArticleLotteryWinnerClient) Create() *ArticleLotteryWinnerCreate {
	mutation := newArticleLotteryWinnerMutation(c.config, OpCreate)
	return &ArticleLotteryWinnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticleLotteryWinner entities.
func (c *ArticleLotteryWinnerClient) CreateBulk(builders ...*ArticleLotteryWinnerCreate) *ArticleLotteryWinnerCreateBulk {
	return &ArticleLotteryWinnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleLotteryWinnerClient) MapCreateBulk(slice any, setFunc func(*ArticleLotteryWinnerCreate, int)) *ArticleLotteryWinnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleLotteryWinnerCreateBulk{err: fmt.Errorf("calling to ArticleLotteryWinnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleLotteryWinnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleLotteryWinnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticleLotteryWinner.
func (c *ArticleLotteryWinnerClient) Update() *ArticleLotteryWinnerUpdate {
	mutation := newArticleLotteryWinnerMutation(c.config, OpUpdate)
	return &ArticleLotteryWinnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleLotteryWinnerClient) UpdateOne(_m *ArticleLotteryWinner) *ArticleLotteryWinnerUpdateOne {
	mutation := newArticleLotteryWinnerMutation(c.config, OpUpdateOne, withArticleLotteryWinner(_m))
	return &ArticleLotteryWinnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleLotteryWinnerClient) UpdateOneID(id int) *ArticleLotteryWinnerUpdateOne {
	mutation := newArticleLotteryWinnerMutation(c.config, OpUpdateOne, withArticleLotteryWinnerID(id))
	return &ArticleLotteryWinnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticleLotteryWinner.
func (c *ArticleLotteryWinnerClient) Delete() *ArticleLotteryWinnerDelete {
	mutation := newArticleLotteryWinnerMutation(c.config, OpDelete)
	return &ArticleLotteryWinnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleLotteryWinnerClient) DeleteOne(_m *ArticleLotteryWinner) *ArticleLotteryWinnerDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleLotteryWinnerClient) DeleteOneID(id int) *ArticleLotteryWinnerDeleteOne {
	builder := c.Delete().Where(articlelotterywinner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleLotteryWinnerDeleteOne{builder}
}

// Query returns a query builder for ArticleLotteryWinner.
func (c *ArticleLotteryWinnerClient) Query() *ArticleLotteryWinnerQuery {
	return &ArticleLotteryWinnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticleLotteryWinner},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticleLotteryWinner entity by its id.
func (c *ArticleLotteryWinnerClient) Get(ctx context.Context, id int) (*ArticleLotteryWinner, error) {
	return c.Query().Where(articlelotterywinner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleLotteryWinnerClient) GetX(ctx context.Context, id int) *ArticleLotteryWinner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLottery queries the lottery edge of a ArticleLotteryWinner.
func (c *ArticleLotteryWinnerClient) QueryLottery(_m *ArticleLotteryWinner) *ArticleLotteryQuery {
	query := (&ArticleLotteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlelotterywinner.Table, articlelotterywinner.FieldID, id),
			sqlgraph.To(articlelottery.Table, articlelottery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articlelotterywinner.LotteryTable, articlelotterywinner.LotteryColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleLotteryWinnerClient) Hooks() []Hook {
	return c.hooks.ArticleLotteryWinner
}

// Interceptors returns the client interceptors.
func (c *ArticleLotteryWinnerClient) Interceptors() []Interceptor {
	return c.inters.ArticleLotteryWinner
}

func (c *ArticleLotteryWinnerClient) mutate(ctx context.Context, m *ArticleLotteryWinnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleLotteryWinnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleLotteryWinnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleLotteryWinnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleLotteryWinnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticleLotteryWinner mutation op: %q", m.Op())
	}
}

// ArticlePostscriptClient is a client for the ArticlePostscript schema.
type ArticlePostscriptClient struct {
	config
}

// NewArticlePostscriptClient returns a client for the ArticlePostscript from the given config.
func NewArticlePostscriptClient(c config) *ArticlePostscriptClient {
	return &ArticlePostscriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlepostscript.Hooks(f(g(h())))`.
func (c *ArticlePostscriptClient) Use(hooks ...Hook) {
	c.hooks.ArticlePostscript = append(c.hooks.ArticlePostscript, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articlepostscript.Intercept(f(g(h())))`.
func (c *ArticlePostscriptClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticlePostscript = append(c.inters.ArticlePostscript, interceptors...)
}

// Create returns a builder for creating a ArticlePostscript entity.
func (c *ArticlePostscriptClient) Create() *ArticlePostscriptCreate {
	mutation := newArticlePostscriptMutation(c.config, OpCreate)
	return &ArticlePostscriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticlePostscript entities.
func (c *ArticlePostscriptClient) CreateBulk(builders ...*ArticlePostscriptCreate) *ArticlePostscriptCreateBulk {
	return &ArticlePostscriptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticlePostscriptClient) MapCreateBulk(slice any, setFunc func(*ArticlePostscriptCreate, int)) *ArticlePostscriptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticlePostscriptCreateBulk{err: fmt.Errorf("calling to ArticlePostscriptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticlePostscriptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticlePostscriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticlePostscript.
func (c *ArticlePostscriptClient) Update() *ArticlePostscriptUpdate {
	mutation := newArticlePostscriptMutation(c.config, OpUpdate)
	return &ArticlePostscriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticlePostscriptClient) UpdateOne(_m *ArticlePostscript) *ArticlePostscriptUpdateOne {
	mutation := newArticlePostscriptMutation(c.config, OpUpdateOne, withArticlePostscript(_m))
	return &ArticlePostscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticlePostscriptClient) UpdateOneID(id int) *ArticlePostscriptUpdateOne {
	mutation := newArticlePostscriptMutation(c.config, OpUpdateOne, withArticlePostscriptID(id))
	return &ArticlePostscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticlePostscript.
func (c *ArticlePostscriptClient) Delete() *ArticlePostscriptDelete {
	mutation := newArticlePostscriptMutation(c.config, OpDelete)
	return &ArticlePostscriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticlePostscriptClient) DeleteOne(_m *ArticlePostscript) *ArticlePostscriptDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticlePostscriptClient) DeleteOneID(id int) *ArticlePostscriptDeleteOne {
	builder := c.Delete().Where(articlepostscript.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticlePostscriptDeleteOne{builder}
}

// Query returns a query builder for ArticlePostscript.
func (c *ArticlePostscriptClient) Query() *ArticlePostscriptQuery {
	return &ArticlePostscriptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticlePostscript},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticlePostscript entity by its id.
func (c *ArticlePostscriptClient) Get(ctx context.Context, id int) (*ArticlePostscript, error) {
	return c.Query().Where(articlepostscript.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticlePostscriptClient) GetX(ctx context.Context, id int) *ArticlePostscript {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticle queries the article edge of a ArticlePostscript.
func (c *ArticlePostscriptClient) QueryArticle(_m *ArticlePostscript) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlepostscript.Table, articlepostscript.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articlepostscript.ArticleTable, articlepostscript.ArticleColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticlePostscriptClient) Hooks() []Hook {
	return c.hooks.ArticlePostscript
}

// Interceptors returns the client interceptors.
func (c *ArticlePostscriptClient) Interceptors() []Interceptor {
	return c.inters.ArticlePostscript
}

func (c *ArticlePostscriptClient) mutate(ctx context.Context, m *ArticlePostscriptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticlePostscriptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticlePostscriptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticlePostscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticlePostscriptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticlePostscript mutation op: %q", m.Op())
	}
}

// ArticleVoteClient is a client for the ArticleVote schema.
type ArticleVoteClient struct {
	config
}

// NewArticleVoteClient returns a client for the ArticleVote from the given config.
func NewArticleVoteClient(c config) *ArticleVoteClient {
	return &ArticleVoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlevote.Hooks(f(g(h())))`.
func (c *ArticleVoteClient) Use(hooks ...Hook) {
	c.hooks.ArticleVote = append(c.hooks.ArticleVote, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articlevote.Intercept(f(g(h())))`.
func (c *ArticleVoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticleVote = append(c.inters.ArticleVote, interceptors...)
}

// Create returns a builder for creating a ArticleVote entity.
func (c *ArticleVoteClient) Create() *ArticleVoteCreate {
	mutation := newArticleVoteMutation(c.config, OpCreate)
	return &ArticleVoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticleVote entities.
func (c *ArticleVoteClient) CreateBulk(builders ...*ArticleVoteCreate) *ArticleVoteCreateBulk {
	return &ArticleVoteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleVoteClient) MapCreateBulk(slice any, setFunc func(*ArticleVoteCreate, int)) *ArticleVoteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleVoteCreateBulk{err: fmt.Errorf("calling to ArticleVoteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleVoteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleVoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticleVote.
func (c *ArticleVoteClient) Update() *ArticleVoteUpdate {
	mutation := newArticleVoteMutation(c.config, OpUpdate)
	return &ArticleVoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleVoteClient) UpdateOne(_m *ArticleVote) *ArticleVoteUpdateOne {
	mutation := newArticleVoteMutation(c.config, OpUpdateOne, withArticleVote(_m))
	return &ArticleVoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleVoteClient) UpdateOneID(id int) *ArticleVoteUpdateOne {
	mutation := newArticleVoteMutation(c.config, OpUpdateOne, withArticleVoteID(id))
	return &ArticleVoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticleVote.
func (c *ArticleVoteClient) Delete() *ArticleVoteDelete {
	mutation := newArticleVoteMutation(c.config, OpDelete)
	return &ArticleVoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleVoteClient) DeleteOne(_m *ArticleVote) *ArticleVoteDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleVoteClient) DeleteOneID(id int) *ArticleVoteDeleteOne {
	builder := c.Delete().Where(articlevote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleVoteDeleteOne{builder}
}

// Query returns a query builder for ArticleVote.
func (c *ArticleVoteClient) Query() *ArticleVoteQuery {
	return &ArticleVoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticleVote},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticleVote entity by its id.
func (c *ArticleVoteClient) Get(ctx context.Context, id int) (*ArticleVote, error) {
	return c.Query().Where(articlevote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleVoteClient) GetX(ctx context.Context, id int) *ArticleVote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticle queries the article edge of a ArticleVote.
func (c *ArticleVoteClient) QueryArticle(_m *ArticleVote) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlevote.Table, articlevote.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articlevote.ArticleTable, articlevote.ArticleColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecords queries the records edge of a ArticleVote.
func (c *ArticleVoteClient) QueryRecords(_m *ArticleVote) *ArticleVoteRecordQuery {
	query := (&ArticleVoteRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlevote.Table, articlevote.FieldID, id),
			sqlgraph.To(articlevoterecord.Table, articlevoterecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, articlevote.RecordsTable, articlevote.RecordsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleVoteClient) Hooks() []Hook {
	return c.hooks.ArticleVote
}

// Interceptors returns the client interceptors.
func (c *ArticleVoteClient) Interceptors() []Interceptor {
	return c.inters.ArticleVote
}

func (c *ArticleVoteClient) mutate(ctx context.Context, m *ArticleVoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleVoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleVoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleVoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleVoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticleVote mutation op: %q", m.Op())
	}
}

// ArticleVoteRecordClient is a client for the ArticleVoteRecord schema.
type ArticleVoteRecordClient struct {
	config
}

// NewArticleVoteRecordClient returns a client for the ArticleVoteRecord from the given config.
func NewArticleVoteRecordClient(c config) *ArticleVoteRecordClient {
	return &ArticleVoteRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlevoterecord.Hooks(f(g(h())))`.
func (c *ArticleVoteRecordClient) Use(hooks ...Hook) {
	c.hooks.ArticleVoteRecord = append(c.hooks.ArticleVoteRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `articlevoterecord.Intercept(f(g(h())))`.
func (c *ArticleVoteRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArticleVoteRecord = append(c.inters.ArticleVoteRecord, interceptors...)
}

// Create returns a builder for creating a ArticleVoteRecord entity.
func (c *ArticleVoteRecordClient) Create() *ArticleVoteRecordCreate {
	mutation := newArticleVoteRecordMutation(c.config, OpCreate)
	return &ArticleVoteRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticleVoteRecord entities.
func (c *ArticleVoteRecordClient) CreateBulk(builders ...*ArticleVoteRecordCreate) *ArticleVoteRecordCreateBulk {
	return &ArticleVoteRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleVoteRecordClient) MapCreateBulk(slice any, setFunc func(*ArticleVoteRecordCreate, int)) *ArticleVoteRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleVoteRecordCreateBulk{err: fmt.Errorf("calling to ArticleVoteRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleVoteRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleVoteRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticleVoteRecord.
func (c *ArticleVoteRecordClient) Update() *ArticleVoteRecordUpdate {
	mutation := newArticleVoteRecordMutation(c.config, OpUpdate)
	return &ArticleVoteRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleVoteRecordClient) UpdateOne(_m *ArticleVoteRecord) *ArticleVoteRecordUpdateOne {
	mutation := newArticleVoteRecordMutation(c.config, OpUpdateOne, withArticleVoteRecord(_m))
	return &ArticleVoteRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleVoteRecordClient) UpdateOneID(id int) *ArticleVoteRecordUpdateOne {
	mutation := newArticleVoteRecordMutation(c.config, OpUpdateOne, withArticleVoteRecordID(id))
	return &ArticleVoteRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticleVoteRecord.
func (c *ArticleVoteRecordClient) Delete() *ArticleVoteRecordDelete {
	mutation := newArticleVoteRecordMutation(c.config, OpDelete)
	return &ArticleVoteRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleVoteRecordClient) DeleteOne(_m *ArticleVoteRecord) *ArticleVoteRecordDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleVoteRecordClient) DeleteOneID(id int) *ArticleVoteRecordDeleteOne {
	builder := c.Delete().Where(articlevoterecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleVoteRecordDeleteOne{builder}
}

// Query returns a query builder for ArticleVoteRecord.
func (c *ArticleVoteRecordClient) Query() *ArticleVoteRecordQuery {
	return &ArticleVoteRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticleVoteRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a ArticleVoteRecord entity by its id.
func (c *ArticleVoteRecordClient) Get(ctx context.Context, id int) (*ArticleVoteRecord, error) {
	return c.Query().Where(articlevoterecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleVoteRecordClient) GetX(ctx context.Context, id int) *ArticleVoteRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVote queries the vote edge of a ArticleVoteRecord.
func (c *ArticleVoteRecordClient) QueryVote(_m *ArticleVoteRecord) *ArticleVoteQuery {
	query := (&ArticleVoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(articlevoterecord.Table, articlevoterecord.FieldID, id),
			sqlgraph.To(articlevote.Table, articlevote.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, articlevoterecord.VoteTable, articlevoterecord.VoteColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleVoteRecordClient) Hooks() []Hook {
	return c.hooks.ArticleVoteRecord
}

// Interceptors returns the client interceptors.
func (c *ArticleVoteRecordClient) Interceptors() []Interceptor {
	return c.inters.ArticleVoteRecord
}

func (c *ArticleVoteRecordClient) mutate(ctx context.Context, m *ArticleVoteRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleVoteRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleVoteRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleVoteRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleVoteRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown ArticleVoteRecord mutation op: %q", m.Op())
	}
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `comment.Intercept(f(g(h())))`.
func (c *CommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Comment = append(c.inters.Comment, interceptors...)
}

// Create returns a builder for creating a Comment entity.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommentClient) MapCreateBulk(slice any, setFunc func(*CommentCreate, int)) *CommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommentCreateBulk{err: fmt.Errorf("calling to CommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(_m *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(_m))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id int) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentClient) DeleteOne(_m *Comment) *CommentDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentClient) DeleteOneID(id int) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComment},
		inters: c.Interceptors(),
	}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id int) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id int) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticle queries the article edge of a Comment.
func (c *CommentClient) QueryArticle(_m *Comment) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.ArticleTable, comment.ArticleColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Comment.
func (c *CommentClient) QueryParent(_m *Comment) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.ParentTable, comment.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a Comment.
func (c *CommentClient) QueryReplies(_m *Comment) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comment.RepliesTable, comment.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActionRecords queries the action_records edge of a Comment.
func (c *CommentClient) QueryActionRecords(_m *Comment) *CommentActionRecordQuery {
	query := (&CommentActionRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(commentactionrecord.Table, commentactionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comment.ActionRecordsTable, comment.ActionRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	return c.hooks.Comment
}

// Interceptors returns the client interceptors.
func (c *CommentClient) Interceptors() []Interceptor {
	return c.inters.Comment
}

func (c *CommentClient) mutate(ctx context.Context, m *CommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown Comment mutation op: %q", m.Op())
	}
}

// CommentActionRecordClient is a client for the CommentActionRecord schema.
type CommentActionRecordClient struct {
	config
}

// NewCommentActionRecordClient returns a client for the CommentActionRecord from the given config.
func NewCommentActionRecordClient(c config) *CommentActionRecordClient {
	return &CommentActionRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commentactionrecord.Hooks(f(g(h())))`.
func (c *CommentActionRecordClient) Use(hooks ...Hook) {
	c.hooks.CommentActionRecord = append(c.hooks.CommentActionRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commentactionrecord.Intercept(f(g(h())))`.
func (c *CommentActionRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommentActionRecord = append(c.inters.CommentActionRecord, interceptors...)
}

// Create returns a builder for creating a CommentActionRecord entity.
func (c *CommentActionRecordClient) Create() *CommentActionRecordCreate {
	mutation := newCommentActionRecordMutation(c.config, OpCreate)
	return &CommentActionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentActionRecord entities.
func (c *CommentActionRecordClient) CreateBulk(builders ...*CommentActionRecordCreate) *CommentActionRecordCreateBulk {
	return &CommentActionRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommentActionRecordClient) MapCreateBulk(slice any, setFunc func(*CommentActionRecordCreate, int)) *CommentActionRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommentActionRecordCreateBulk{err: fmt.Errorf("calling to CommentActionRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommentActionRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommentActionRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentActionRecord.
func (c *CommentActionRecordClient) Update() *CommentActionRecordUpdate {
	mutation := newCommentActionRecordMutation(c.config, OpUpdate)
	return &CommentActionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentActionRecordClient) UpdateOne(_m *CommentActionRecord) *CommentActionRecordUpdateOne {
	mutation := newCommentActionRecordMutation(c.config, OpUpdateOne, withCommentActionRecord(_m))
	return &CommentActionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentActionRecordClient) UpdateOneID(id int) *CommentActionRecordUpdateOne {
	mutation := newCommentActionRecordMutation(c.config, OpUpdateOne, withCommentActionRecordID(id))
	return &CommentActionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentActionRecord.
func (c *CommentActionRecordClient) Delete() *CommentActionRecordDelete {
	mutation := newCommentActionRecordMutation(c.config, OpDelete)
	return &CommentActionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentActionRecordClient) DeleteOne(_m *CommentActionRecord) *CommentActionRecordDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentActionRecordClient) DeleteOneID(id int) *CommentActionRecordDeleteOne {
	builder := c.Delete().Where(commentactionrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentActionRecordDeleteOne{builder}
}

// Query returns a query builder for CommentActionRecord.
func (c *CommentActionRecordClient) Query() *CommentActionRecordQuery {
	return &CommentActionRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommentActionRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a CommentActionRecord entity by its id.
func (c *CommentActionRecordClient) Get(ctx context.Context, id int) (*CommentActionRecord, error) {
	return c.Query().Where(commentactionrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentActionRecordClient) GetX(ctx context.Context, id int) *CommentActionRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComment queries the comment edge of a CommentActionRecord.
func (c *CommentActionRecordClient) QueryComment(_m *CommentActionRecord) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commentactionrecord.Table, commentactionrecord.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commentactionrecord.CommentTable, commentactionrecord.CommentColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentActionRecordClient) Hooks() []Hook {
	return c.hooks.CommentActionRecord
}

// Interceptors returns the client interceptors.
func (c *CommentActionRecordClient) Interceptors() []Interceptor {
	return c.inters.CommentActionRecord
}

func (c *CommentActionRecordClient) mutate(ctx context.Context, m *CommentActionRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentActionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentActionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentActionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentActionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown CommentActionRecord mutation op: %q", m.Op())
	}
}

// DomainClient is a client for the Domain schema.
type DomainClient struct {
	config
}

// NewDomainClient returns a client for the Domain from the given config.
func NewDomainClient(c config) *DomainClient {
	return &DomainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `domain.Hooks(f(g(h())))`.
func (c *DomainClient) Use(hooks ...Hook) {
	c.hooks.Domain = append(c.hooks.Domain, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `domain.Intercept(f(g(h())))`.
func (c *DomainClient) Intercept(interceptors ...Interceptor) {
	c.inters.Domain = append(c.inters.Domain, interceptors...)
}

// Create returns a builder for creating a Domain entity.
func (c *DomainClient) Create() *DomainCreate {
	mutation := newDomainMutation(c.config, OpCreate)
	return &DomainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Domain entities.
func (c *DomainClient) CreateBulk(builders ...*DomainCreate) *DomainCreateBulk {
	return &DomainCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DomainClient) MapCreateBulk(slice any, setFunc func(*DomainCreate, int)) *DomainCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DomainCreateBulk{err: fmt.Errorf("calling to DomainClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DomainCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DomainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Domain.
func (c *DomainClient) Update() *DomainUpdate {
	mutation := newDomainMutation(c.config, OpUpdate)
	return &DomainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DomainClient) UpdateOne(_m *Domain) *DomainUpdateOne {
	mutation := newDomainMutation(c.config, OpUpdateOne, withDomain(_m))
	return &DomainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DomainClient) UpdateOneID(id int) *DomainUpdateOne {
	mutation := newDomainMutation(c.config, OpUpdateOne, withDomainID(id))
	return &DomainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Domain.
func (c *DomainClient) Delete() *DomainDelete {
	mutation := newDomainMutation(c.config, OpDelete)
	return &DomainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DomainClient) DeleteOne(_m *Domain) *DomainDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DomainClient) DeleteOneID(id int) *DomainDeleteOne {
	builder := c.Delete().Where(domain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DomainDeleteOne{builder}
}

// Query returns a query builder for Domain.
func (c *DomainClient) Query() *DomainQuery {
	return &DomainQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDomain},
		inters: c.Interceptors(),
	}
}

// Get returns a Domain entity by its id.
func (c *DomainClient) Get(ctx context.Context, id int) (*Domain, error) {
	return c.Query().Where(domain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DomainClient) GetX(ctx context.Context, id int) *Domain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a Domain.
func (c *DomainClient) QueryTags(_m *Domain) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(domain.Table, domain.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, domain.TagsTable, domain.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DomainClient) Hooks() []Hook {
	return c.hooks.Domain
}

// Interceptors returns the client interceptors.
func (c *DomainClient) Interceptors() []Interceptor {
	return c.inters.Domain
}

func (c *DomainClient) mutate(ctx context.Context, m *DomainMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DomainCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DomainUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DomainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DomainDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown Domain mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(_m *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(_m))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(_m *Tag) *TagDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticle queries the article edge of a Tag.
func (c *TagClient) QueryArticle(_m *Tag) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.ArticleTable, tag.ArticlePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDomain queries the domain edge of a Tag.
func (c *TagClient) QueryDomain(_m *Tag) *DomainQuery {
	query := (&DomainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(domain.Table, domain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tag.DomainTable, tag.DomainColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown Tag mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Article, ArticleActionRecord, ArticleLottery, ArticleLotteryParticipant,
		ArticleLotteryWinner, ArticlePostscript, ArticleVote, ArticleVoteRecord,
		Comment, CommentActionRecord, Domain, Tag []ent.Hook
	}
	inters struct {
		Article, ArticleActionRecord, ArticleLottery, ArticleLotteryParticipant,
		ArticleLotteryWinner, ArticlePostscript, ArticleVote, ArticleVoteRecord,
		Comment, CommentActionRecord, Domain, Tag []ent.Interceptor
	}
)
