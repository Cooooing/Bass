// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/comment"
	"content/internal/data/ent/gen/commentactionrecord"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
}

// SetArticleID sets the "article_id" field.
func (_c *CommentCreate) SetArticleID(v int64) *CommentCreate {
	_c.mutation.SetArticleID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *CommentCreate) SetUserID(v int64) *CommentCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *CommentCreate) SetContent(v string) *CommentCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetLevel sets the "level" field.
func (_c *CommentCreate) SetLevel(v int32) *CommentCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *CommentCreate) SetParentID(v int64) *CommentCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *CommentCreate) SetNillableParentID(v *int64) *CommentCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetReplyID sets the "reply_id" field.
func (_c *CommentCreate) SetReplyID(v int64) *CommentCreate {
	_c.mutation.SetReplyID(v)
	return _c
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (_c *CommentCreate) SetNillableReplyID(v *int64) *CommentCreate {
	if v != nil {
		_c.SetReplyID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *CommentCreate) SetStatus(v int32) *CommentCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *CommentCreate) SetNillableStatus(v *int32) *CommentCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetReplyCount sets the "reply_count" field.
func (_c *CommentCreate) SetReplyCount(v int32) *CommentCreate {
	_c.mutation.SetReplyCount(v)
	return _c
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (_c *CommentCreate) SetNillableReplyCount(v *int32) *CommentCreate {
	if v != nil {
		_c.SetReplyCount(*v)
	}
	return _c
}

// SetLikeCount sets the "like_count" field.
func (_c *CommentCreate) SetLikeCount(v int32) *CommentCreate {
	_c.mutation.SetLikeCount(v)
	return _c
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_c *CommentCreate) SetNillableLikeCount(v *int32) *CommentCreate {
	if v != nil {
		_c.SetLikeCount(*v)
	}
	return _c
}

// SetCollectCount sets the "collect_count" field.
func (_c *CommentCreate) SetCollectCount(v int32) *CommentCreate {
	_c.mutation.SetCollectCount(v)
	return _c
}

// SetNillableCollectCount sets the "collect_count" field if the given value is not nil.
func (_c *CommentCreate) SetNillableCollectCount(v *int32) *CommentCreate {
	if v != nil {
		_c.SetCollectCount(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *CommentCreate) SetCreatedAt(v time.Time) *CommentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableCreatedAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CommentCreate) SetUpdatedAt(v time.Time) *CommentCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CommentCreate) SetNillableUpdatedAt(v *time.Time) *CommentCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CommentCreate) SetID(v int64) *CommentCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetArticle sets the "article" edge to the Article entity.
func (_c *CommentCreate) SetArticle(v *Article) *CommentCreate {
	return _c.SetArticleID(v.ID)
}

// SetParent sets the "parent" edge to the Comment entity.
func (_c *CommentCreate) SetParent(v *Comment) *CommentCreate {
	return _c.SetParentID(v.ID)
}

// AddParentReplyIDs adds the "parent_replies" edge to the Comment entity by IDs.
func (_c *CommentCreate) AddParentReplyIDs(ids ...int64) *CommentCreate {
	_c.mutation.AddParentReplyIDs(ids...)
	return _c
}

// AddParentReplies adds the "parent_replies" edges to the Comment entity.
func (_c *CommentCreate) AddParentReplies(v ...*Comment) *CommentCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddParentReplyIDs(ids...)
}

// SetReply sets the "reply" edge to the Comment entity.
func (_c *CommentCreate) SetReply(v *Comment) *CommentCreate {
	return _c.SetReplyID(v.ID)
}

// AddReplyReplyIDs adds the "reply_replies" edge to the Comment entity by IDs.
func (_c *CommentCreate) AddReplyReplyIDs(ids ...int64) *CommentCreate {
	_c.mutation.AddReplyReplyIDs(ids...)
	return _c
}

// AddReplyReplies adds the "reply_replies" edges to the Comment entity.
func (_c *CommentCreate) AddReplyReplies(v ...*Comment) *CommentCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReplyReplyIDs(ids...)
}

// AddActionRecordIDs adds the "action_records" edge to the CommentActionRecord entity by IDs.
func (_c *CommentCreate) AddActionRecordIDs(ids ...int64) *CommentCreate {
	_c.mutation.AddActionRecordIDs(ids...)
	return _c
}

// AddActionRecords adds the "action_records" edges to the CommentActionRecord entity.
func (_c *CommentCreate) AddActionRecords(v ...*CommentActionRecord) *CommentCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionRecordIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (_c *CommentCreate) Mutation() *CommentMutation {
	return _c.mutation
}

// Save creates the Comment in the database.
func (_c *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CommentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CommentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CommentCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := comment.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ReplyCount(); !ok {
		v := comment.DefaultReplyCount
		_c.mutation.SetReplyCount(v)
	}
	if _, ok := _c.mutation.LikeCount(); !ok {
		v := comment.DefaultLikeCount
		_c.mutation.SetLikeCount(v)
	}
	if _, ok := _c.mutation.CollectCount(); !ok {
		v := comment.DefaultCollectCount
		_c.mutation.SetCollectCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := comment.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := comment.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CommentCreate) check() error {
	if _, ok := _c.mutation.ArticleID(); !ok {
		return &ValidationError{Name: "article_id", err: errors.New(`gen: missing required field "Comment.article_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`gen: missing required field "Comment.user_id"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`gen: missing required field "Comment.content"`)}
	}
	if v, ok := _c.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`gen: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`gen: missing required field "Comment.level"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Comment.status"`)}
	}
	if _, ok := _c.mutation.ReplyCount(); !ok {
		return &ValidationError{Name: "reply_count", err: errors.New(`gen: missing required field "Comment.reply_count"`)}
	}
	if _, ok := _c.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`gen: missing required field "Comment.like_count"`)}
	}
	if _, ok := _c.mutation.CollectCount(); !ok {
		return &ValidationError{Name: "collect_count", err: errors.New(`gen: missing required field "Comment.collect_count"`)}
	}
	if len(_c.mutation.ArticleIDs()) == 0 {
		return &ValidationError{Name: "article", err: errors.New(`gen: missing required edge "Comment.article"`)}
	}
	return nil
}

func (_c *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(comment.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ReplyCount(); ok {
		_spec.SetField(comment.FieldReplyCount, field.TypeInt32, value)
		_node.ReplyCount = value
	}
	if value, ok := _c.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt32, value)
		_node.LikeCount = value
	}
	if value, ok := _c.mutation.CollectCount(); ok {
		_spec.SetField(comment.FieldCollectCount, field.TypeInt32, value)
		_node.CollectCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArticleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentRepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentRepliesTable,
			Columns: []string{comment.ParentRepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReplyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ReplyTable,
			Columns: []string{comment.ReplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReplyID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReplyRepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplyRepliesTable,
			Columns: []string{comment.ReplyRepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ActionRecordsTable,
			Columns: []string{comment.ActionRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentactionrecord.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
}

// Save creates the Comment entities in the database.
func (_c *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Comment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
