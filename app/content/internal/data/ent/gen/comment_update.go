// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/article"
	"content/internal/data/ent/gen/comment"
	"content/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (_u *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetArticleID sets the "article_id" field.
func (_u *CommentUpdate) SetArticleID(v int) *CommentUpdate {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableArticleID(v *int) *CommentUpdate {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CommentUpdate) SetUserID(v int) *CommentUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableUserID(v *int) *CommentUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *CommentUpdate) AddUserID(v int) *CommentUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *CommentUpdate) SetContent(v string) *CommentUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableContent(v *string) *CommentUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *CommentUpdate) SetLevel(v int) *CommentUpdate {
	_u.mutation.ResetLevel()
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableLevel(v *int) *CommentUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// AddLevel adds value to the "level" field.
func (_u *CommentUpdate) AddLevel(v int) *CommentUpdate {
	_u.mutation.AddLevel(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *CommentUpdate) SetParentID(v int) *CommentUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableParentID(v *int) *CommentUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *CommentUpdate) ClearParentID() *CommentUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *CommentUpdate) SetStatus(v int) *CommentUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableStatus(v *int) *CommentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CommentUpdate) AddStatus(v int) *CommentUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetReplyCount sets the "reply_count" field.
func (_u *CommentUpdate) SetReplyCount(v int) *CommentUpdate {
	_u.mutation.ResetReplyCount()
	_u.mutation.SetReplyCount(v)
	return _u
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableReplyCount(v *int) *CommentUpdate {
	if v != nil {
		_u.SetReplyCount(*v)
	}
	return _u
}

// AddReplyCount adds value to the "reply_count" field.
func (_u *CommentUpdate) AddReplyCount(v int) *CommentUpdate {
	_u.mutation.AddReplyCount(v)
	return _u
}

// SetLikeCount sets the "like_count" field.
func (_u *CommentUpdate) SetLikeCount(v int) *CommentUpdate {
	_u.mutation.ResetLikeCount()
	_u.mutation.SetLikeCount(v)
	return _u
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableLikeCount(v *int) *CommentUpdate {
	if v != nil {
		_u.SetLikeCount(*v)
	}
	return _u
}

// AddLikeCount adds value to the "like_count" field.
func (_u *CommentUpdate) AddLikeCount(v int) *CommentUpdate {
	_u.mutation.AddLikeCount(v)
	return _u
}

// SetDislikeCount sets the "dislike_count" field.
func (_u *CommentUpdate) SetDislikeCount(v int) *CommentUpdate {
	_u.mutation.ResetDislikeCount()
	_u.mutation.SetDislikeCount(v)
	return _u
}

// SetNillableDislikeCount sets the "dislike_count" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableDislikeCount(v *int) *CommentUpdate {
	if v != nil {
		_u.SetDislikeCount(*v)
	}
	return _u
}

// AddDislikeCount adds value to the "dislike_count" field.
func (_u *CommentUpdate) AddDislikeCount(v int) *CommentUpdate {
	_u.mutation.AddDislikeCount(v)
	return _u
}

// SetCollectCount sets the "collect_count" field.
func (_u *CommentUpdate) SetCollectCount(v int) *CommentUpdate {
	_u.mutation.ResetCollectCount()
	_u.mutation.SetCollectCount(v)
	return _u
}

// SetNillableCollectCount sets the "collect_count" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableCollectCount(v *int) *CommentUpdate {
	if v != nil {
		_u.SetCollectCount(*v)
	}
	return _u
}

// AddCollectCount adds value to the "collect_count" field.
func (_u *CommentUpdate) AddCollectCount(v int) *CommentUpdate {
	_u.mutation.AddCollectCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CommentUpdate) SetCreatedAt(v time.Time) *CommentUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableCreatedAt(v *time.Time) *CommentUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *CommentUpdate) ClearCreatedAt() *CommentUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CommentUpdate) SetUpdatedAt(v time.Time) *CommentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableUpdatedAt(v *time.Time) *CommentUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *CommentUpdate) ClearUpdatedAt() *CommentUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *CommentUpdate) SetArticle(v *Article) *CommentUpdate {
	return _u.SetArticleID(v.ID)
}

// SetParent sets the "parent" edge to the Comment entity.
func (_u *CommentUpdate) SetParent(v *Comment) *CommentUpdate {
	return _u.SetParentID(v.ID)
}

// AddReplyIDs adds the "replies" edge to the Comment entity by IDs.
func (_u *CommentUpdate) AddReplyIDs(ids ...int) *CommentUpdate {
	_u.mutation.AddReplyIDs(ids...)
	return _u
}

// AddReplies adds the "replies" edges to the Comment entity.
func (_u *CommentUpdate) AddReplies(v ...*Comment) *CommentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReplyIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (_u *CommentUpdate) Mutation() *CommentMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *CommentUpdate) ClearArticle() *CommentUpdate {
	_u.mutation.ClearArticle()
	return _u
}

// ClearParent clears the "parent" edge to the Comment entity.
func (_u *CommentUpdate) ClearParent() *CommentUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearReplies clears all "replies" edges to the Comment entity.
func (_u *CommentUpdate) ClearReplies() *CommentUpdate {
	_u.mutation.ClearReplies()
	return _u
}

// RemoveReplyIDs removes the "replies" edge to Comment entities by IDs.
func (_u *CommentUpdate) RemoveReplyIDs(ids ...int) *CommentUpdate {
	_u.mutation.RemoveReplyIDs(ids...)
	return _u
}

// RemoveReplies removes "replies" edges to Comment entities.
func (_u *CommentUpdate) RemoveReplies(v ...*Comment) *CommentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReplyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CommentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CommentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CommentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CommentUpdate) check() error {
	if v, ok := _u.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`gen: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "Comment.article"`)
	}
	return nil
}

func (_u *CommentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(comment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLevel(); ok {
		_spec.AddField(comment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ReplyCount(); ok {
		_spec.SetField(comment.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedReplyCount(); ok {
		_spec.AddField(comment.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLikeCount(); ok {
		_spec.AddField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DislikeCount(); ok {
		_spec.SetField(comment.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDislikeCount(); ok {
		_spec.AddField(comment.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CollectCount(); ok {
		_spec.SetField(comment.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCollectCount(); ok {
		_spec.AddField(comment.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(comment.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(comment.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !_u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetArticleID sets the "article_id" field.
func (_u *CommentUpdateOne) SetArticleID(v int) *CommentUpdateOne {
	_u.mutation.SetArticleID(v)
	return _u
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableArticleID(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetArticleID(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CommentUpdateOne) SetUserID(v int) *CommentUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableUserID(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *CommentUpdateOne) AddUserID(v int) *CommentUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *CommentUpdateOne) SetContent(v string) *CommentUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableContent(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *CommentUpdateOne) SetLevel(v int) *CommentUpdateOne {
	_u.mutation.ResetLevel()
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableLevel(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// AddLevel adds value to the "level" field.
func (_u *CommentUpdateOne) AddLevel(v int) *CommentUpdateOne {
	_u.mutation.AddLevel(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *CommentUpdateOne) SetParentID(v int) *CommentUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableParentID(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *CommentUpdateOne) ClearParentID() *CommentUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *CommentUpdateOne) SetStatus(v int) *CommentUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableStatus(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CommentUpdateOne) AddStatus(v int) *CommentUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetReplyCount sets the "reply_count" field.
func (_u *CommentUpdateOne) SetReplyCount(v int) *CommentUpdateOne {
	_u.mutation.ResetReplyCount()
	_u.mutation.SetReplyCount(v)
	return _u
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableReplyCount(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetReplyCount(*v)
	}
	return _u
}

// AddReplyCount adds value to the "reply_count" field.
func (_u *CommentUpdateOne) AddReplyCount(v int) *CommentUpdateOne {
	_u.mutation.AddReplyCount(v)
	return _u
}

// SetLikeCount sets the "like_count" field.
func (_u *CommentUpdateOne) SetLikeCount(v int) *CommentUpdateOne {
	_u.mutation.ResetLikeCount()
	_u.mutation.SetLikeCount(v)
	return _u
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableLikeCount(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetLikeCount(*v)
	}
	return _u
}

// AddLikeCount adds value to the "like_count" field.
func (_u *CommentUpdateOne) AddLikeCount(v int) *CommentUpdateOne {
	_u.mutation.AddLikeCount(v)
	return _u
}

// SetDislikeCount sets the "dislike_count" field.
func (_u *CommentUpdateOne) SetDislikeCount(v int) *CommentUpdateOne {
	_u.mutation.ResetDislikeCount()
	_u.mutation.SetDislikeCount(v)
	return _u
}

// SetNillableDislikeCount sets the "dislike_count" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableDislikeCount(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetDislikeCount(*v)
	}
	return _u
}

// AddDislikeCount adds value to the "dislike_count" field.
func (_u *CommentUpdateOne) AddDislikeCount(v int) *CommentUpdateOne {
	_u.mutation.AddDislikeCount(v)
	return _u
}

// SetCollectCount sets the "collect_count" field.
func (_u *CommentUpdateOne) SetCollectCount(v int) *CommentUpdateOne {
	_u.mutation.ResetCollectCount()
	_u.mutation.SetCollectCount(v)
	return _u
}

// SetNillableCollectCount sets the "collect_count" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableCollectCount(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetCollectCount(*v)
	}
	return _u
}

// AddCollectCount adds value to the "collect_count" field.
func (_u *CommentUpdateOne) AddCollectCount(v int) *CommentUpdateOne {
	_u.mutation.AddCollectCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CommentUpdateOne) SetCreatedAt(v time.Time) *CommentUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableCreatedAt(v *time.Time) *CommentUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *CommentUpdateOne) ClearCreatedAt() *CommentUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CommentUpdateOne) SetUpdatedAt(v time.Time) *CommentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableUpdatedAt(v *time.Time) *CommentUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *CommentUpdateOne) ClearUpdatedAt() *CommentUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetArticle sets the "article" edge to the Article entity.
func (_u *CommentUpdateOne) SetArticle(v *Article) *CommentUpdateOne {
	return _u.SetArticleID(v.ID)
}

// SetParent sets the "parent" edge to the Comment entity.
func (_u *CommentUpdateOne) SetParent(v *Comment) *CommentUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddReplyIDs adds the "replies" edge to the Comment entity by IDs.
func (_u *CommentUpdateOne) AddReplyIDs(ids ...int) *CommentUpdateOne {
	_u.mutation.AddReplyIDs(ids...)
	return _u
}

// AddReplies adds the "replies" edges to the Comment entity.
func (_u *CommentUpdateOne) AddReplies(v ...*Comment) *CommentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReplyIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (_u *CommentUpdateOne) Mutation() *CommentMutation {
	return _u.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (_u *CommentUpdateOne) ClearArticle() *CommentUpdateOne {
	_u.mutation.ClearArticle()
	return _u
}

// ClearParent clears the "parent" edge to the Comment entity.
func (_u *CommentUpdateOne) ClearParent() *CommentUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearReplies clears all "replies" edges to the Comment entity.
func (_u *CommentUpdateOne) ClearReplies() *CommentUpdateOne {
	_u.mutation.ClearReplies()
	return _u
}

// RemoveReplyIDs removes the "replies" edge to Comment entities by IDs.
func (_u *CommentUpdateOne) RemoveReplyIDs(ids ...int) *CommentUpdateOne {
	_u.mutation.RemoveReplyIDs(ids...)
	return _u
}

// RemoveReplies removes "replies" edges to Comment entities.
func (_u *CommentUpdateOne) RemoveReplies(v ...*Comment) *CommentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReplyIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (_u *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Comment entity.
func (_u *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CommentUpdateOne) check() error {
	if v, ok := _u.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`gen: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if _u.mutation.ArticleCleared() && len(_u.mutation.ArticleIDs()) > 0 {
		return errors.New(`gen: clearing a required unique edge "Comment.article"`)
	}
	return nil
}

func (_u *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(comment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLevel(); ok {
		_spec.AddField(comment.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ReplyCount(); ok {
		_spec.SetField(comment.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedReplyCount(); ok {
		_spec.AddField(comment.FieldReplyCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLikeCount(); ok {
		_spec.AddField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DislikeCount(); ok {
		_spec.SetField(comment.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDislikeCount(); ok {
		_spec.AddField(comment.FieldDislikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CollectCount(); ok {
		_spec.SetField(comment.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCollectCount(); ok {
		_spec.AddField(comment.FieldCollectCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(comment.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(comment.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ArticleTable,
			Columns: []string{comment.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !_u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
