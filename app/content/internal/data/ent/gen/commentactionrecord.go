// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/comment"
	"content/internal/data/ent/gen/commentactionrecord"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CommentActionRecord is the model entity for the CommentActionRecord schema.
type CommentActionRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 关联的文章ID
	CommentID int `json:"comment_id,omitempty"`
	// 执行行为的用户ID
	UserID int `json:"user_id,omitempty"`
	// 行为类型 0-点赞 1收藏
	Type int `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentActionRecordQuery when eager-loading is set.
	Edges        CommentActionRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentActionRecordEdges holds the relations/edges for other nodes in the graph.
type CommentActionRecordEdges struct {
	// Comment holds the value of the comment edge.
	Comment *Comment `json:"comment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentActionRecordEdges) CommentOrErr() (*Comment, error) {
	if e.Comment != nil {
		return e.Comment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommentActionRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commentactionrecord.FieldID, commentactionrecord.FieldCommentID, commentactionrecord.FieldUserID, commentactionrecord.FieldType:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommentActionRecord fields.
func (_m *CommentActionRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commentactionrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case commentactionrecord.FieldCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				_m.CommentID = int(value.Int64)
			}
		case commentactionrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = int(value.Int64)
			}
		case commentactionrecord.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommentActionRecord.
// This includes values selected through modifiers, order, etc.
func (_m *CommentActionRecord) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryComment queries the "comment" edge of the CommentActionRecord entity.
func (_m *CommentActionRecord) QueryComment() *CommentQuery {
	return NewCommentActionRecordClient(_m.config).QueryComment(_m)
}

// Update returns a builder for updating this CommentActionRecord.
// Note that you need to call CommentActionRecord.Unwrap() before calling this method if this CommentActionRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CommentActionRecord) Update() *CommentActionRecordUpdateOne {
	return NewCommentActionRecordClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CommentActionRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CommentActionRecord) Unwrap() *CommentActionRecord {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: CommentActionRecord is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CommentActionRecord) String() string {
	var builder strings.Builder
	builder.WriteString("CommentActionRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CommentID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteByte(')')
	return builder.String()
}

// CommentActionRecords is a parsable slice of CommentActionRecord.
type CommentActionRecords []*CommentActionRecord
