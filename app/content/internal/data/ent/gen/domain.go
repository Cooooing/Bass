// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/domain"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Domain is the model entity for the Domain schema.
type Domain struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 域名名称
	Name string `json:"name,omitempty"`
	// 域名描述
	Description string `json:"description,omitempty"`
	// 状态 0-正常，1-禁用
	Status int `json:"status,omitempty"`
	// 领域地址
	URL *string `json:"url,omitempty"`
	// 图标
	Icon *string `json:"icon,omitempty"`
	// 标签数
	TagCount int `json:"tag_count,omitempty"`
	// 是否导航
	IsNav bool `json:"is_nav,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainQuery when eager-loading is set.
	Edges        DomainEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DomainEdges holds the relations/edges for other nodes in the graph.
type DomainEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Domain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domain.FieldIsNav:
			values[i] = new(sql.NullBool)
		case domain.FieldID, domain.FieldStatus, domain.FieldTagCount:
			values[i] = new(sql.NullInt64)
		case domain.FieldName, domain.FieldDescription, domain.FieldURL, domain.FieldIcon:
			values[i] = new(sql.NullString)
		case domain.FieldCreatedAt, domain.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Domain fields.
func (_m *Domain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case domain.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case domain.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case domain.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = int(value.Int64)
			}
		case domain.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = new(string)
				*_m.URL = value.String
			}
		case domain.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = new(string)
				*_m.Icon = value.String
			}
		case domain.FieldTagCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_count", values[i])
			} else if value.Valid {
				_m.TagCount = int(value.Int64)
			}
		case domain.FieldIsNav:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_nav", values[i])
			} else if value.Valid {
				_m.IsNav = value.Bool
			}
		case domain.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case domain.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Domain.
// This includes values selected through modifiers, order, etc.
func (_m *Domain) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Domain entity.
func (_m *Domain) QueryTags() *TagQuery {
	return NewDomainClient(_m.config).QueryTags(_m)
}

// Update returns a builder for updating this Domain.
// Note that you need to call Domain.Unwrap() before calling this method if this Domain
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Domain) Update() *DomainUpdateOne {
	return NewDomainClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Domain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Domain) Unwrap() *Domain {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: Domain is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Domain) String() string {
	var builder strings.Builder
	builder.WriteString("Domain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	if v := _m.URL; v != nil {
		builder.WriteString("url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Icon; v != nil {
		builder.WriteString("icon=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tag_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.TagCount))
	builder.WriteString(", ")
	builder.WriteString("is_nav=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsNav))
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Domains is a parsable slice of Domain.
type Domains []*Domain
