// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/domain"
	"content/internal/data/ent/gen/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainCreate is the builder for creating a Domain entity.
type DomainCreate struct {
	config
	mutation *DomainMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *DomainCreate) SetName(v string) *DomainCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *DomainCreate) SetDescription(v string) *DomainCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *DomainCreate) SetStatus(v int) *DomainCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetURL sets the "url" field.
func (_c *DomainCreate) SetURL(v string) *DomainCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetIcon sets the "icon" field.
func (_c *DomainCreate) SetIcon(v string) *DomainCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetTagCount sets the "tag_count" field.
func (_c *DomainCreate) SetTagCount(v int) *DomainCreate {
	_c.mutation.SetTagCount(v)
	return _c
}

// SetNillableTagCount sets the "tag_count" field if the given value is not nil.
func (_c *DomainCreate) SetNillableTagCount(v *int) *DomainCreate {
	if v != nil {
		_c.SetTagCount(*v)
	}
	return _c
}

// SetIsNav sets the "is_nav" field.
func (_c *DomainCreate) SetIsNav(v bool) *DomainCreate {
	_c.mutation.SetIsNav(v)
	return _c
}

// SetNillableIsNav sets the "is_nav" field if the given value is not nil.
func (_c *DomainCreate) SetNillableIsNav(v *bool) *DomainCreate {
	if v != nil {
		_c.SetIsNav(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DomainCreate) SetCreatedAt(v time.Time) *DomainCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DomainCreate) SetNillableCreatedAt(v *time.Time) *DomainCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DomainCreate) SetUpdatedAt(v time.Time) *DomainCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DomainCreate) SetNillableUpdatedAt(v *time.Time) *DomainCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_c *DomainCreate) AddTagIDs(ids ...int) *DomainCreate {
	_c.mutation.AddTagIDs(ids...)
	return _c
}

// AddTags adds the "tags" edges to the Tag entity.
func (_c *DomainCreate) AddTags(v ...*Tag) *DomainCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTagIDs(ids...)
}

// Mutation returns the DomainMutation object of the builder.
func (_c *DomainCreate) Mutation() *DomainMutation {
	return _c.mutation
}

// Save creates the Domain in the database.
func (_c *DomainCreate) Save(ctx context.Context) (*Domain, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DomainCreate) SaveX(ctx context.Context) *Domain {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DomainCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DomainCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DomainCreate) defaults() {
	if _, ok := _c.mutation.TagCount(); !ok {
		v := domain.DefaultTagCount
		_c.mutation.SetTagCount(v)
	}
	if _, ok := _c.mutation.IsNav(); !ok {
		v := domain.DefaultIsNav
		_c.mutation.SetIsNav(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := domain.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := domain.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DomainCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Domain.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := domain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Domain.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`gen: missing required field "Domain.description"`)}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := domain.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`gen: validator failed for field "Domain.description": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Domain.status"`)}
	}
	if _, ok := _c.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`gen: missing required field "Domain.url"`)}
	}
	if _, ok := _c.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`gen: missing required field "Domain.icon"`)}
	}
	if _, ok := _c.mutation.TagCount(); !ok {
		return &ValidationError{Name: "tag_count", err: errors.New(`gen: missing required field "Domain.tag_count"`)}
	}
	if _, ok := _c.mutation.IsNav(); !ok {
		return &ValidationError{Name: "is_nav", err: errors.New(`gen: missing required field "Domain.is_nav"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Domain.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Domain.updated_at"`)}
	}
	return nil
}

func (_c *DomainCreate) sqlSave(ctx context.Context) (*Domain, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DomainCreate) createSpec() (*Domain, *sqlgraph.CreateSpec) {
	var (
		_node = &Domain{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(domain.Table, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(domain.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(domain.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(domain.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(domain.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := _c.mutation.TagCount(); ok {
		_spec.SetField(domain.FieldTagCount, field.TypeInt, value)
		_node.TagCount = value
	}
	if value, ok := _c.mutation.IsNav(); ok {
		_spec.SetField(domain.FieldIsNav, field.TypeBool, value)
		_node.IsNav = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(domain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(domain.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := _c.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DomainCreateBulk is the builder for creating many Domain entities in bulk.
type DomainCreateBulk struct {
	config
	err      error
	builders []*DomainCreate
}

// Save creates the Domain entities in the database.
func (_c *DomainCreateBulk) Save(ctx context.Context) ([]*Domain, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Domain, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DomainCreateBulk) SaveX(ctx context.Context) []*Domain {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DomainCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DomainCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
