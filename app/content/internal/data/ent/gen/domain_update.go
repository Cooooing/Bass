// Code generated by ent, DO NOT EDIT.

package gen

import (
	"content/internal/data/ent/gen/domain"
	"content/internal/data/ent/gen/predicate"
	"content/internal/data/ent/gen/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainUpdate is the builder for updating Domain entities.
type DomainUpdate struct {
	config
	hooks    []Hook
	mutation *DomainMutation
}

// Where appends a list predicates to the DomainUpdate builder.
func (_u *DomainUpdate) Where(ps ...predicate.Domain) *DomainUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *DomainUpdate) SetName(v string) *DomainUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableName(v *string) *DomainUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *DomainUpdate) SetDescription(v string) *DomainUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableDescription(v *string) *DomainUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *DomainUpdate) SetStatus(v int) *DomainUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableStatus(v *int) *DomainUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DomainUpdate) AddStatus(v int) *DomainUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DomainUpdate) ClearStatus() *DomainUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetURL sets the "url" field.
func (_u *DomainUpdate) SetURL(v string) *DomainUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableURL(v *string) *DomainUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *DomainUpdate) ClearURL() *DomainUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *DomainUpdate) SetIcon(v string) *DomainUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableIcon(v *string) *DomainUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *DomainUpdate) ClearIcon() *DomainUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetTagCount sets the "tag_count" field.
func (_u *DomainUpdate) SetTagCount(v int) *DomainUpdate {
	_u.mutation.ResetTagCount()
	_u.mutation.SetTagCount(v)
	return _u
}

// SetNillableTagCount sets the "tag_count" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableTagCount(v *int) *DomainUpdate {
	if v != nil {
		_u.SetTagCount(*v)
	}
	return _u
}

// AddTagCount adds value to the "tag_count" field.
func (_u *DomainUpdate) AddTagCount(v int) *DomainUpdate {
	_u.mutation.AddTagCount(v)
	return _u
}

// SetIsNav sets the "is_nav" field.
func (_u *DomainUpdate) SetIsNav(v bool) *DomainUpdate {
	_u.mutation.SetIsNav(v)
	return _u
}

// SetNillableIsNav sets the "is_nav" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableIsNav(v *bool) *DomainUpdate {
	if v != nil {
		_u.SetIsNav(*v)
	}
	return _u
}

// ClearIsNav clears the value of the "is_nav" field.
func (_u *DomainUpdate) ClearIsNav() *DomainUpdate {
	_u.mutation.ClearIsNav()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DomainUpdate) SetCreatedAt(v time.Time) *DomainUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableCreatedAt(v *time.Time) *DomainUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *DomainUpdate) ClearCreatedAt() *DomainUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DomainUpdate) SetUpdatedAt(v time.Time) *DomainUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *DomainUpdate) SetNillableUpdatedAt(v *time.Time) *DomainUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DomainUpdate) ClearUpdatedAt() *DomainUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *DomainUpdate) AddTagIDs(ids ...int) *DomainUpdate {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *DomainUpdate) AddTags(v ...*Tag) *DomainUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the DomainMutation object of the builder.
func (_u *DomainUpdate) Mutation() *DomainMutation {
	return _u.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *DomainUpdate) ClearTags() *DomainUpdate {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *DomainUpdate) RemoveTagIDs(ids ...int) *DomainUpdate {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *DomainUpdate) RemoveTags(v ...*Tag) *DomainUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DomainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DomainUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DomainUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DomainUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DomainUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := domain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Domain.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := domain.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`gen: validator failed for field "Domain.description": %w`, err)}
		}
	}
	return nil
}

func (_u *DomainUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(domain.Table, domain.Columns, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(domain.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(domain.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(domain.FieldStatus, field.TypeInt, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(domain.FieldStatus, field.TypeInt)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(domain.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(domain.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(domain.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(domain.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.TagCount(); ok {
		_spec.SetField(domain.FieldTagCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTagCount(); ok {
		_spec.AddField(domain.FieldTagCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsNav(); ok {
		_spec.SetField(domain.FieldIsNav, field.TypeBool, value)
	}
	if _u.mutation.IsNavCleared() {
		_spec.ClearField(domain.FieldIsNav, field.TypeBool)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(domain.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(domain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(domain.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(domain.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DomainUpdateOne is the builder for updating a single Domain entity.
type DomainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DomainMutation
}

// SetName sets the "name" field.
func (_u *DomainUpdateOne) SetName(v string) *DomainUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableName(v *string) *DomainUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *DomainUpdateOne) SetDescription(v string) *DomainUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableDescription(v *string) *DomainUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *DomainUpdateOne) SetStatus(v int) *DomainUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableStatus(v *int) *DomainUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DomainUpdateOne) AddStatus(v int) *DomainUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DomainUpdateOne) ClearStatus() *DomainUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetURL sets the "url" field.
func (_u *DomainUpdateOne) SetURL(v string) *DomainUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableURL(v *string) *DomainUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *DomainUpdateOne) ClearURL() *DomainUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *DomainUpdateOne) SetIcon(v string) *DomainUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableIcon(v *string) *DomainUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *DomainUpdateOne) ClearIcon() *DomainUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetTagCount sets the "tag_count" field.
func (_u *DomainUpdateOne) SetTagCount(v int) *DomainUpdateOne {
	_u.mutation.ResetTagCount()
	_u.mutation.SetTagCount(v)
	return _u
}

// SetNillableTagCount sets the "tag_count" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableTagCount(v *int) *DomainUpdateOne {
	if v != nil {
		_u.SetTagCount(*v)
	}
	return _u
}

// AddTagCount adds value to the "tag_count" field.
func (_u *DomainUpdateOne) AddTagCount(v int) *DomainUpdateOne {
	_u.mutation.AddTagCount(v)
	return _u
}

// SetIsNav sets the "is_nav" field.
func (_u *DomainUpdateOne) SetIsNav(v bool) *DomainUpdateOne {
	_u.mutation.SetIsNav(v)
	return _u
}

// SetNillableIsNav sets the "is_nav" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableIsNav(v *bool) *DomainUpdateOne {
	if v != nil {
		_u.SetIsNav(*v)
	}
	return _u
}

// ClearIsNav clears the value of the "is_nav" field.
func (_u *DomainUpdateOne) ClearIsNav() *DomainUpdateOne {
	_u.mutation.ClearIsNav()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DomainUpdateOne) SetCreatedAt(v time.Time) *DomainUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableCreatedAt(v *time.Time) *DomainUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *DomainUpdateOne) ClearCreatedAt() *DomainUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DomainUpdateOne) SetUpdatedAt(v time.Time) *DomainUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *DomainUpdateOne) SetNillableUpdatedAt(v *time.Time) *DomainUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *DomainUpdateOne) ClearUpdatedAt() *DomainUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *DomainUpdateOne) AddTagIDs(ids ...int) *DomainUpdateOne {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *DomainUpdateOne) AddTags(v ...*Tag) *DomainUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the DomainMutation object of the builder.
func (_u *DomainUpdateOne) Mutation() *DomainMutation {
	return _u.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *DomainUpdateOne) ClearTags() *DomainUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *DomainUpdateOne) RemoveTagIDs(ids ...int) *DomainUpdateOne {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *DomainUpdateOne) RemoveTags(v ...*Tag) *DomainUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the DomainUpdate builder.
func (_u *DomainUpdateOne) Where(ps ...predicate.Domain) *DomainUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DomainUpdateOne) Select(field string, fields ...string) *DomainUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Domain entity.
func (_u *DomainUpdateOne) Save(ctx context.Context) (*Domain, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DomainUpdateOne) SaveX(ctx context.Context) *Domain {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DomainUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DomainUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DomainUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := domain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Domain.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := domain.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`gen: validator failed for field "Domain.description": %w`, err)}
		}
	}
	return nil
}

func (_u *DomainUpdateOne) sqlSave(ctx context.Context) (_node *Domain, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(domain.Table, domain.Columns, sqlgraph.NewFieldSpec(domain.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Domain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, domain.FieldID)
		for _, f := range fields {
			if !domain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != domain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(domain.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(domain.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(domain.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(domain.FieldStatus, field.TypeInt, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(domain.FieldStatus, field.TypeInt)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(domain.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(domain.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(domain.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(domain.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.TagCount(); ok {
		_spec.SetField(domain.FieldTagCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTagCount(); ok {
		_spec.AddField(domain.FieldTagCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsNav(); ok {
		_spec.SetField(domain.FieldIsNav, field.TypeBool, value)
	}
	if _u.mutation.IsNavCleared() {
		_spec.ClearField(domain.FieldIsNav, field.TypeBool)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(domain.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(domain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(domain.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(domain.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.TagsTable,
			Columns: []string{domain.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Domain{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
