// Code generated by ent, DO NOT EDIT.

package user

import (
	"content/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Email1 applies equality check predicate on the "email1" field. It's identical to Email1EQ.
func Email1(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail1, v))
}

// Email2 applies equality check predicate on the "email2" field. It's identical to Email2EQ.
func Email2(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail2, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAge, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// Email1EQ applies the EQ predicate on the "email1" field.
func Email1EQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail1, v))
}

// Email1NEQ applies the NEQ predicate on the "email1" field.
func Email1NEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail1, v))
}

// Email1In applies the In predicate on the "email1" field.
func Email1In(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail1, vs...))
}

// Email1NotIn applies the NotIn predicate on the "email1" field.
func Email1NotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail1, vs...))
}

// Email1GT applies the GT predicate on the "email1" field.
func Email1GT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail1, v))
}

// Email1GTE applies the GTE predicate on the "email1" field.
func Email1GTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail1, v))
}

// Email1LT applies the LT predicate on the "email1" field.
func Email1LT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail1, v))
}

// Email1LTE applies the LTE predicate on the "email1" field.
func Email1LTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail1, v))
}

// Email1Contains applies the Contains predicate on the "email1" field.
func Email1Contains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail1, v))
}

// Email1HasPrefix applies the HasPrefix predicate on the "email1" field.
func Email1HasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail1, v))
}

// Email1HasSuffix applies the HasSuffix predicate on the "email1" field.
func Email1HasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail1, v))
}

// Email1EqualFold applies the EqualFold predicate on the "email1" field.
func Email1EqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail1, v))
}

// Email1ContainsFold applies the ContainsFold predicate on the "email1" field.
func Email1ContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail1, v))
}

// Email2EQ applies the EQ predicate on the "email2" field.
func Email2EQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail2, v))
}

// Email2NEQ applies the NEQ predicate on the "email2" field.
func Email2NEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail2, v))
}

// Email2In applies the In predicate on the "email2" field.
func Email2In(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail2, vs...))
}

// Email2NotIn applies the NotIn predicate on the "email2" field.
func Email2NotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail2, vs...))
}

// Email2GT applies the GT predicate on the "email2" field.
func Email2GT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail2, v))
}

// Email2GTE applies the GTE predicate on the "email2" field.
func Email2GTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail2, v))
}

// Email2LT applies the LT predicate on the "email2" field.
func Email2LT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail2, v))
}

// Email2LTE applies the LTE predicate on the "email2" field.
func Email2LTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail2, v))
}

// Email2Contains applies the Contains predicate on the "email2" field.
func Email2Contains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail2, v))
}

// Email2HasPrefix applies the HasPrefix predicate on the "email2" field.
func Email2HasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail2, v))
}

// Email2HasSuffix applies the HasSuffix predicate on the "email2" field.
func Email2HasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail2, v))
}

// Email2EqualFold applies the EqualFold predicate on the "email2" field.
func Email2EqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail2, v))
}

// Email2ContainsFold applies the ContainsFold predicate on the "email2" field.
func Email2ContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail2, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
