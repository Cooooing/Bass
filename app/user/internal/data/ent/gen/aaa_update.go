// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"user/internal/data/ent/gen/aaa"
	"user/internal/data/ent/gen/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AAAUpdate is the builder for updating AAA entities.
type AAAUpdate struct {
	config
	hooks    []Hook
	mutation *AAAMutation
}

// Where appends a list predicates to the AAAUpdate builder.
func (_u *AAAUpdate) Where(ps ...predicate.AAA) *AAAUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *AAAUpdate) SetName(v string) *AAAUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AAAUpdate) SetNillableName(v *string) *AAAUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *AAAUpdate) SetNickname(v string) *AAAUpdate {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *AAAUpdate) SetNillableNickname(v *string) *AAAUpdate {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *AAAUpdate) ClearNickname() *AAAUpdate {
	_u.mutation.ClearNickname()
	return _u
}

// Mutation returns the AAAMutation object of the builder.
func (_u *AAAUpdate) Mutation() *AAAMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AAAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AAAUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AAAUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AAAUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AAAUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := aaa.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "AAA.name": %w`, err)}
		}
	}
	return nil
}

func (_u *AAAUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(aaa.Table, aaa.Columns, sqlgraph.NewFieldSpec(aaa.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(aaa.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(aaa.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(aaa.FieldNickname, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aaa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AAAUpdateOne is the builder for updating a single AAA entity.
type AAAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AAAMutation
}

// SetName sets the "name" field.
func (_u *AAAUpdateOne) SetName(v string) *AAAUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AAAUpdateOne) SetNillableName(v *string) *AAAUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *AAAUpdateOne) SetNickname(v string) *AAAUpdateOne {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *AAAUpdateOne) SetNillableNickname(v *string) *AAAUpdateOne {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *AAAUpdateOne) ClearNickname() *AAAUpdateOne {
	_u.mutation.ClearNickname()
	return _u
}

// Mutation returns the AAAMutation object of the builder.
func (_u *AAAUpdateOne) Mutation() *AAAMutation {
	return _u.mutation
}

// Where appends a list predicates to the AAAUpdate builder.
func (_u *AAAUpdateOne) Where(ps ...predicate.AAA) *AAAUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AAAUpdateOne) Select(field string, fields ...string) *AAAUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AAA entity.
func (_u *AAAUpdateOne) Save(ctx context.Context) (*AAA, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AAAUpdateOne) SaveX(ctx context.Context) *AAA {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AAAUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AAAUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AAAUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := aaa.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "AAA.name": %w`, err)}
		}
	}
	return nil
}

func (_u *AAAUpdateOne) sqlSave(ctx context.Context) (_node *AAA, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(aaa.Table, aaa.Columns, sqlgraph.NewFieldSpec(aaa.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "AAA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aaa.FieldID)
		for _, f := range fields {
			if !aaa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != aaa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(aaa.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(aaa.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(aaa.FieldNickname, field.TypeString)
	}
	_node = &AAA{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aaa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
