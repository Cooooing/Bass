// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"user/internal/data/ent/gen/group"
	"user/internal/data/ent/gen/predicate"
	"user/internal/data/ent/gen/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGroup = "Group"
	TypeUser  = "User"
)

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	endpoint      *string
	description   *string
	module        *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Group, error)
	predicates    []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetEndpoint sets the "endpoint" field.
func (m *GroupMutation) SetEndpoint(s string) {
	m.endpoint = &s
}

// Endpoint returns the value of the "endpoint" field in the mutation.
func (m *GroupMutation) Endpoint() (r string, exists bool) {
	v := m.endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpoint returns the old "endpoint" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpoint: %w", err)
	}
	return oldValue.Endpoint, nil
}

// ResetEndpoint resets all changes to the "endpoint" field.
func (m *GroupMutation) ResetEndpoint() {
	m.endpoint = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *GroupMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[group.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *GroupMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[group.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, group.FieldDescription)
}

// SetModule sets the "module" field.
func (m *GroupMutation) SetModule(s string) {
	m.module = &s
}

// Module returns the value of the "module" field in the mutation.
func (m *GroupMutation) Module() (r string, exists bool) {
	v := m.module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "module" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldModule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ClearModule clears the value of the "module" field.
func (m *GroupMutation) ClearModule() {
	m.module = nil
	m.clearedFields[group.FieldModule] = struct{}{}
}

// ModuleCleared returns if the "module" field was cleared in this mutation.
func (m *GroupMutation) ModuleCleared() bool {
	_, ok := m.clearedFields[group.FieldModule]
	return ok
}

// ResetModule resets all changes to the "module" field.
func (m *GroupMutation) ResetModule() {
	m.module = nil
	delete(m.clearedFields, group.FieldModule)
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.endpoint != nil {
		fields = append(fields, group.FieldEndpoint)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.module != nil {
		fields = append(fields, group.FieldModule)
	}
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldEndpoint:
		return m.Endpoint()
	case group.FieldDescription:
		return m.Description()
	case group.FieldModule:
		return m.Module()
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldEndpoint:
		return m.OldEndpoint(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldModule:
		return m.OldModule(ctx)
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpoint(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldDescription) {
		fields = append(fields, group.FieldDescription)
	}
	if m.FieldCleared(group.FieldModule) {
		fields = append(fields, group.FieldModule)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldDescription:
		m.ClearDescription()
		return nil
	case group.FieldModule:
		m.ClearModule()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldEndpoint:
		m.ResetEndpoint()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldModule:
		m.ResetModule()
		return nil
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Group edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	nickname                  *string
	password                  *string
	email                     *string
	phone                     *string
	url                       *string
	avatar_url                *string
	introduction              *string
	mbti                      *string
	status                    *int
	addstatus                 *int
	group_name                *string
	follow_count              *int
	addfollow_count           *int
	follower_count            *int
	addfollower_count         *int
	last_login_time           *time.Time
	last_login_ip             *string
	online_minutes            *int
	addonline_minutes         *int
	last_checkin_time         *time.Time
	current_checkin_streak    *int
	addcurrent_checkin_streak *int
	longest_checkin_streak    *int
	addlongest_checkin_streak *int
	language                  *string
	timezone                  *string
	theme                     *string
	mobile_theme              *string
	enable_web_notify         *bool
	enable_email_subscribe    *bool
	public_points             *bool
	public_followers          *bool
	public_articles           *bool
	public_comments           *bool
	public_online_status      *bool
	country                   *string
	province                  *string
	city                      *string
	public_location           *bool
	twofa_secret              *string
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *UserMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[user.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *UserMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[user.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, user.FieldNickname)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetURL sets the "url" field.
func (m *UserMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *UserMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *UserMutation) ClearURL() {
	m.url = nil
	m.clearedFields[user.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *UserMutation) URLCleared() bool {
	_, ok := m.clearedFields[user.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *UserMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, user.FieldURL)
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (m *UserMutation) ClearAvatarURL() {
	m.avatar_url = nil
	m.clearedFields[user.FieldAvatarURL] = struct{}{}
}

// AvatarURLCleared returns if the "avatar_url" field was cleared in this mutation.
func (m *UserMutation) AvatarURLCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarURL]
	return ok
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
	delete(m.clearedFields, user.FieldAvatarURL)
}

// SetIntroduction sets the "introduction" field.
func (m *UserMutation) SetIntroduction(s string) {
	m.introduction = &s
}

// Introduction returns the value of the "introduction" field in the mutation.
func (m *UserMutation) Introduction() (r string, exists bool) {
	v := m.introduction
	if v == nil {
		return
	}
	return *v, true
}

// OldIntroduction returns the old "introduction" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIntroduction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIntroduction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIntroduction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntroduction: %w", err)
	}
	return oldValue.Introduction, nil
}

// ClearIntroduction clears the value of the "introduction" field.
func (m *UserMutation) ClearIntroduction() {
	m.introduction = nil
	m.clearedFields[user.FieldIntroduction] = struct{}{}
}

// IntroductionCleared returns if the "introduction" field was cleared in this mutation.
func (m *UserMutation) IntroductionCleared() bool {
	_, ok := m.clearedFields[user.FieldIntroduction]
	return ok
}

// ResetIntroduction resets all changes to the "introduction" field.
func (m *UserMutation) ResetIntroduction() {
	m.introduction = nil
	delete(m.clearedFields, user.FieldIntroduction)
}

// SetMbti sets the "mbti" field.
func (m *UserMutation) SetMbti(s string) {
	m.mbti = &s
}

// Mbti returns the value of the "mbti" field in the mutation.
func (m *UserMutation) Mbti() (r string, exists bool) {
	v := m.mbti
	if v == nil {
		return
	}
	return *v, true
}

// OldMbti returns the old "mbti" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMbti(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMbti is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMbti requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMbti: %w", err)
	}
	return oldValue.Mbti, nil
}

// ClearMbti clears the value of the "mbti" field.
func (m *UserMutation) ClearMbti() {
	m.mbti = nil
	m.clearedFields[user.FieldMbti] = struct{}{}
}

// MbtiCleared returns if the "mbti" field was cleared in this mutation.
func (m *UserMutation) MbtiCleared() bool {
	_, ok := m.clearedFields[user.FieldMbti]
	return ok
}

// ResetMbti resets all changes to the "mbti" field.
func (m *UserMutation) ResetMbti() {
	m.mbti = nil
	delete(m.clearedFields, user.FieldMbti)
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *UserMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *UserMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetGroupName sets the "group_name" field.
func (m *UserMutation) SetGroupName(s string) {
	m.group_name = &s
}

// GroupName returns the value of the "group_name" field in the mutation.
func (m *UserMutation) GroupName() (r string, exists bool) {
	v := m.group_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupName returns the old "group_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGroupName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupName: %w", err)
	}
	return oldValue.GroupName, nil
}

// ClearGroupName clears the value of the "group_name" field.
func (m *UserMutation) ClearGroupName() {
	m.group_name = nil
	m.clearedFields[user.FieldGroupName] = struct{}{}
}

// GroupNameCleared returns if the "group_name" field was cleared in this mutation.
func (m *UserMutation) GroupNameCleared() bool {
	_, ok := m.clearedFields[user.FieldGroupName]
	return ok
}

// ResetGroupName resets all changes to the "group_name" field.
func (m *UserMutation) ResetGroupName() {
	m.group_name = nil
	delete(m.clearedFields, user.FieldGroupName)
}

// SetFollowCount sets the "follow_count" field.
func (m *UserMutation) SetFollowCount(i int) {
	m.follow_count = &i
	m.addfollow_count = nil
}

// FollowCount returns the value of the "follow_count" field in the mutation.
func (m *UserMutation) FollowCount() (r int, exists bool) {
	v := m.follow_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowCount returns the old "follow_count" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFollowCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowCount: %w", err)
	}
	return oldValue.FollowCount, nil
}

// AddFollowCount adds i to the "follow_count" field.
func (m *UserMutation) AddFollowCount(i int) {
	if m.addfollow_count != nil {
		*m.addfollow_count += i
	} else {
		m.addfollow_count = &i
	}
}

// AddedFollowCount returns the value that was added to the "follow_count" field in this mutation.
func (m *UserMutation) AddedFollowCount() (r int, exists bool) {
	v := m.addfollow_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowCount resets all changes to the "follow_count" field.
func (m *UserMutation) ResetFollowCount() {
	m.follow_count = nil
	m.addfollow_count = nil
}

// SetFollowerCount sets the "follower_count" field.
func (m *UserMutation) SetFollowerCount(i int) {
	m.follower_count = &i
	m.addfollower_count = nil
}

// FollowerCount returns the value of the "follower_count" field in the mutation.
func (m *UserMutation) FollowerCount() (r int, exists bool) {
	v := m.follower_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowerCount returns the old "follower_count" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFollowerCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowerCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowerCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowerCount: %w", err)
	}
	return oldValue.FollowerCount, nil
}

// AddFollowerCount adds i to the "follower_count" field.
func (m *UserMutation) AddFollowerCount(i int) {
	if m.addfollower_count != nil {
		*m.addfollower_count += i
	} else {
		m.addfollower_count = &i
	}
}

// AddedFollowerCount returns the value that was added to the "follower_count" field in this mutation.
func (m *UserMutation) AddedFollowerCount() (r int, exists bool) {
	v := m.addfollower_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowerCount resets all changes to the "follower_count" field.
func (m *UserMutation) ResetFollowerCount() {
	m.follower_count = nil
	m.addfollower_count = nil
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *UserMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *UserMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (m *UserMutation) ClearLastLoginTime() {
	m.last_login_time = nil
	m.clearedFields[user.FieldLastLoginTime] = struct{}{}
}

// LastLoginTimeCleared returns if the "last_login_time" field was cleared in this mutation.
func (m *UserMutation) LastLoginTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginTime]
	return ok
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *UserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
	delete(m.clearedFields, user.FieldLastLoginTime)
}

// SetLastLoginIP sets the "last_login_ip" field.
func (m *UserMutation) SetLastLoginIP(s string) {
	m.last_login_ip = &s
}

// LastLoginIP returns the value of the "last_login_ip" field in the mutation.
func (m *UserMutation) LastLoginIP() (r string, exists bool) {
	v := m.last_login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginIP returns the old "last_login_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginIP: %w", err)
	}
	return oldValue.LastLoginIP, nil
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (m *UserMutation) ClearLastLoginIP() {
	m.last_login_ip = nil
	m.clearedFields[user.FieldLastLoginIP] = struct{}{}
}

// LastLoginIPCleared returns if the "last_login_ip" field was cleared in this mutation.
func (m *UserMutation) LastLoginIPCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginIP]
	return ok
}

// ResetLastLoginIP resets all changes to the "last_login_ip" field.
func (m *UserMutation) ResetLastLoginIP() {
	m.last_login_ip = nil
	delete(m.clearedFields, user.FieldLastLoginIP)
}

// SetOnlineMinutes sets the "online_minutes" field.
func (m *UserMutation) SetOnlineMinutes(i int) {
	m.online_minutes = &i
	m.addonline_minutes = nil
}

// OnlineMinutes returns the value of the "online_minutes" field in the mutation.
func (m *UserMutation) OnlineMinutes() (r int, exists bool) {
	v := m.online_minutes
	if v == nil {
		return
	}
	return *v, true
}

// OldOnlineMinutes returns the old "online_minutes" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOnlineMinutes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnlineMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnlineMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnlineMinutes: %w", err)
	}
	return oldValue.OnlineMinutes, nil
}

// AddOnlineMinutes adds i to the "online_minutes" field.
func (m *UserMutation) AddOnlineMinutes(i int) {
	if m.addonline_minutes != nil {
		*m.addonline_minutes += i
	} else {
		m.addonline_minutes = &i
	}
}

// AddedOnlineMinutes returns the value that was added to the "online_minutes" field in this mutation.
func (m *UserMutation) AddedOnlineMinutes() (r int, exists bool) {
	v := m.addonline_minutes
	if v == nil {
		return
	}
	return *v, true
}

// ResetOnlineMinutes resets all changes to the "online_minutes" field.
func (m *UserMutation) ResetOnlineMinutes() {
	m.online_minutes = nil
	m.addonline_minutes = nil
}

// SetLastCheckinTime sets the "last_checkin_time" field.
func (m *UserMutation) SetLastCheckinTime(t time.Time) {
	m.last_checkin_time = &t
}

// LastCheckinTime returns the value of the "last_checkin_time" field in the mutation.
func (m *UserMutation) LastCheckinTime() (r time.Time, exists bool) {
	v := m.last_checkin_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastCheckinTime returns the old "last_checkin_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastCheckinTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastCheckinTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastCheckinTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastCheckinTime: %w", err)
	}
	return oldValue.LastCheckinTime, nil
}

// ClearLastCheckinTime clears the value of the "last_checkin_time" field.
func (m *UserMutation) ClearLastCheckinTime() {
	m.last_checkin_time = nil
	m.clearedFields[user.FieldLastCheckinTime] = struct{}{}
}

// LastCheckinTimeCleared returns if the "last_checkin_time" field was cleared in this mutation.
func (m *UserMutation) LastCheckinTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldLastCheckinTime]
	return ok
}

// ResetLastCheckinTime resets all changes to the "last_checkin_time" field.
func (m *UserMutation) ResetLastCheckinTime() {
	m.last_checkin_time = nil
	delete(m.clearedFields, user.FieldLastCheckinTime)
}

// SetCurrentCheckinStreak sets the "current_checkin_streak" field.
func (m *UserMutation) SetCurrentCheckinStreak(i int) {
	m.current_checkin_streak = &i
	m.addcurrent_checkin_streak = nil
}

// CurrentCheckinStreak returns the value of the "current_checkin_streak" field in the mutation.
func (m *UserMutation) CurrentCheckinStreak() (r int, exists bool) {
	v := m.current_checkin_streak
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentCheckinStreak returns the old "current_checkin_streak" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCurrentCheckinStreak(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentCheckinStreak is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentCheckinStreak requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentCheckinStreak: %w", err)
	}
	return oldValue.CurrentCheckinStreak, nil
}

// AddCurrentCheckinStreak adds i to the "current_checkin_streak" field.
func (m *UserMutation) AddCurrentCheckinStreak(i int) {
	if m.addcurrent_checkin_streak != nil {
		*m.addcurrent_checkin_streak += i
	} else {
		m.addcurrent_checkin_streak = &i
	}
}

// AddedCurrentCheckinStreak returns the value that was added to the "current_checkin_streak" field in this mutation.
func (m *UserMutation) AddedCurrentCheckinStreak() (r int, exists bool) {
	v := m.addcurrent_checkin_streak
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentCheckinStreak resets all changes to the "current_checkin_streak" field.
func (m *UserMutation) ResetCurrentCheckinStreak() {
	m.current_checkin_streak = nil
	m.addcurrent_checkin_streak = nil
}

// SetLongestCheckinStreak sets the "longest_checkin_streak" field.
func (m *UserMutation) SetLongestCheckinStreak(i int) {
	m.longest_checkin_streak = &i
	m.addlongest_checkin_streak = nil
}

// LongestCheckinStreak returns the value of the "longest_checkin_streak" field in the mutation.
func (m *UserMutation) LongestCheckinStreak() (r int, exists bool) {
	v := m.longest_checkin_streak
	if v == nil {
		return
	}
	return *v, true
}

// OldLongestCheckinStreak returns the old "longest_checkin_streak" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLongestCheckinStreak(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongestCheckinStreak is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongestCheckinStreak requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongestCheckinStreak: %w", err)
	}
	return oldValue.LongestCheckinStreak, nil
}

// AddLongestCheckinStreak adds i to the "longest_checkin_streak" field.
func (m *UserMutation) AddLongestCheckinStreak(i int) {
	if m.addlongest_checkin_streak != nil {
		*m.addlongest_checkin_streak += i
	} else {
		m.addlongest_checkin_streak = &i
	}
}

// AddedLongestCheckinStreak returns the value that was added to the "longest_checkin_streak" field in this mutation.
func (m *UserMutation) AddedLongestCheckinStreak() (r int, exists bool) {
	v := m.addlongest_checkin_streak
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongestCheckinStreak resets all changes to the "longest_checkin_streak" field.
func (m *UserMutation) ResetLongestCheckinStreak() {
	m.longest_checkin_streak = nil
	m.addlongest_checkin_streak = nil
}

// SetLanguage sets the "language" field.
func (m *UserMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *UserMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *UserMutation) ResetLanguage() {
	m.language = nil
}

// SetTimezone sets the "timezone" field.
func (m *UserMutation) SetTimezone(s string) {
	m.timezone = &s
}

// Timezone returns the value of the "timezone" field in the mutation.
func (m *UserMutation) Timezone() (r string, exists bool) {
	v := m.timezone
	if v == nil {
		return
	}
	return *v, true
}

// OldTimezone returns the old "timezone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTimezone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimezone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimezone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimezone: %w", err)
	}
	return oldValue.Timezone, nil
}

// ResetTimezone resets all changes to the "timezone" field.
func (m *UserMutation) ResetTimezone() {
	m.timezone = nil
}

// SetTheme sets the "theme" field.
func (m *UserMutation) SetTheme(s string) {
	m.theme = &s
}

// Theme returns the value of the "theme" field in the mutation.
func (m *UserMutation) Theme() (r string, exists bool) {
	v := m.theme
	if v == nil {
		return
	}
	return *v, true
}

// OldTheme returns the old "theme" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTheme(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTheme is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTheme requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTheme: %w", err)
	}
	return oldValue.Theme, nil
}

// ResetTheme resets all changes to the "theme" field.
func (m *UserMutation) ResetTheme() {
	m.theme = nil
}

// SetMobileTheme sets the "mobile_theme" field.
func (m *UserMutation) SetMobileTheme(s string) {
	m.mobile_theme = &s
}

// MobileTheme returns the value of the "mobile_theme" field in the mutation.
func (m *UserMutation) MobileTheme() (r string, exists bool) {
	v := m.mobile_theme
	if v == nil {
		return
	}
	return *v, true
}

// OldMobileTheme returns the old "mobile_theme" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMobileTheme(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobileTheme is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobileTheme requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobileTheme: %w", err)
	}
	return oldValue.MobileTheme, nil
}

// ResetMobileTheme resets all changes to the "mobile_theme" field.
func (m *UserMutation) ResetMobileTheme() {
	m.mobile_theme = nil
}

// SetEnableWebNotify sets the "enable_web_notify" field.
func (m *UserMutation) SetEnableWebNotify(b bool) {
	m.enable_web_notify = &b
}

// EnableWebNotify returns the value of the "enable_web_notify" field in the mutation.
func (m *UserMutation) EnableWebNotify() (r bool, exists bool) {
	v := m.enable_web_notify
	if v == nil {
		return
	}
	return *v, true
}

// OldEnableWebNotify returns the old "enable_web_notify" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEnableWebNotify(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnableWebNotify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnableWebNotify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnableWebNotify: %w", err)
	}
	return oldValue.EnableWebNotify, nil
}

// ResetEnableWebNotify resets all changes to the "enable_web_notify" field.
func (m *UserMutation) ResetEnableWebNotify() {
	m.enable_web_notify = nil
}

// SetEnableEmailSubscribe sets the "enable_email_subscribe" field.
func (m *UserMutation) SetEnableEmailSubscribe(b bool) {
	m.enable_email_subscribe = &b
}

// EnableEmailSubscribe returns the value of the "enable_email_subscribe" field in the mutation.
func (m *UserMutation) EnableEmailSubscribe() (r bool, exists bool) {
	v := m.enable_email_subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldEnableEmailSubscribe returns the old "enable_email_subscribe" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEnableEmailSubscribe(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnableEmailSubscribe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnableEmailSubscribe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnableEmailSubscribe: %w", err)
	}
	return oldValue.EnableEmailSubscribe, nil
}

// ResetEnableEmailSubscribe resets all changes to the "enable_email_subscribe" field.
func (m *UserMutation) ResetEnableEmailSubscribe() {
	m.enable_email_subscribe = nil
}

// SetPublicPoints sets the "public_points" field.
func (m *UserMutation) SetPublicPoints(b bool) {
	m.public_points = &b
}

// PublicPoints returns the value of the "public_points" field in the mutation.
func (m *UserMutation) PublicPoints() (r bool, exists bool) {
	v := m.public_points
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicPoints returns the old "public_points" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicPoints(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicPoints: %w", err)
	}
	return oldValue.PublicPoints, nil
}

// ResetPublicPoints resets all changes to the "public_points" field.
func (m *UserMutation) ResetPublicPoints() {
	m.public_points = nil
}

// SetPublicFollowers sets the "public_followers" field.
func (m *UserMutation) SetPublicFollowers(b bool) {
	m.public_followers = &b
}

// PublicFollowers returns the value of the "public_followers" field in the mutation.
func (m *UserMutation) PublicFollowers() (r bool, exists bool) {
	v := m.public_followers
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicFollowers returns the old "public_followers" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicFollowers(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicFollowers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicFollowers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicFollowers: %w", err)
	}
	return oldValue.PublicFollowers, nil
}

// ResetPublicFollowers resets all changes to the "public_followers" field.
func (m *UserMutation) ResetPublicFollowers() {
	m.public_followers = nil
}

// SetPublicArticles sets the "public_articles" field.
func (m *UserMutation) SetPublicArticles(b bool) {
	m.public_articles = &b
}

// PublicArticles returns the value of the "public_articles" field in the mutation.
func (m *UserMutation) PublicArticles() (r bool, exists bool) {
	v := m.public_articles
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicArticles returns the old "public_articles" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicArticles(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicArticles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicArticles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicArticles: %w", err)
	}
	return oldValue.PublicArticles, nil
}

// ResetPublicArticles resets all changes to the "public_articles" field.
func (m *UserMutation) ResetPublicArticles() {
	m.public_articles = nil
}

// SetPublicComments sets the "public_comments" field.
func (m *UserMutation) SetPublicComments(b bool) {
	m.public_comments = &b
}

// PublicComments returns the value of the "public_comments" field in the mutation.
func (m *UserMutation) PublicComments() (r bool, exists bool) {
	v := m.public_comments
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicComments returns the old "public_comments" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicComments(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicComments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicComments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicComments: %w", err)
	}
	return oldValue.PublicComments, nil
}

// ResetPublicComments resets all changes to the "public_comments" field.
func (m *UserMutation) ResetPublicComments() {
	m.public_comments = nil
}

// SetPublicOnlineStatus sets the "public_online_status" field.
func (m *UserMutation) SetPublicOnlineStatus(b bool) {
	m.public_online_status = &b
}

// PublicOnlineStatus returns the value of the "public_online_status" field in the mutation.
func (m *UserMutation) PublicOnlineStatus() (r bool, exists bool) {
	v := m.public_online_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicOnlineStatus returns the old "public_online_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicOnlineStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicOnlineStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicOnlineStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicOnlineStatus: %w", err)
	}
	return oldValue.PublicOnlineStatus, nil
}

// ResetPublicOnlineStatus resets all changes to the "public_online_status" field.
func (m *UserMutation) ResetPublicOnlineStatus() {
	m.public_online_status = nil
}

// SetCountry sets the "country" field.
func (m *UserMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *UserMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *UserMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[user.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *UserMutation) CountryCleared() bool {
	_, ok := m.clearedFields[user.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *UserMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, user.FieldCountry)
}

// SetProvince sets the "province" field.
func (m *UserMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the value of the "province" field in the mutation.
func (m *UserMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old "province" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProvince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ClearProvince clears the value of the "province" field.
func (m *UserMutation) ClearProvince() {
	m.province = nil
	m.clearedFields[user.FieldProvince] = struct{}{}
}

// ProvinceCleared returns if the "province" field was cleared in this mutation.
func (m *UserMutation) ProvinceCleared() bool {
	_, ok := m.clearedFields[user.FieldProvince]
	return ok
}

// ResetProvince resets all changes to the "province" field.
func (m *UserMutation) ResetProvince() {
	m.province = nil
	delete(m.clearedFields, user.FieldProvince)
}

// SetCity sets the "city" field.
func (m *UserMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *UserMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ClearCity clears the value of the "city" field.
func (m *UserMutation) ClearCity() {
	m.city = nil
	m.clearedFields[user.FieldCity] = struct{}{}
}

// CityCleared returns if the "city" field was cleared in this mutation.
func (m *UserMutation) CityCleared() bool {
	_, ok := m.clearedFields[user.FieldCity]
	return ok
}

// ResetCity resets all changes to the "city" field.
func (m *UserMutation) ResetCity() {
	m.city = nil
	delete(m.clearedFields, user.FieldCity)
}

// SetPublicLocation sets the "public_location" field.
func (m *UserMutation) SetPublicLocation(b bool) {
	m.public_location = &b
}

// PublicLocation returns the value of the "public_location" field in the mutation.
func (m *UserMutation) PublicLocation() (r bool, exists bool) {
	v := m.public_location
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicLocation returns the old "public_location" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicLocation(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicLocation: %w", err)
	}
	return oldValue.PublicLocation, nil
}

// ResetPublicLocation resets all changes to the "public_location" field.
func (m *UserMutation) ResetPublicLocation() {
	m.public_location = nil
}

// SetTwofaSecret sets the "twofa_secret" field.
func (m *UserMutation) SetTwofaSecret(s string) {
	m.twofa_secret = &s
}

// TwofaSecret returns the value of the "twofa_secret" field in the mutation.
func (m *UserMutation) TwofaSecret() (r string, exists bool) {
	v := m.twofa_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldTwofaSecret returns the old "twofa_secret" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTwofaSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwofaSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwofaSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwofaSecret: %w", err)
	}
	return oldValue.TwofaSecret, nil
}

// ClearTwofaSecret clears the value of the "twofa_secret" field.
func (m *UserMutation) ClearTwofaSecret() {
	m.twofa_secret = nil
	m.clearedFields[user.FieldTwofaSecret] = struct{}{}
}

// TwofaSecretCleared returns if the "twofa_secret" field was cleared in this mutation.
func (m *UserMutation) TwofaSecretCleared() bool {
	_, ok := m.clearedFields[user.FieldTwofaSecret]
	return ok
}

// ResetTwofaSecret resets all changes to the "twofa_secret" field.
func (m *UserMutation) ResetTwofaSecret() {
	m.twofa_secret = nil
	delete(m.clearedFields, user.FieldTwofaSecret)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 37)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.url != nil {
		fields = append(fields, user.FieldURL)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.introduction != nil {
		fields = append(fields, user.FieldIntroduction)
	}
	if m.mbti != nil {
		fields = append(fields, user.FieldMbti)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.group_name != nil {
		fields = append(fields, user.FieldGroupName)
	}
	if m.follow_count != nil {
		fields = append(fields, user.FieldFollowCount)
	}
	if m.follower_count != nil {
		fields = append(fields, user.FieldFollowerCount)
	}
	if m.last_login_time != nil {
		fields = append(fields, user.FieldLastLoginTime)
	}
	if m.last_login_ip != nil {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.online_minutes != nil {
		fields = append(fields, user.FieldOnlineMinutes)
	}
	if m.last_checkin_time != nil {
		fields = append(fields, user.FieldLastCheckinTime)
	}
	if m.current_checkin_streak != nil {
		fields = append(fields, user.FieldCurrentCheckinStreak)
	}
	if m.longest_checkin_streak != nil {
		fields = append(fields, user.FieldLongestCheckinStreak)
	}
	if m.language != nil {
		fields = append(fields, user.FieldLanguage)
	}
	if m.timezone != nil {
		fields = append(fields, user.FieldTimezone)
	}
	if m.theme != nil {
		fields = append(fields, user.FieldTheme)
	}
	if m.mobile_theme != nil {
		fields = append(fields, user.FieldMobileTheme)
	}
	if m.enable_web_notify != nil {
		fields = append(fields, user.FieldEnableWebNotify)
	}
	if m.enable_email_subscribe != nil {
		fields = append(fields, user.FieldEnableEmailSubscribe)
	}
	if m.public_points != nil {
		fields = append(fields, user.FieldPublicPoints)
	}
	if m.public_followers != nil {
		fields = append(fields, user.FieldPublicFollowers)
	}
	if m.public_articles != nil {
		fields = append(fields, user.FieldPublicArticles)
	}
	if m.public_comments != nil {
		fields = append(fields, user.FieldPublicComments)
	}
	if m.public_online_status != nil {
		fields = append(fields, user.FieldPublicOnlineStatus)
	}
	if m.country != nil {
		fields = append(fields, user.FieldCountry)
	}
	if m.province != nil {
		fields = append(fields, user.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, user.FieldCity)
	}
	if m.public_location != nil {
		fields = append(fields, user.FieldPublicLocation)
	}
	if m.twofa_secret != nil {
		fields = append(fields, user.FieldTwofaSecret)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldURL:
		return m.URL()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	case user.FieldIntroduction:
		return m.Introduction()
	case user.FieldMbti:
		return m.Mbti()
	case user.FieldStatus:
		return m.Status()
	case user.FieldGroupName:
		return m.GroupName()
	case user.FieldFollowCount:
		return m.FollowCount()
	case user.FieldFollowerCount:
		return m.FollowerCount()
	case user.FieldLastLoginTime:
		return m.LastLoginTime()
	case user.FieldLastLoginIP:
		return m.LastLoginIP()
	case user.FieldOnlineMinutes:
		return m.OnlineMinutes()
	case user.FieldLastCheckinTime:
		return m.LastCheckinTime()
	case user.FieldCurrentCheckinStreak:
		return m.CurrentCheckinStreak()
	case user.FieldLongestCheckinStreak:
		return m.LongestCheckinStreak()
	case user.FieldLanguage:
		return m.Language()
	case user.FieldTimezone:
		return m.Timezone()
	case user.FieldTheme:
		return m.Theme()
	case user.FieldMobileTheme:
		return m.MobileTheme()
	case user.FieldEnableWebNotify:
		return m.EnableWebNotify()
	case user.FieldEnableEmailSubscribe:
		return m.EnableEmailSubscribe()
	case user.FieldPublicPoints:
		return m.PublicPoints()
	case user.FieldPublicFollowers:
		return m.PublicFollowers()
	case user.FieldPublicArticles:
		return m.PublicArticles()
	case user.FieldPublicComments:
		return m.PublicComments()
	case user.FieldPublicOnlineStatus:
		return m.PublicOnlineStatus()
	case user.FieldCountry:
		return m.Country()
	case user.FieldProvince:
		return m.Province()
	case user.FieldCity:
		return m.City()
	case user.FieldPublicLocation:
		return m.PublicLocation()
	case user.FieldTwofaSecret:
		return m.TwofaSecret()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldURL:
		return m.OldURL(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case user.FieldIntroduction:
		return m.OldIntroduction(ctx)
	case user.FieldMbti:
		return m.OldMbti(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldGroupName:
		return m.OldGroupName(ctx)
	case user.FieldFollowCount:
		return m.OldFollowCount(ctx)
	case user.FieldFollowerCount:
		return m.OldFollowerCount(ctx)
	case user.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	case user.FieldLastLoginIP:
		return m.OldLastLoginIP(ctx)
	case user.FieldOnlineMinutes:
		return m.OldOnlineMinutes(ctx)
	case user.FieldLastCheckinTime:
		return m.OldLastCheckinTime(ctx)
	case user.FieldCurrentCheckinStreak:
		return m.OldCurrentCheckinStreak(ctx)
	case user.FieldLongestCheckinStreak:
		return m.OldLongestCheckinStreak(ctx)
	case user.FieldLanguage:
		return m.OldLanguage(ctx)
	case user.FieldTimezone:
		return m.OldTimezone(ctx)
	case user.FieldTheme:
		return m.OldTheme(ctx)
	case user.FieldMobileTheme:
		return m.OldMobileTheme(ctx)
	case user.FieldEnableWebNotify:
		return m.OldEnableWebNotify(ctx)
	case user.FieldEnableEmailSubscribe:
		return m.OldEnableEmailSubscribe(ctx)
	case user.FieldPublicPoints:
		return m.OldPublicPoints(ctx)
	case user.FieldPublicFollowers:
		return m.OldPublicFollowers(ctx)
	case user.FieldPublicArticles:
		return m.OldPublicArticles(ctx)
	case user.FieldPublicComments:
		return m.OldPublicComments(ctx)
	case user.FieldPublicOnlineStatus:
		return m.OldPublicOnlineStatus(ctx)
	case user.FieldCountry:
		return m.OldCountry(ctx)
	case user.FieldProvince:
		return m.OldProvince(ctx)
	case user.FieldCity:
		return m.OldCity(ctx)
	case user.FieldPublicLocation:
		return m.OldPublicLocation(ctx)
	case user.FieldTwofaSecret:
		return m.OldTwofaSecret(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case user.FieldIntroduction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntroduction(v)
		return nil
	case user.FieldMbti:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMbti(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldGroupName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupName(v)
		return nil
	case user.FieldFollowCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowCount(v)
		return nil
	case user.FieldFollowerCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowerCount(v)
		return nil
	case user.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	case user.FieldLastLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginIP(v)
		return nil
	case user.FieldOnlineMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnlineMinutes(v)
		return nil
	case user.FieldLastCheckinTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastCheckinTime(v)
		return nil
	case user.FieldCurrentCheckinStreak:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentCheckinStreak(v)
		return nil
	case user.FieldLongestCheckinStreak:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongestCheckinStreak(v)
		return nil
	case user.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case user.FieldTimezone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimezone(v)
		return nil
	case user.FieldTheme:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTheme(v)
		return nil
	case user.FieldMobileTheme:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobileTheme(v)
		return nil
	case user.FieldEnableWebNotify:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnableWebNotify(v)
		return nil
	case user.FieldEnableEmailSubscribe:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnableEmailSubscribe(v)
		return nil
	case user.FieldPublicPoints:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicPoints(v)
		return nil
	case user.FieldPublicFollowers:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicFollowers(v)
		return nil
	case user.FieldPublicArticles:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicArticles(v)
		return nil
	case user.FieldPublicComments:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicComments(v)
		return nil
	case user.FieldPublicOnlineStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicOnlineStatus(v)
		return nil
	case user.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case user.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case user.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case user.FieldPublicLocation:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicLocation(v)
		return nil
	case user.FieldTwofaSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwofaSecret(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.addfollow_count != nil {
		fields = append(fields, user.FieldFollowCount)
	}
	if m.addfollower_count != nil {
		fields = append(fields, user.FieldFollowerCount)
	}
	if m.addonline_minutes != nil {
		fields = append(fields, user.FieldOnlineMinutes)
	}
	if m.addcurrent_checkin_streak != nil {
		fields = append(fields, user.FieldCurrentCheckinStreak)
	}
	if m.addlongest_checkin_streak != nil {
		fields = append(fields, user.FieldLongestCheckinStreak)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStatus:
		return m.AddedStatus()
	case user.FieldFollowCount:
		return m.AddedFollowCount()
	case user.FieldFollowerCount:
		return m.AddedFollowerCount()
	case user.FieldOnlineMinutes:
		return m.AddedOnlineMinutes()
	case user.FieldCurrentCheckinStreak:
		return m.AddedCurrentCheckinStreak()
	case user.FieldLongestCheckinStreak:
		return m.AddedLongestCheckinStreak()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case user.FieldFollowCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowCount(v)
		return nil
	case user.FieldFollowerCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowerCount(v)
		return nil
	case user.FieldOnlineMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOnlineMinutes(v)
		return nil
	case user.FieldCurrentCheckinStreak:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentCheckinStreak(v)
		return nil
	case user.FieldLongestCheckinStreak:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongestCheckinStreak(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldNickname) {
		fields = append(fields, user.FieldNickname)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldURL) {
		fields = append(fields, user.FieldURL)
	}
	if m.FieldCleared(user.FieldAvatarURL) {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.FieldCleared(user.FieldIntroduction) {
		fields = append(fields, user.FieldIntroduction)
	}
	if m.FieldCleared(user.FieldMbti) {
		fields = append(fields, user.FieldMbti)
	}
	if m.FieldCleared(user.FieldGroupName) {
		fields = append(fields, user.FieldGroupName)
	}
	if m.FieldCleared(user.FieldLastLoginTime) {
		fields = append(fields, user.FieldLastLoginTime)
	}
	if m.FieldCleared(user.FieldLastLoginIP) {
		fields = append(fields, user.FieldLastLoginIP)
	}
	if m.FieldCleared(user.FieldLastCheckinTime) {
		fields = append(fields, user.FieldLastCheckinTime)
	}
	if m.FieldCleared(user.FieldCountry) {
		fields = append(fields, user.FieldCountry)
	}
	if m.FieldCleared(user.FieldProvince) {
		fields = append(fields, user.FieldProvince)
	}
	if m.FieldCleared(user.FieldCity) {
		fields = append(fields, user.FieldCity)
	}
	if m.FieldCleared(user.FieldTwofaSecret) {
		fields = append(fields, user.FieldTwofaSecret)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldNickname:
		m.ClearNickname()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldURL:
		m.ClearURL()
		return nil
	case user.FieldAvatarURL:
		m.ClearAvatarURL()
		return nil
	case user.FieldIntroduction:
		m.ClearIntroduction()
		return nil
	case user.FieldMbti:
		m.ClearMbti()
		return nil
	case user.FieldGroupName:
		m.ClearGroupName()
		return nil
	case user.FieldLastLoginTime:
		m.ClearLastLoginTime()
		return nil
	case user.FieldLastLoginIP:
		m.ClearLastLoginIP()
		return nil
	case user.FieldLastCheckinTime:
		m.ClearLastCheckinTime()
		return nil
	case user.FieldCountry:
		m.ClearCountry()
		return nil
	case user.FieldProvince:
		m.ClearProvince()
		return nil
	case user.FieldCity:
		m.ClearCity()
		return nil
	case user.FieldTwofaSecret:
		m.ClearTwofaSecret()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldURL:
		m.ResetURL()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case user.FieldIntroduction:
		m.ResetIntroduction()
		return nil
	case user.FieldMbti:
		m.ResetMbti()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldGroupName:
		m.ResetGroupName()
		return nil
	case user.FieldFollowCount:
		m.ResetFollowCount()
		return nil
	case user.FieldFollowerCount:
		m.ResetFollowerCount()
		return nil
	case user.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	case user.FieldLastLoginIP:
		m.ResetLastLoginIP()
		return nil
	case user.FieldOnlineMinutes:
		m.ResetOnlineMinutes()
		return nil
	case user.FieldLastCheckinTime:
		m.ResetLastCheckinTime()
		return nil
	case user.FieldCurrentCheckinStreak:
		m.ResetCurrentCheckinStreak()
		return nil
	case user.FieldLongestCheckinStreak:
		m.ResetLongestCheckinStreak()
		return nil
	case user.FieldLanguage:
		m.ResetLanguage()
		return nil
	case user.FieldTimezone:
		m.ResetTimezone()
		return nil
	case user.FieldTheme:
		m.ResetTheme()
		return nil
	case user.FieldMobileTheme:
		m.ResetMobileTheme()
		return nil
	case user.FieldEnableWebNotify:
		m.ResetEnableWebNotify()
		return nil
	case user.FieldEnableEmailSubscribe:
		m.ResetEnableEmailSubscribe()
		return nil
	case user.FieldPublicPoints:
		m.ResetPublicPoints()
		return nil
	case user.FieldPublicFollowers:
		m.ResetPublicFollowers()
		return nil
	case user.FieldPublicArticles:
		m.ResetPublicArticles()
		return nil
	case user.FieldPublicComments:
		m.ResetPublicComments()
		return nil
	case user.FieldPublicOnlineStatus:
		m.ResetPublicOnlineStatus()
		return nil
	case user.FieldCountry:
		m.ResetCountry()
		return nil
	case user.FieldProvince:
		m.ResetProvince()
		return nil
	case user.FieldCity:
		m.ResetCity()
		return nil
	case user.FieldPublicLocation:
		m.ResetPublicLocation()
		return nil
	case user.FieldTwofaSecret:
		m.ResetTwofaSecret()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
