// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"
	"user/internal/data/ent/gen/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 用户名
	Name string `json:"name,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 密码
	Password string `json:"-"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 用户个人主页链接
	URL string `json:"url,omitempty"`
	// 头像URL
	AvatarURL string `json:"avatar_url,omitempty"`
	// 个人简介
	Introduction string `json:"introduction,omitempty"`
	// 用户 MBTI 类型
	Mbti string `json:"mbti,omitempty"`
	// 用户状态：0-正常，1-封禁，2-注销
	Status int32 `json:"status,omitempty"`
	// 用户组名称
	GroupName string `json:"group_name,omitempty"`
	// 关注数
	FollowCount int32 `json:"follow_count,omitempty"`
	// 粉丝数
	FollowerCount int32 `json:"follower_count,omitempty"`
	// 最近登录时间
	LastLoginTime *time.Time `json:"last_login_time,omitempty"`
	// 最近登录IP
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// 在线总时长（分钟）
	OnlineMinutes int32 `json:"online_minutes,omitempty"`
	// 最近签到时间
	LastCheckinTime *time.Time `json:"last_checkin_time,omitempty"`
	// 当前连续签到天数
	CurrentCheckinStreak int32 `json:"current_checkin_streak,omitempty"`
	// 最长连续签到天数
	LongestCheckinStreak int32 `json:"longest_checkin_streak,omitempty"`
	// 用户语言
	Language string `json:"language,omitempty"`
	// 时区
	Timezone string `json:"timezone,omitempty"`
	// 皮肤主题
	Theme string `json:"theme,omitempty"`
	// 移动端皮肤主题
	MobileTheme string `json:"mobile_theme,omitempty"`
	// 启用Web通知
	EnableWebNotify bool `json:"enable_web_notify,omitempty"`
	// 启用邮件订阅
	EnableEmailSubscribe bool `json:"enable_email_subscribe,omitempty"`
	// 是否公开积分榜
	PublicPoints bool `json:"public_points,omitempty"`
	// 是否公开粉丝列表
	PublicFollowers bool `json:"public_followers,omitempty"`
	// 是否公开帖子列表
	PublicArticles bool `json:"public_articles,omitempty"`
	// 是否公开评论列表
	PublicComments bool `json:"public_comments,omitempty"`
	// 是否公开在线状态
	PublicOnlineStatus bool `json:"public_online_status,omitempty"`
	// 所在国家
	Country string `json:"country,omitempty"`
	// 所在省份
	Province string `json:"province,omitempty"`
	// 所在城市
	City string `json:"city,omitempty"`
	// 是否公开地理位置
	PublicLocation bool `json:"public_location,omitempty"`
	// 二步验证Secret
	TwofaSecret string `json:"twofa_secret,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldEnableWebNotify, user.FieldEnableEmailSubscribe, user.FieldPublicPoints, user.FieldPublicFollowers, user.FieldPublicArticles, user.FieldPublicComments, user.FieldPublicOnlineStatus, user.FieldPublicLocation:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldStatus, user.FieldFollowCount, user.FieldFollowerCount, user.FieldOnlineMinutes, user.FieldCurrentCheckinStreak, user.FieldLongestCheckinStreak:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldNickname, user.FieldPassword, user.FieldEmail, user.FieldPhone, user.FieldURL, user.FieldAvatarURL, user.FieldIntroduction, user.FieldMbti, user.FieldGroupName, user.FieldLastLoginIP, user.FieldLanguage, user.FieldTimezone, user.FieldTheme, user.FieldMobileTheme, user.FieldCountry, user.FieldProvince, user.FieldCity, user.FieldTwofaSecret:
			values[i] = new(sql.NullString)
		case user.FieldLastLoginTime, user.FieldLastCheckinTime, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				_m.Nickname = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				_m.Phone = value.String
			}
		case user.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				_m.AvatarURL = value.String
			}
		case user.FieldIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduction", values[i])
			} else if value.Valid {
				_m.Introduction = value.String
			}
		case user.FieldMbti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mbti", values[i])
			} else if value.Valid {
				_m.Mbti = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = int32(value.Int64)
			}
		case user.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				_m.GroupName = value.String
			}
		case user.FieldFollowCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follow_count", values[i])
			} else if value.Valid {
				_m.FollowCount = int32(value.Int64)
			}
		case user.FieldFollowerCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follower_count", values[i])
			} else if value.Valid {
				_m.FollowerCount = int32(value.Int64)
			}
		case user.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				_m.LastLoginTime = new(time.Time)
				*_m.LastLoginTime = value.Time
			}
		case user.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				_m.LastLoginIP = value.String
			}
		case user.FieldOnlineMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field online_minutes", values[i])
			} else if value.Valid {
				_m.OnlineMinutes = int32(value.Int64)
			}
		case user.FieldLastCheckinTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_checkin_time", values[i])
			} else if value.Valid {
				_m.LastCheckinTime = new(time.Time)
				*_m.LastCheckinTime = value.Time
			}
		case user.FieldCurrentCheckinStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_checkin_streak", values[i])
			} else if value.Valid {
				_m.CurrentCheckinStreak = int32(value.Int64)
			}
		case user.FieldLongestCheckinStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field longest_checkin_streak", values[i])
			} else if value.Valid {
				_m.LongestCheckinStreak = int32(value.Int64)
			}
		case user.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				_m.Language = value.String
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				_m.Timezone = value.String
			}
		case user.FieldTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme", values[i])
			} else if value.Valid {
				_m.Theme = value.String
			}
		case user.FieldMobileTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_theme", values[i])
			} else if value.Valid {
				_m.MobileTheme = value.String
			}
		case user.FieldEnableWebNotify:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_web_notify", values[i])
			} else if value.Valid {
				_m.EnableWebNotify = value.Bool
			}
		case user.FieldEnableEmailSubscribe:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_email_subscribe", values[i])
			} else if value.Valid {
				_m.EnableEmailSubscribe = value.Bool
			}
		case user.FieldPublicPoints:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public_points", values[i])
			} else if value.Valid {
				_m.PublicPoints = value.Bool
			}
		case user.FieldPublicFollowers:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public_followers", values[i])
			} else if value.Valid {
				_m.PublicFollowers = value.Bool
			}
		case user.FieldPublicArticles:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public_articles", values[i])
			} else if value.Valid {
				_m.PublicArticles = value.Bool
			}
		case user.FieldPublicComments:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public_comments", values[i])
			} else if value.Valid {
				_m.PublicComments = value.Bool
			}
		case user.FieldPublicOnlineStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public_online_status", values[i])
			} else if value.Valid {
				_m.PublicOnlineStatus = value.Bool
			}
		case user.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				_m.Country = value.String
			}
		case user.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				_m.Province = value.String
			}
		case user.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				_m.City = value.String
			}
		case user.FieldPublicLocation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public_location", values[i])
			} else if value.Valid {
				_m.PublicLocation = value.Bool
			}
		case user.FieldTwofaSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twofa_secret", values[i])
			} else if value.Valid {
				_m.TwofaSecret = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = new(time.Time)
				*_m.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = new(time.Time)
				*_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(_m.Nickname)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(_m.Phone)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(_m.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("introduction=")
	builder.WriteString(_m.Introduction)
	builder.WriteString(", ")
	builder.WriteString("mbti=")
	builder.WriteString(_m.Mbti)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("group_name=")
	builder.WriteString(_m.GroupName)
	builder.WriteString(", ")
	builder.WriteString("follow_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.FollowCount))
	builder.WriteString(", ")
	builder.WriteString("follower_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.FollowerCount))
	builder.WriteString(", ")
	if v := _m.LastLoginTime; v != nil {
		builder.WriteString("last_login_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("last_login_ip=")
	builder.WriteString(_m.LastLoginIP)
	builder.WriteString(", ")
	builder.WriteString("online_minutes=")
	builder.WriteString(fmt.Sprintf("%v", _m.OnlineMinutes))
	builder.WriteString(", ")
	if v := _m.LastCheckinTime; v != nil {
		builder.WriteString("last_checkin_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("current_checkin_streak=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentCheckinStreak))
	builder.WriteString(", ")
	builder.WriteString("longest_checkin_streak=")
	builder.WriteString(fmt.Sprintf("%v", _m.LongestCheckinStreak))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(_m.Language)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(_m.Timezone)
	builder.WriteString(", ")
	builder.WriteString("theme=")
	builder.WriteString(_m.Theme)
	builder.WriteString(", ")
	builder.WriteString("mobile_theme=")
	builder.WriteString(_m.MobileTheme)
	builder.WriteString(", ")
	builder.WriteString("enable_web_notify=")
	builder.WriteString(fmt.Sprintf("%v", _m.EnableWebNotify))
	builder.WriteString(", ")
	builder.WriteString("enable_email_subscribe=")
	builder.WriteString(fmt.Sprintf("%v", _m.EnableEmailSubscribe))
	builder.WriteString(", ")
	builder.WriteString("public_points=")
	builder.WriteString(fmt.Sprintf("%v", _m.PublicPoints))
	builder.WriteString(", ")
	builder.WriteString("public_followers=")
	builder.WriteString(fmt.Sprintf("%v", _m.PublicFollowers))
	builder.WriteString(", ")
	builder.WriteString("public_articles=")
	builder.WriteString(fmt.Sprintf("%v", _m.PublicArticles))
	builder.WriteString(", ")
	builder.WriteString("public_comments=")
	builder.WriteString(fmt.Sprintf("%v", _m.PublicComments))
	builder.WriteString(", ")
	builder.WriteString("public_online_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.PublicOnlineStatus))
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(_m.Country)
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(_m.Province)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(_m.City)
	builder.WriteString(", ")
	builder.WriteString("public_location=")
	builder.WriteString(fmt.Sprintf("%v", _m.PublicLocation))
	builder.WriteString(", ")
	builder.WriteString("twofa_secret=")
	builder.WriteString(_m.TwofaSecret)
	builder.WriteString(", ")
	if v := _m.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
