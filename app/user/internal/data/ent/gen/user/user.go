// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldIntroduction holds the string denoting the introduction field in the database.
	FieldIntroduction = "introduction"
	// FieldMbti holds the string denoting the mbti field in the database.
	FieldMbti = "mbti"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldGroupName holds the string denoting the group_name field in the database.
	FieldGroupName = "group_name"
	// FieldFollowCount holds the string denoting the follow_count field in the database.
	FieldFollowCount = "follow_count"
	// FieldFollowerCount holds the string denoting the follower_count field in the database.
	FieldFollowerCount = "follower_count"
	// FieldLastLoginTime holds the string denoting the last_login_time field in the database.
	FieldLastLoginTime = "last_login_time"
	// FieldLastLoginIP holds the string denoting the last_login_ip field in the database.
	FieldLastLoginIP = "last_login_ip"
	// FieldOnlineMinutes holds the string denoting the online_minutes field in the database.
	FieldOnlineMinutes = "online_minutes"
	// FieldLastCheckinTime holds the string denoting the last_checkin_time field in the database.
	FieldLastCheckinTime = "last_checkin_time"
	// FieldCurrentCheckinStreak holds the string denoting the current_checkin_streak field in the database.
	FieldCurrentCheckinStreak = "current_checkin_streak"
	// FieldLongestCheckinStreak holds the string denoting the longest_checkin_streak field in the database.
	FieldLongestCheckinStreak = "longest_checkin_streak"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldTheme holds the string denoting the theme field in the database.
	FieldTheme = "theme"
	// FieldMobileTheme holds the string denoting the mobile_theme field in the database.
	FieldMobileTheme = "mobile_theme"
	// FieldEnableWebNotify holds the string denoting the enable_web_notify field in the database.
	FieldEnableWebNotify = "enable_web_notify"
	// FieldEnableEmailSubscribe holds the string denoting the enable_email_subscribe field in the database.
	FieldEnableEmailSubscribe = "enable_email_subscribe"
	// FieldPublicPoints holds the string denoting the public_points field in the database.
	FieldPublicPoints = "public_points"
	// FieldPublicFollowers holds the string denoting the public_followers field in the database.
	FieldPublicFollowers = "public_followers"
	// FieldPublicArticles holds the string denoting the public_articles field in the database.
	FieldPublicArticles = "public_articles"
	// FieldPublicComments holds the string denoting the public_comments field in the database.
	FieldPublicComments = "public_comments"
	// FieldPublicOnlineStatus holds the string denoting the public_online_status field in the database.
	FieldPublicOnlineStatus = "public_online_status"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldPublicLocation holds the string denoting the public_location field in the database.
	FieldPublicLocation = "public_location"
	// FieldTwofaSecret holds the string denoting the twofa_secret field in the database.
	FieldTwofaSecret = "twofa_secret"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNickname,
	FieldPassword,
	FieldEmail,
	FieldPhone,
	FieldURL,
	FieldAvatarURL,
	FieldIntroduction,
	FieldMbti,
	FieldStatus,
	FieldGroupName,
	FieldFollowCount,
	FieldFollowerCount,
	FieldLastLoginTime,
	FieldLastLoginIP,
	FieldOnlineMinutes,
	FieldLastCheckinTime,
	FieldCurrentCheckinStreak,
	FieldLongestCheckinStreak,
	FieldLanguage,
	FieldTimezone,
	FieldTheme,
	FieldMobileTheme,
	FieldEnableWebNotify,
	FieldEnableEmailSubscribe,
	FieldPublicPoints,
	FieldPublicFollowers,
	FieldPublicArticles,
	FieldPublicComments,
	FieldPublicOnlineStatus,
	FieldCountry,
	FieldProvince,
	FieldCity,
	FieldPublicLocation,
	FieldTwofaSecret,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int32
	// DefaultFollowCount holds the default value on creation for the "follow_count" field.
	DefaultFollowCount int32
	// DefaultFollowerCount holds the default value on creation for the "follower_count" field.
	DefaultFollowerCount int32
	// DefaultOnlineMinutes holds the default value on creation for the "online_minutes" field.
	DefaultOnlineMinutes int32
	// DefaultCurrentCheckinStreak holds the default value on creation for the "current_checkin_streak" field.
	DefaultCurrentCheckinStreak int32
	// DefaultLongestCheckinStreak holds the default value on creation for the "longest_checkin_streak" field.
	DefaultLongestCheckinStreak int32
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultTimezone holds the default value on creation for the "timezone" field.
	DefaultTimezone string
	// DefaultTheme holds the default value on creation for the "theme" field.
	DefaultTheme string
	// DefaultMobileTheme holds the default value on creation for the "mobile_theme" field.
	DefaultMobileTheme string
	// DefaultEnableWebNotify holds the default value on creation for the "enable_web_notify" field.
	DefaultEnableWebNotify bool
	// DefaultEnableEmailSubscribe holds the default value on creation for the "enable_email_subscribe" field.
	DefaultEnableEmailSubscribe bool
	// DefaultPublicPoints holds the default value on creation for the "public_points" field.
	DefaultPublicPoints bool
	// DefaultPublicFollowers holds the default value on creation for the "public_followers" field.
	DefaultPublicFollowers bool
	// DefaultPublicArticles holds the default value on creation for the "public_articles" field.
	DefaultPublicArticles bool
	// DefaultPublicComments holds the default value on creation for the "public_comments" field.
	DefaultPublicComments bool
	// DefaultPublicOnlineStatus holds the default value on creation for the "public_online_status" field.
	DefaultPublicOnlineStatus bool
	// DefaultPublicLocation holds the default value on creation for the "public_location" field.
	DefaultPublicLocation bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByIntroduction orders the results by the introduction field.
func ByIntroduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroduction, opts...).ToFunc()
}

// ByMbti orders the results by the mbti field.
func ByMbti(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMbti, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByGroupName orders the results by the group_name field.
func ByGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupName, opts...).ToFunc()
}

// ByFollowCount orders the results by the follow_count field.
func ByFollowCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowCount, opts...).ToFunc()
}

// ByFollowerCount orders the results by the follower_count field.
func ByFollowerCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowerCount, opts...).ToFunc()
}

// ByLastLoginTime orders the results by the last_login_time field.
func ByLastLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginTime, opts...).ToFunc()
}

// ByLastLoginIP orders the results by the last_login_ip field.
func ByLastLoginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginIP, opts...).ToFunc()
}

// ByOnlineMinutes orders the results by the online_minutes field.
func ByOnlineMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnlineMinutes, opts...).ToFunc()
}

// ByLastCheckinTime orders the results by the last_checkin_time field.
func ByLastCheckinTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastCheckinTime, opts...).ToFunc()
}

// ByCurrentCheckinStreak orders the results by the current_checkin_streak field.
func ByCurrentCheckinStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentCheckinStreak, opts...).ToFunc()
}

// ByLongestCheckinStreak orders the results by the longest_checkin_streak field.
func ByLongestCheckinStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongestCheckinStreak, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByTheme orders the results by the theme field.
func ByTheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTheme, opts...).ToFunc()
}

// ByMobileTheme orders the results by the mobile_theme field.
func ByMobileTheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileTheme, opts...).ToFunc()
}

// ByEnableWebNotify orders the results by the enable_web_notify field.
func ByEnableWebNotify(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableWebNotify, opts...).ToFunc()
}

// ByEnableEmailSubscribe orders the results by the enable_email_subscribe field.
func ByEnableEmailSubscribe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableEmailSubscribe, opts...).ToFunc()
}

// ByPublicPoints orders the results by the public_points field.
func ByPublicPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicPoints, opts...).ToFunc()
}

// ByPublicFollowers orders the results by the public_followers field.
func ByPublicFollowers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicFollowers, opts...).ToFunc()
}

// ByPublicArticles orders the results by the public_articles field.
func ByPublicArticles(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicArticles, opts...).ToFunc()
}

// ByPublicComments orders the results by the public_comments field.
func ByPublicComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicComments, opts...).ToFunc()
}

// ByPublicOnlineStatus orders the results by the public_online_status field.
func ByPublicOnlineStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicOnlineStatus, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByPublicLocation orders the results by the public_location field.
func ByPublicLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicLocation, opts...).ToFunc()
}

// ByTwofaSecret orders the results by the twofa_secret field.
func ByTwofaSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwofaSecret, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
