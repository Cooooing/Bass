// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
	"user/internal/data/ent/gen/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldURL, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// Introduction applies equality check predicate on the "introduction" field. It's identical to IntroductionEQ.
func Introduction(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIntroduction, v))
}

// Mbti applies equality check predicate on the "mbti" field. It's identical to MbtiEQ.
func Mbti(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMbti, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// GroupName applies equality check predicate on the "group_name" field. It's identical to GroupNameEQ.
func GroupName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGroupName, v))
}

// FollowCount applies equality check predicate on the "follow_count" field. It's identical to FollowCountEQ.
func FollowCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowCount, v))
}

// FollowerCount applies equality check predicate on the "follower_count" field. It's identical to FollowerCountEQ.
func FollowerCount(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowerCount, v))
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginIP, v))
}

// OnlineMinutes applies equality check predicate on the "online_minutes" field. It's identical to OnlineMinutesEQ.
func OnlineMinutes(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnlineMinutes, v))
}

// LastCheckinTime applies equality check predicate on the "last_checkin_time" field. It's identical to LastCheckinTimeEQ.
func LastCheckinTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastCheckinTime, v))
}

// CurrentCheckinStreak applies equality check predicate on the "current_checkin_streak" field. It's identical to CurrentCheckinStreakEQ.
func CurrentCheckinStreak(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentCheckinStreak, v))
}

// LongestCheckinStreak applies equality check predicate on the "longest_checkin_streak" field. It's identical to LongestCheckinStreakEQ.
func LongestCheckinStreak(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLongestCheckinStreak, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTimezone, v))
}

// Theme applies equality check predicate on the "theme" field. It's identical to ThemeEQ.
func Theme(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTheme, v))
}

// MobileTheme applies equality check predicate on the "mobile_theme" field. It's identical to MobileThemeEQ.
func MobileTheme(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobileTheme, v))
}

// EnableWebNotify applies equality check predicate on the "enable_web_notify" field. It's identical to EnableWebNotifyEQ.
func EnableWebNotify(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnableWebNotify, v))
}

// EnableEmailSubscribe applies equality check predicate on the "enable_email_subscribe" field. It's identical to EnableEmailSubscribeEQ.
func EnableEmailSubscribe(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnableEmailSubscribe, v))
}

// PublicPoints applies equality check predicate on the "public_points" field. It's identical to PublicPointsEQ.
func PublicPoints(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicPoints, v))
}

// PublicFollowers applies equality check predicate on the "public_followers" field. It's identical to PublicFollowersEQ.
func PublicFollowers(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicFollowers, v))
}

// PublicArticles applies equality check predicate on the "public_articles" field. It's identical to PublicArticlesEQ.
func PublicArticles(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicArticles, v))
}

// PublicComments applies equality check predicate on the "public_comments" field. It's identical to PublicCommentsEQ.
func PublicComments(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicComments, v))
}

// PublicOnlineStatus applies equality check predicate on the "public_online_status" field. It's identical to PublicOnlineStatusEQ.
func PublicOnlineStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicOnlineStatus, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountry, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProvince, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// PublicLocation applies equality check predicate on the "public_location" field. It's identical to PublicLocationEQ.
func PublicLocation(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicLocation, v))
}

// TwofaSecret applies equality check predicate on the "twofa_secret" field. It's identical to TwofaSecretEQ.
func TwofaSecret(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwofaSecret, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldURL, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarURL, v))
}

// IntroductionEQ applies the EQ predicate on the "introduction" field.
func IntroductionEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIntroduction, v))
}

// IntroductionNEQ applies the NEQ predicate on the "introduction" field.
func IntroductionNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIntroduction, v))
}

// IntroductionIn applies the In predicate on the "introduction" field.
func IntroductionIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIntroduction, vs...))
}

// IntroductionNotIn applies the NotIn predicate on the "introduction" field.
func IntroductionNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIntroduction, vs...))
}

// IntroductionGT applies the GT predicate on the "introduction" field.
func IntroductionGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIntroduction, v))
}

// IntroductionGTE applies the GTE predicate on the "introduction" field.
func IntroductionGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIntroduction, v))
}

// IntroductionLT applies the LT predicate on the "introduction" field.
func IntroductionLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIntroduction, v))
}

// IntroductionLTE applies the LTE predicate on the "introduction" field.
func IntroductionLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIntroduction, v))
}

// IntroductionContains applies the Contains predicate on the "introduction" field.
func IntroductionContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIntroduction, v))
}

// IntroductionHasPrefix applies the HasPrefix predicate on the "introduction" field.
func IntroductionHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIntroduction, v))
}

// IntroductionHasSuffix applies the HasSuffix predicate on the "introduction" field.
func IntroductionHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIntroduction, v))
}

// IntroductionIsNil applies the IsNil predicate on the "introduction" field.
func IntroductionIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldIntroduction))
}

// IntroductionNotNil applies the NotNil predicate on the "introduction" field.
func IntroductionNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldIntroduction))
}

// IntroductionEqualFold applies the EqualFold predicate on the "introduction" field.
func IntroductionEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIntroduction, v))
}

// IntroductionContainsFold applies the ContainsFold predicate on the "introduction" field.
func IntroductionContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIntroduction, v))
}

// MbtiEQ applies the EQ predicate on the "mbti" field.
func MbtiEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMbti, v))
}

// MbtiNEQ applies the NEQ predicate on the "mbti" field.
func MbtiNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMbti, v))
}

// MbtiIn applies the In predicate on the "mbti" field.
func MbtiIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMbti, vs...))
}

// MbtiNotIn applies the NotIn predicate on the "mbti" field.
func MbtiNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMbti, vs...))
}

// MbtiGT applies the GT predicate on the "mbti" field.
func MbtiGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMbti, v))
}

// MbtiGTE applies the GTE predicate on the "mbti" field.
func MbtiGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMbti, v))
}

// MbtiLT applies the LT predicate on the "mbti" field.
func MbtiLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMbti, v))
}

// MbtiLTE applies the LTE predicate on the "mbti" field.
func MbtiLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMbti, v))
}

// MbtiContains applies the Contains predicate on the "mbti" field.
func MbtiContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMbti, v))
}

// MbtiHasPrefix applies the HasPrefix predicate on the "mbti" field.
func MbtiHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMbti, v))
}

// MbtiHasSuffix applies the HasSuffix predicate on the "mbti" field.
func MbtiHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMbti, v))
}

// MbtiIsNil applies the IsNil predicate on the "mbti" field.
func MbtiIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMbti))
}

// MbtiNotNil applies the NotNil predicate on the "mbti" field.
func MbtiNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMbti))
}

// MbtiEqualFold applies the EqualFold predicate on the "mbti" field.
func MbtiEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMbti, v))
}

// MbtiContainsFold applies the ContainsFold predicate on the "mbti" field.
func MbtiContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMbti, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldStatus, v))
}

// GroupNameEQ applies the EQ predicate on the "group_name" field.
func GroupNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGroupName, v))
}

// GroupNameNEQ applies the NEQ predicate on the "group_name" field.
func GroupNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGroupName, v))
}

// GroupNameIn applies the In predicate on the "group_name" field.
func GroupNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGroupName, vs...))
}

// GroupNameNotIn applies the NotIn predicate on the "group_name" field.
func GroupNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGroupName, vs...))
}

// GroupNameGT applies the GT predicate on the "group_name" field.
func GroupNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGroupName, v))
}

// GroupNameGTE applies the GTE predicate on the "group_name" field.
func GroupNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGroupName, v))
}

// GroupNameLT applies the LT predicate on the "group_name" field.
func GroupNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGroupName, v))
}

// GroupNameLTE applies the LTE predicate on the "group_name" field.
func GroupNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGroupName, v))
}

// GroupNameContains applies the Contains predicate on the "group_name" field.
func GroupNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGroupName, v))
}

// GroupNameHasPrefix applies the HasPrefix predicate on the "group_name" field.
func GroupNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGroupName, v))
}

// GroupNameHasSuffix applies the HasSuffix predicate on the "group_name" field.
func GroupNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGroupName, v))
}

// GroupNameIsNil applies the IsNil predicate on the "group_name" field.
func GroupNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGroupName))
}

// GroupNameNotNil applies the NotNil predicate on the "group_name" field.
func GroupNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGroupName))
}

// GroupNameEqualFold applies the EqualFold predicate on the "group_name" field.
func GroupNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGroupName, v))
}

// GroupNameContainsFold applies the ContainsFold predicate on the "group_name" field.
func GroupNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGroupName, v))
}

// FollowCountEQ applies the EQ predicate on the "follow_count" field.
func FollowCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowCount, v))
}

// FollowCountNEQ applies the NEQ predicate on the "follow_count" field.
func FollowCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowCount, v))
}

// FollowCountIn applies the In predicate on the "follow_count" field.
func FollowCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowCount, vs...))
}

// FollowCountNotIn applies the NotIn predicate on the "follow_count" field.
func FollowCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowCount, vs...))
}

// FollowCountGT applies the GT predicate on the "follow_count" field.
func FollowCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowCount, v))
}

// FollowCountGTE applies the GTE predicate on the "follow_count" field.
func FollowCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowCount, v))
}

// FollowCountLT applies the LT predicate on the "follow_count" field.
func FollowCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowCount, v))
}

// FollowCountLTE applies the LTE predicate on the "follow_count" field.
func FollowCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowCount, v))
}

// FollowerCountEQ applies the EQ predicate on the "follower_count" field.
func FollowerCountEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFollowerCount, v))
}

// FollowerCountNEQ applies the NEQ predicate on the "follower_count" field.
func FollowerCountNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFollowerCount, v))
}

// FollowerCountIn applies the In predicate on the "follower_count" field.
func FollowerCountIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldFollowerCount, vs...))
}

// FollowerCountNotIn applies the NotIn predicate on the "follower_count" field.
func FollowerCountNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFollowerCount, vs...))
}

// FollowerCountGT applies the GT predicate on the "follower_count" field.
func FollowerCountGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldFollowerCount, v))
}

// FollowerCountGTE applies the GTE predicate on the "follower_count" field.
func FollowerCountGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFollowerCount, v))
}

// FollowerCountLT applies the LT predicate on the "follower_count" field.
func FollowerCountLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldFollowerCount, v))
}

// FollowerCountLTE applies the LTE predicate on the "follower_count" field.
func FollowerCountLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFollowerCount, v))
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginTime, v))
}

// LastLoginTimeIsNil applies the IsNil predicate on the "last_login_time" field.
func LastLoginTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginTime))
}

// LastLoginTimeNotNil applies the NotNil predicate on the "last_login_time" field.
func LastLoginTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginTime))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// OnlineMinutesEQ applies the EQ predicate on the "online_minutes" field.
func OnlineMinutesEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnlineMinutes, v))
}

// OnlineMinutesNEQ applies the NEQ predicate on the "online_minutes" field.
func OnlineMinutesNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOnlineMinutes, v))
}

// OnlineMinutesIn applies the In predicate on the "online_minutes" field.
func OnlineMinutesIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldOnlineMinutes, vs...))
}

// OnlineMinutesNotIn applies the NotIn predicate on the "online_minutes" field.
func OnlineMinutesNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOnlineMinutes, vs...))
}

// OnlineMinutesGT applies the GT predicate on the "online_minutes" field.
func OnlineMinutesGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldOnlineMinutes, v))
}

// OnlineMinutesGTE applies the GTE predicate on the "online_minutes" field.
func OnlineMinutesGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOnlineMinutes, v))
}

// OnlineMinutesLT applies the LT predicate on the "online_minutes" field.
func OnlineMinutesLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldOnlineMinutes, v))
}

// OnlineMinutesLTE applies the LTE predicate on the "online_minutes" field.
func OnlineMinutesLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOnlineMinutes, v))
}

// LastCheckinTimeEQ applies the EQ predicate on the "last_checkin_time" field.
func LastCheckinTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastCheckinTime, v))
}

// LastCheckinTimeNEQ applies the NEQ predicate on the "last_checkin_time" field.
func LastCheckinTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastCheckinTime, v))
}

// LastCheckinTimeIn applies the In predicate on the "last_checkin_time" field.
func LastCheckinTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastCheckinTime, vs...))
}

// LastCheckinTimeNotIn applies the NotIn predicate on the "last_checkin_time" field.
func LastCheckinTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastCheckinTime, vs...))
}

// LastCheckinTimeGT applies the GT predicate on the "last_checkin_time" field.
func LastCheckinTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastCheckinTime, v))
}

// LastCheckinTimeGTE applies the GTE predicate on the "last_checkin_time" field.
func LastCheckinTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastCheckinTime, v))
}

// LastCheckinTimeLT applies the LT predicate on the "last_checkin_time" field.
func LastCheckinTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastCheckinTime, v))
}

// LastCheckinTimeLTE applies the LTE predicate on the "last_checkin_time" field.
func LastCheckinTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastCheckinTime, v))
}

// LastCheckinTimeIsNil applies the IsNil predicate on the "last_checkin_time" field.
func LastCheckinTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastCheckinTime))
}

// LastCheckinTimeNotNil applies the NotNil predicate on the "last_checkin_time" field.
func LastCheckinTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastCheckinTime))
}

// CurrentCheckinStreakEQ applies the EQ predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentCheckinStreak, v))
}

// CurrentCheckinStreakNEQ applies the NEQ predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCurrentCheckinStreak, v))
}

// CurrentCheckinStreakIn applies the In predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldCurrentCheckinStreak, vs...))
}

// CurrentCheckinStreakNotIn applies the NotIn predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCurrentCheckinStreak, vs...))
}

// CurrentCheckinStreakGT applies the GT predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldCurrentCheckinStreak, v))
}

// CurrentCheckinStreakGTE applies the GTE predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCurrentCheckinStreak, v))
}

// CurrentCheckinStreakLT applies the LT predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldCurrentCheckinStreak, v))
}

// CurrentCheckinStreakLTE applies the LTE predicate on the "current_checkin_streak" field.
func CurrentCheckinStreakLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCurrentCheckinStreak, v))
}

// LongestCheckinStreakEQ applies the EQ predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLongestCheckinStreak, v))
}

// LongestCheckinStreakNEQ applies the NEQ predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLongestCheckinStreak, v))
}

// LongestCheckinStreakIn applies the In predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldLongestCheckinStreak, vs...))
}

// LongestCheckinStreakNotIn applies the NotIn predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLongestCheckinStreak, vs...))
}

// LongestCheckinStreakGT applies the GT predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldLongestCheckinStreak, v))
}

// LongestCheckinStreakGTE applies the GTE predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLongestCheckinStreak, v))
}

// LongestCheckinStreakLT applies the LT predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldLongestCheckinStreak, v))
}

// LongestCheckinStreakLTE applies the LTE predicate on the "longest_checkin_streak" field.
func LongestCheckinStreakLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLongestCheckinStreak, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLanguage, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTimezone, v))
}

// ThemeEQ applies the EQ predicate on the "theme" field.
func ThemeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTheme, v))
}

// ThemeNEQ applies the NEQ predicate on the "theme" field.
func ThemeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTheme, v))
}

// ThemeIn applies the In predicate on the "theme" field.
func ThemeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTheme, vs...))
}

// ThemeNotIn applies the NotIn predicate on the "theme" field.
func ThemeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTheme, vs...))
}

// ThemeGT applies the GT predicate on the "theme" field.
func ThemeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTheme, v))
}

// ThemeGTE applies the GTE predicate on the "theme" field.
func ThemeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTheme, v))
}

// ThemeLT applies the LT predicate on the "theme" field.
func ThemeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTheme, v))
}

// ThemeLTE applies the LTE predicate on the "theme" field.
func ThemeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTheme, v))
}

// ThemeContains applies the Contains predicate on the "theme" field.
func ThemeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTheme, v))
}

// ThemeHasPrefix applies the HasPrefix predicate on the "theme" field.
func ThemeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTheme, v))
}

// ThemeHasSuffix applies the HasSuffix predicate on the "theme" field.
func ThemeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTheme, v))
}

// ThemeEqualFold applies the EqualFold predicate on the "theme" field.
func ThemeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTheme, v))
}

// ThemeContainsFold applies the ContainsFold predicate on the "theme" field.
func ThemeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTheme, v))
}

// MobileThemeEQ applies the EQ predicate on the "mobile_theme" field.
func MobileThemeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobileTheme, v))
}

// MobileThemeNEQ applies the NEQ predicate on the "mobile_theme" field.
func MobileThemeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMobileTheme, v))
}

// MobileThemeIn applies the In predicate on the "mobile_theme" field.
func MobileThemeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMobileTheme, vs...))
}

// MobileThemeNotIn applies the NotIn predicate on the "mobile_theme" field.
func MobileThemeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMobileTheme, vs...))
}

// MobileThemeGT applies the GT predicate on the "mobile_theme" field.
func MobileThemeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMobileTheme, v))
}

// MobileThemeGTE applies the GTE predicate on the "mobile_theme" field.
func MobileThemeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMobileTheme, v))
}

// MobileThemeLT applies the LT predicate on the "mobile_theme" field.
func MobileThemeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMobileTheme, v))
}

// MobileThemeLTE applies the LTE predicate on the "mobile_theme" field.
func MobileThemeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMobileTheme, v))
}

// MobileThemeContains applies the Contains predicate on the "mobile_theme" field.
func MobileThemeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMobileTheme, v))
}

// MobileThemeHasPrefix applies the HasPrefix predicate on the "mobile_theme" field.
func MobileThemeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMobileTheme, v))
}

// MobileThemeHasSuffix applies the HasSuffix predicate on the "mobile_theme" field.
func MobileThemeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMobileTheme, v))
}

// MobileThemeEqualFold applies the EqualFold predicate on the "mobile_theme" field.
func MobileThemeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMobileTheme, v))
}

// MobileThemeContainsFold applies the ContainsFold predicate on the "mobile_theme" field.
func MobileThemeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMobileTheme, v))
}

// EnableWebNotifyEQ applies the EQ predicate on the "enable_web_notify" field.
func EnableWebNotifyEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnableWebNotify, v))
}

// EnableWebNotifyNEQ applies the NEQ predicate on the "enable_web_notify" field.
func EnableWebNotifyNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEnableWebNotify, v))
}

// EnableEmailSubscribeEQ applies the EQ predicate on the "enable_email_subscribe" field.
func EnableEmailSubscribeEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnableEmailSubscribe, v))
}

// EnableEmailSubscribeNEQ applies the NEQ predicate on the "enable_email_subscribe" field.
func EnableEmailSubscribeNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEnableEmailSubscribe, v))
}

// PublicPointsEQ applies the EQ predicate on the "public_points" field.
func PublicPointsEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicPoints, v))
}

// PublicPointsNEQ applies the NEQ predicate on the "public_points" field.
func PublicPointsNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicPoints, v))
}

// PublicFollowersEQ applies the EQ predicate on the "public_followers" field.
func PublicFollowersEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicFollowers, v))
}

// PublicFollowersNEQ applies the NEQ predicate on the "public_followers" field.
func PublicFollowersNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicFollowers, v))
}

// PublicArticlesEQ applies the EQ predicate on the "public_articles" field.
func PublicArticlesEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicArticles, v))
}

// PublicArticlesNEQ applies the NEQ predicate on the "public_articles" field.
func PublicArticlesNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicArticles, v))
}

// PublicCommentsEQ applies the EQ predicate on the "public_comments" field.
func PublicCommentsEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicComments, v))
}

// PublicCommentsNEQ applies the NEQ predicate on the "public_comments" field.
func PublicCommentsNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicComments, v))
}

// PublicOnlineStatusEQ applies the EQ predicate on the "public_online_status" field.
func PublicOnlineStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicOnlineStatus, v))
}

// PublicOnlineStatusNEQ applies the NEQ predicate on the "public_online_status" field.
func PublicOnlineStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicOnlineStatus, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCountry, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProvince, v))
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProvince, v))
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProvince, v))
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProvince, v))
}

// ProvinceIsNil applies the IsNil predicate on the "province" field.
func ProvinceIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldProvince))
}

// ProvinceNotNil applies the NotNil predicate on the "province" field.
func ProvinceNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldProvince))
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProvince, v))
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProvince, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCity, v))
}

// PublicLocationEQ applies the EQ predicate on the "public_location" field.
func PublicLocationEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPublicLocation, v))
}

// PublicLocationNEQ applies the NEQ predicate on the "public_location" field.
func PublicLocationNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPublicLocation, v))
}

// TwofaSecretEQ applies the EQ predicate on the "twofa_secret" field.
func TwofaSecretEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTwofaSecret, v))
}

// TwofaSecretNEQ applies the NEQ predicate on the "twofa_secret" field.
func TwofaSecretNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTwofaSecret, v))
}

// TwofaSecretIn applies the In predicate on the "twofa_secret" field.
func TwofaSecretIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTwofaSecret, vs...))
}

// TwofaSecretNotIn applies the NotIn predicate on the "twofa_secret" field.
func TwofaSecretNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTwofaSecret, vs...))
}

// TwofaSecretGT applies the GT predicate on the "twofa_secret" field.
func TwofaSecretGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTwofaSecret, v))
}

// TwofaSecretGTE applies the GTE predicate on the "twofa_secret" field.
func TwofaSecretGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTwofaSecret, v))
}

// TwofaSecretLT applies the LT predicate on the "twofa_secret" field.
func TwofaSecretLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTwofaSecret, v))
}

// TwofaSecretLTE applies the LTE predicate on the "twofa_secret" field.
func TwofaSecretLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTwofaSecret, v))
}

// TwofaSecretContains applies the Contains predicate on the "twofa_secret" field.
func TwofaSecretContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTwofaSecret, v))
}

// TwofaSecretHasPrefix applies the HasPrefix predicate on the "twofa_secret" field.
func TwofaSecretHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTwofaSecret, v))
}

// TwofaSecretHasSuffix applies the HasSuffix predicate on the "twofa_secret" field.
func TwofaSecretHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTwofaSecret, v))
}

// TwofaSecretIsNil applies the IsNil predicate on the "twofa_secret" field.
func TwofaSecretIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTwofaSecret))
}

// TwofaSecretNotNil applies the NotNil predicate on the "twofa_secret" field.
func TwofaSecretNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTwofaSecret))
}

// TwofaSecretEqualFold applies the EqualFold predicate on the "twofa_secret" field.
func TwofaSecretEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTwofaSecret, v))
}

// TwofaSecretContainsFold applies the ContainsFold predicate on the "twofa_secret" field.
func TwofaSecretContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTwofaSecret, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
