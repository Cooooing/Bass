// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user/internal/data/ent/gen/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *UserCreate) SetName(v string) *UserCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNickname sets the "nickname" field.
func (_c *UserCreate) SetNickname(v string) *UserCreate {
	_c.mutation.SetNickname(v)
	return _c
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_c *UserCreate) SetNillableNickname(v *string) *UserCreate {
	if v != nil {
		_c.SetNickname(*v)
	}
	return _c
}

// SetPassword sets the "password" field.
func (_c *UserCreate) SetPassword(v string) *UserCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *UserCreate) SetNillableEmail(v *string) *UserCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetPhone sets the "phone" field.
func (_c *UserCreate) SetPhone(v string) *UserCreate {
	_c.mutation.SetPhone(v)
	return _c
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_c *UserCreate) SetNillablePhone(v *string) *UserCreate {
	if v != nil {
		_c.SetPhone(*v)
	}
	return _c
}

// SetURL sets the "url" field.
func (_c *UserCreate) SetURL(v string) *UserCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *UserCreate) SetNillableURL(v *string) *UserCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetAvatarURL sets the "avatar_url" field.
func (_c *UserCreate) SetAvatarURL(v string) *UserCreate {
	_c.mutation.SetAvatarURL(v)
	return _c
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatarURL(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatarURL(*v)
	}
	return _c
}

// SetIntroduction sets the "introduction" field.
func (_c *UserCreate) SetIntroduction(v string) *UserCreate {
	_c.mutation.SetIntroduction(v)
	return _c
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (_c *UserCreate) SetNillableIntroduction(v *string) *UserCreate {
	if v != nil {
		_c.SetIntroduction(*v)
	}
	return _c
}

// SetMbti sets the "mbti" field.
func (_c *UserCreate) SetMbti(v string) *UserCreate {
	_c.mutation.SetMbti(v)
	return _c
}

// SetNillableMbti sets the "mbti" field if the given value is not nil.
func (_c *UserCreate) SetNillableMbti(v *string) *UserCreate {
	if v != nil {
		_c.SetMbti(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *UserCreate) SetStatus(v int) *UserCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *UserCreate) SetNillableStatus(v *int) *UserCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetGroupName sets the "group_name" field.
func (_c *UserCreate) SetGroupName(v string) *UserCreate {
	_c.mutation.SetGroupName(v)
	return _c
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableGroupName(v *string) *UserCreate {
	if v != nil {
		_c.SetGroupName(*v)
	}
	return _c
}

// SetFollowCount sets the "follow_count" field.
func (_c *UserCreate) SetFollowCount(v int) *UserCreate {
	_c.mutation.SetFollowCount(v)
	return _c
}

// SetNillableFollowCount sets the "follow_count" field if the given value is not nil.
func (_c *UserCreate) SetNillableFollowCount(v *int) *UserCreate {
	if v != nil {
		_c.SetFollowCount(*v)
	}
	return _c
}

// SetFollowerCount sets the "follower_count" field.
func (_c *UserCreate) SetFollowerCount(v int) *UserCreate {
	_c.mutation.SetFollowerCount(v)
	return _c
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (_c *UserCreate) SetNillableFollowerCount(v *int) *UserCreate {
	if v != nil {
		_c.SetFollowerCount(*v)
	}
	return _c
}

// SetLastLoginTime sets the "last_login_time" field.
func (_c *UserCreate) SetLastLoginTime(v time.Time) *UserCreate {
	_c.mutation.SetLastLoginTime(v)
	return _c
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginTime(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastLoginTime(*v)
	}
	return _c
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_c *UserCreate) SetLastLoginIP(v string) *UserCreate {
	_c.mutation.SetLastLoginIP(v)
	return _c
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginIP(v *string) *UserCreate {
	if v != nil {
		_c.SetLastLoginIP(*v)
	}
	return _c
}

// SetOnlineMinutes sets the "online_minutes" field.
func (_c *UserCreate) SetOnlineMinutes(v int) *UserCreate {
	_c.mutation.SetOnlineMinutes(v)
	return _c
}

// SetNillableOnlineMinutes sets the "online_minutes" field if the given value is not nil.
func (_c *UserCreate) SetNillableOnlineMinutes(v *int) *UserCreate {
	if v != nil {
		_c.SetOnlineMinutes(*v)
	}
	return _c
}

// SetLastCheckinTime sets the "last_checkin_time" field.
func (_c *UserCreate) SetLastCheckinTime(v time.Time) *UserCreate {
	_c.mutation.SetLastCheckinTime(v)
	return _c
}

// SetNillableLastCheckinTime sets the "last_checkin_time" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastCheckinTime(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastCheckinTime(*v)
	}
	return _c
}

// SetCurrentCheckinStreak sets the "current_checkin_streak" field.
func (_c *UserCreate) SetCurrentCheckinStreak(v int) *UserCreate {
	_c.mutation.SetCurrentCheckinStreak(v)
	return _c
}

// SetNillableCurrentCheckinStreak sets the "current_checkin_streak" field if the given value is not nil.
func (_c *UserCreate) SetNillableCurrentCheckinStreak(v *int) *UserCreate {
	if v != nil {
		_c.SetCurrentCheckinStreak(*v)
	}
	return _c
}

// SetLongestCheckinStreak sets the "longest_checkin_streak" field.
func (_c *UserCreate) SetLongestCheckinStreak(v int) *UserCreate {
	_c.mutation.SetLongestCheckinStreak(v)
	return _c
}

// SetNillableLongestCheckinStreak sets the "longest_checkin_streak" field if the given value is not nil.
func (_c *UserCreate) SetNillableLongestCheckinStreak(v *int) *UserCreate {
	if v != nil {
		_c.SetLongestCheckinStreak(*v)
	}
	return _c
}

// SetLanguage sets the "language" field.
func (_c *UserCreate) SetLanguage(v string) *UserCreate {
	_c.mutation.SetLanguage(v)
	return _c
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_c *UserCreate) SetNillableLanguage(v *string) *UserCreate {
	if v != nil {
		_c.SetLanguage(*v)
	}
	return _c
}

// SetTimezone sets the "timezone" field.
func (_c *UserCreate) SetTimezone(v string) *UserCreate {
	_c.mutation.SetTimezone(v)
	return _c
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_c *UserCreate) SetNillableTimezone(v *string) *UserCreate {
	if v != nil {
		_c.SetTimezone(*v)
	}
	return _c
}

// SetTheme sets the "theme" field.
func (_c *UserCreate) SetTheme(v string) *UserCreate {
	_c.mutation.SetTheme(v)
	return _c
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (_c *UserCreate) SetNillableTheme(v *string) *UserCreate {
	if v != nil {
		_c.SetTheme(*v)
	}
	return _c
}

// SetMobileTheme sets the "mobile_theme" field.
func (_c *UserCreate) SetMobileTheme(v string) *UserCreate {
	_c.mutation.SetMobileTheme(v)
	return _c
}

// SetNillableMobileTheme sets the "mobile_theme" field if the given value is not nil.
func (_c *UserCreate) SetNillableMobileTheme(v *string) *UserCreate {
	if v != nil {
		_c.SetMobileTheme(*v)
	}
	return _c
}

// SetEnableWebNotify sets the "enable_web_notify" field.
func (_c *UserCreate) SetEnableWebNotify(v bool) *UserCreate {
	_c.mutation.SetEnableWebNotify(v)
	return _c
}

// SetNillableEnableWebNotify sets the "enable_web_notify" field if the given value is not nil.
func (_c *UserCreate) SetNillableEnableWebNotify(v *bool) *UserCreate {
	if v != nil {
		_c.SetEnableWebNotify(*v)
	}
	return _c
}

// SetEnableEmailSubscribe sets the "enable_email_subscribe" field.
func (_c *UserCreate) SetEnableEmailSubscribe(v bool) *UserCreate {
	_c.mutation.SetEnableEmailSubscribe(v)
	return _c
}

// SetNillableEnableEmailSubscribe sets the "enable_email_subscribe" field if the given value is not nil.
func (_c *UserCreate) SetNillableEnableEmailSubscribe(v *bool) *UserCreate {
	if v != nil {
		_c.SetEnableEmailSubscribe(*v)
	}
	return _c
}

// SetPublicPoints sets the "public_points" field.
func (_c *UserCreate) SetPublicPoints(v bool) *UserCreate {
	_c.mutation.SetPublicPoints(v)
	return _c
}

// SetNillablePublicPoints sets the "public_points" field if the given value is not nil.
func (_c *UserCreate) SetNillablePublicPoints(v *bool) *UserCreate {
	if v != nil {
		_c.SetPublicPoints(*v)
	}
	return _c
}

// SetPublicFollowers sets the "public_followers" field.
func (_c *UserCreate) SetPublicFollowers(v bool) *UserCreate {
	_c.mutation.SetPublicFollowers(v)
	return _c
}

// SetNillablePublicFollowers sets the "public_followers" field if the given value is not nil.
func (_c *UserCreate) SetNillablePublicFollowers(v *bool) *UserCreate {
	if v != nil {
		_c.SetPublicFollowers(*v)
	}
	return _c
}

// SetPublicArticles sets the "public_articles" field.
func (_c *UserCreate) SetPublicArticles(v bool) *UserCreate {
	_c.mutation.SetPublicArticles(v)
	return _c
}

// SetNillablePublicArticles sets the "public_articles" field if the given value is not nil.
func (_c *UserCreate) SetNillablePublicArticles(v *bool) *UserCreate {
	if v != nil {
		_c.SetPublicArticles(*v)
	}
	return _c
}

// SetPublicComments sets the "public_comments" field.
func (_c *UserCreate) SetPublicComments(v bool) *UserCreate {
	_c.mutation.SetPublicComments(v)
	return _c
}

// SetNillablePublicComments sets the "public_comments" field if the given value is not nil.
func (_c *UserCreate) SetNillablePublicComments(v *bool) *UserCreate {
	if v != nil {
		_c.SetPublicComments(*v)
	}
	return _c
}

// SetPublicOnlineStatus sets the "public_online_status" field.
func (_c *UserCreate) SetPublicOnlineStatus(v bool) *UserCreate {
	_c.mutation.SetPublicOnlineStatus(v)
	return _c
}

// SetNillablePublicOnlineStatus sets the "public_online_status" field if the given value is not nil.
func (_c *UserCreate) SetNillablePublicOnlineStatus(v *bool) *UserCreate {
	if v != nil {
		_c.SetPublicOnlineStatus(*v)
	}
	return _c
}

// SetCountry sets the "country" field.
func (_c *UserCreate) SetCountry(v string) *UserCreate {
	_c.mutation.SetCountry(v)
	return _c
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_c *UserCreate) SetNillableCountry(v *string) *UserCreate {
	if v != nil {
		_c.SetCountry(*v)
	}
	return _c
}

// SetProvince sets the "province" field.
func (_c *UserCreate) SetProvince(v string) *UserCreate {
	_c.mutation.SetProvince(v)
	return _c
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (_c *UserCreate) SetNillableProvince(v *string) *UserCreate {
	if v != nil {
		_c.SetProvince(*v)
	}
	return _c
}

// SetCity sets the "city" field.
func (_c *UserCreate) SetCity(v string) *UserCreate {
	_c.mutation.SetCity(v)
	return _c
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_c *UserCreate) SetNillableCity(v *string) *UserCreate {
	if v != nil {
		_c.SetCity(*v)
	}
	return _c
}

// SetPublicLocation sets the "public_location" field.
func (_c *UserCreate) SetPublicLocation(v bool) *UserCreate {
	_c.mutation.SetPublicLocation(v)
	return _c
}

// SetNillablePublicLocation sets the "public_location" field if the given value is not nil.
func (_c *UserCreate) SetNillablePublicLocation(v *bool) *UserCreate {
	if v != nil {
		_c.SetPublicLocation(*v)
	}
	return _c
}

// SetTwofaSecret sets the "twofa_secret" field.
func (_c *UserCreate) SetTwofaSecret(v string) *UserCreate {
	_c.mutation.SetTwofaSecret(v)
	return _c
}

// SetNillableTwofaSecret sets the "twofa_secret" field if the given value is not nil.
func (_c *UserCreate) SetNillableTwofaSecret(v *string) *UserCreate {
	if v != nil {
		_c.SetTwofaSecret(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := user.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.FollowCount(); !ok {
		v := user.DefaultFollowCount
		_c.mutation.SetFollowCount(v)
	}
	if _, ok := _c.mutation.FollowerCount(); !ok {
		v := user.DefaultFollowerCount
		_c.mutation.SetFollowerCount(v)
	}
	if _, ok := _c.mutation.OnlineMinutes(); !ok {
		v := user.DefaultOnlineMinutes
		_c.mutation.SetOnlineMinutes(v)
	}
	if _, ok := _c.mutation.CurrentCheckinStreak(); !ok {
		v := user.DefaultCurrentCheckinStreak
		_c.mutation.SetCurrentCheckinStreak(v)
	}
	if _, ok := _c.mutation.LongestCheckinStreak(); !ok {
		v := user.DefaultLongestCheckinStreak
		_c.mutation.SetLongestCheckinStreak(v)
	}
	if _, ok := _c.mutation.Language(); !ok {
		v := user.DefaultLanguage
		_c.mutation.SetLanguage(v)
	}
	if _, ok := _c.mutation.Timezone(); !ok {
		v := user.DefaultTimezone
		_c.mutation.SetTimezone(v)
	}
	if _, ok := _c.mutation.Theme(); !ok {
		v := user.DefaultTheme
		_c.mutation.SetTheme(v)
	}
	if _, ok := _c.mutation.MobileTheme(); !ok {
		v := user.DefaultMobileTheme
		_c.mutation.SetMobileTheme(v)
	}
	if _, ok := _c.mutation.EnableWebNotify(); !ok {
		v := user.DefaultEnableWebNotify
		_c.mutation.SetEnableWebNotify(v)
	}
	if _, ok := _c.mutation.EnableEmailSubscribe(); !ok {
		v := user.DefaultEnableEmailSubscribe
		_c.mutation.SetEnableEmailSubscribe(v)
	}
	if _, ok := _c.mutation.PublicPoints(); !ok {
		v := user.DefaultPublicPoints
		_c.mutation.SetPublicPoints(v)
	}
	if _, ok := _c.mutation.PublicFollowers(); !ok {
		v := user.DefaultPublicFollowers
		_c.mutation.SetPublicFollowers(v)
	}
	if _, ok := _c.mutation.PublicArticles(); !ok {
		v := user.DefaultPublicArticles
		_c.mutation.SetPublicArticles(v)
	}
	if _, ok := _c.mutation.PublicComments(); !ok {
		v := user.DefaultPublicComments
		_c.mutation.SetPublicComments(v)
	}
	if _, ok := _c.mutation.PublicOnlineStatus(); !ok {
		v := user.DefaultPublicOnlineStatus
		_c.mutation.SetPublicOnlineStatus(v)
	}
	if _, ok := _c.mutation.PublicLocation(); !ok {
		v := user.DefaultPublicLocation
		_c.mutation.SetPublicLocation(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "User.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`gen: missing required field "User.password"`)}
	}
	if v, ok := _c.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "User.password": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "User.status"`)}
	}
	if _, ok := _c.mutation.FollowCount(); !ok {
		return &ValidationError{Name: "follow_count", err: errors.New(`gen: missing required field "User.follow_count"`)}
	}
	if _, ok := _c.mutation.FollowerCount(); !ok {
		return &ValidationError{Name: "follower_count", err: errors.New(`gen: missing required field "User.follower_count"`)}
	}
	if _, ok := _c.mutation.OnlineMinutes(); !ok {
		return &ValidationError{Name: "online_minutes", err: errors.New(`gen: missing required field "User.online_minutes"`)}
	}
	if _, ok := _c.mutation.CurrentCheckinStreak(); !ok {
		return &ValidationError{Name: "current_checkin_streak", err: errors.New(`gen: missing required field "User.current_checkin_streak"`)}
	}
	if _, ok := _c.mutation.LongestCheckinStreak(); !ok {
		return &ValidationError{Name: "longest_checkin_streak", err: errors.New(`gen: missing required field "User.longest_checkin_streak"`)}
	}
	if _, ok := _c.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`gen: missing required field "User.language"`)}
	}
	if _, ok := _c.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`gen: missing required field "User.timezone"`)}
	}
	if _, ok := _c.mutation.Theme(); !ok {
		return &ValidationError{Name: "theme", err: errors.New(`gen: missing required field "User.theme"`)}
	}
	if _, ok := _c.mutation.MobileTheme(); !ok {
		return &ValidationError{Name: "mobile_theme", err: errors.New(`gen: missing required field "User.mobile_theme"`)}
	}
	if _, ok := _c.mutation.EnableWebNotify(); !ok {
		return &ValidationError{Name: "enable_web_notify", err: errors.New(`gen: missing required field "User.enable_web_notify"`)}
	}
	if _, ok := _c.mutation.EnableEmailSubscribe(); !ok {
		return &ValidationError{Name: "enable_email_subscribe", err: errors.New(`gen: missing required field "User.enable_email_subscribe"`)}
	}
	if _, ok := _c.mutation.PublicPoints(); !ok {
		return &ValidationError{Name: "public_points", err: errors.New(`gen: missing required field "User.public_points"`)}
	}
	if _, ok := _c.mutation.PublicFollowers(); !ok {
		return &ValidationError{Name: "public_followers", err: errors.New(`gen: missing required field "User.public_followers"`)}
	}
	if _, ok := _c.mutation.PublicArticles(); !ok {
		return &ValidationError{Name: "public_articles", err: errors.New(`gen: missing required field "User.public_articles"`)}
	}
	if _, ok := _c.mutation.PublicComments(); !ok {
		return &ValidationError{Name: "public_comments", err: errors.New(`gen: missing required field "User.public_comments"`)}
	}
	if _, ok := _c.mutation.PublicOnlineStatus(); !ok {
		return &ValidationError{Name: "public_online_status", err: errors.New(`gen: missing required field "User.public_online_status"`)}
	}
	if _, ok := _c.mutation.PublicLocation(); !ok {
		return &ValidationError{Name: "public_location", err: errors.New(`gen: missing required field "User.public_location"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(user.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := _c.mutation.Introduction(); ok {
		_spec.SetField(user.FieldIntroduction, field.TypeString, value)
		_node.Introduction = value
	}
	if value, ok := _c.mutation.Mbti(); ok {
		_spec.SetField(user.FieldMbti, field.TypeString, value)
		_node.Mbti = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.GroupName(); ok {
		_spec.SetField(user.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if value, ok := _c.mutation.FollowCount(); ok {
		_spec.SetField(user.FieldFollowCount, field.TypeInt, value)
		_node.FollowCount = value
	}
	if value, ok := _c.mutation.FollowerCount(); ok {
		_spec.SetField(user.FieldFollowerCount, field.TypeInt, value)
		_node.FollowerCount = value
	}
	if value, ok := _c.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
		_node.LastLoginTime = value
	}
	if value, ok := _c.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = value
	}
	if value, ok := _c.mutation.OnlineMinutes(); ok {
		_spec.SetField(user.FieldOnlineMinutes, field.TypeInt, value)
		_node.OnlineMinutes = value
	}
	if value, ok := _c.mutation.LastCheckinTime(); ok {
		_spec.SetField(user.FieldLastCheckinTime, field.TypeTime, value)
		_node.LastCheckinTime = value
	}
	if value, ok := _c.mutation.CurrentCheckinStreak(); ok {
		_spec.SetField(user.FieldCurrentCheckinStreak, field.TypeInt, value)
		_node.CurrentCheckinStreak = value
	}
	if value, ok := _c.mutation.LongestCheckinStreak(); ok {
		_spec.SetField(user.FieldLongestCheckinStreak, field.TypeInt, value)
		_node.LongestCheckinStreak = value
	}
	if value, ok := _c.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := _c.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := _c.mutation.Theme(); ok {
		_spec.SetField(user.FieldTheme, field.TypeString, value)
		_node.Theme = value
	}
	if value, ok := _c.mutation.MobileTheme(); ok {
		_spec.SetField(user.FieldMobileTheme, field.TypeString, value)
		_node.MobileTheme = value
	}
	if value, ok := _c.mutation.EnableWebNotify(); ok {
		_spec.SetField(user.FieldEnableWebNotify, field.TypeBool, value)
		_node.EnableWebNotify = value
	}
	if value, ok := _c.mutation.EnableEmailSubscribe(); ok {
		_spec.SetField(user.FieldEnableEmailSubscribe, field.TypeBool, value)
		_node.EnableEmailSubscribe = value
	}
	if value, ok := _c.mutation.PublicPoints(); ok {
		_spec.SetField(user.FieldPublicPoints, field.TypeBool, value)
		_node.PublicPoints = value
	}
	if value, ok := _c.mutation.PublicFollowers(); ok {
		_spec.SetField(user.FieldPublicFollowers, field.TypeBool, value)
		_node.PublicFollowers = value
	}
	if value, ok := _c.mutation.PublicArticles(); ok {
		_spec.SetField(user.FieldPublicArticles, field.TypeBool, value)
		_node.PublicArticles = value
	}
	if value, ok := _c.mutation.PublicComments(); ok {
		_spec.SetField(user.FieldPublicComments, field.TypeBool, value)
		_node.PublicComments = value
	}
	if value, ok := _c.mutation.PublicOnlineStatus(); ok {
		_spec.SetField(user.FieldPublicOnlineStatus, field.TypeBool, value)
		_node.PublicOnlineStatus = value
	}
	if value, ok := _c.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := _c.mutation.Province(); ok {
		_spec.SetField(user.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := _c.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := _c.mutation.PublicLocation(); ok {
		_spec.SetField(user.FieldPublicLocation, field.TypeBool, value)
		_node.PublicLocation = value
	}
	if value, ok := _c.mutation.TwofaSecret(); ok {
		_spec.SetField(user.FieldTwofaSecret, field.TypeString, value)
		_node.TwofaSecret = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
