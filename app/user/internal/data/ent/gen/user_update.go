// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user/internal/data/ent/gen/predicate"
	"user/internal/data/ent/gen/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdate) SetNickname(v string) *UserUpdate {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdate) ClearNickname() *UserUpdate {
	_u.mutation.ClearNickname()
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdate) SetPassword(v string) *UserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdate) ClearEmail() *UserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdate) SetPhone(v string) *UserUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePhone(v *string) *UserUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdate) ClearPhone() *UserUpdate {
	_u.mutation.ClearPhone()
	return _u
}

// SetURL sets the "url" field.
func (_u *UserUpdate) SetURL(v string) *UserUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *UserUpdate) SetNillableURL(v *string) *UserUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *UserUpdate) ClearURL() *UserUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *UserUpdate) SetAvatarURL(v string) *UserUpdate {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatarURL(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *UserUpdate) ClearAvatarURL() *UserUpdate {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetIntroduction sets the "introduction" field.
func (_u *UserUpdate) SetIntroduction(v string) *UserUpdate {
	_u.mutation.SetIntroduction(v)
	return _u
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIntroduction(v *string) *UserUpdate {
	if v != nil {
		_u.SetIntroduction(*v)
	}
	return _u
}

// ClearIntroduction clears the value of the "introduction" field.
func (_u *UserUpdate) ClearIntroduction() *UserUpdate {
	_u.mutation.ClearIntroduction()
	return _u
}

// SetMbti sets the "mbti" field.
func (_u *UserUpdate) SetMbti(v string) *UserUpdate {
	_u.mutation.SetMbti(v)
	return _u
}

// SetNillableMbti sets the "mbti" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMbti(v *string) *UserUpdate {
	if v != nil {
		_u.SetMbti(*v)
	}
	return _u
}

// ClearMbti clears the value of the "mbti" field.
func (_u *UserUpdate) ClearMbti() *UserUpdate {
	_u.mutation.ClearMbti()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdate) SetStatus(v int) *UserUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdate) SetNillableStatus(v *int) *UserUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UserUpdate) AddStatus(v int) *UserUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetGroupName sets the "group_name" field.
func (_u *UserUpdate) SetGroupName(v string) *UserUpdate {
	_u.mutation.SetGroupName(v)
	return _u
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableGroupName(v *string) *UserUpdate {
	if v != nil {
		_u.SetGroupName(*v)
	}
	return _u
}

// ClearGroupName clears the value of the "group_name" field.
func (_u *UserUpdate) ClearGroupName() *UserUpdate {
	_u.mutation.ClearGroupName()
	return _u
}

// SetFollowCount sets the "follow_count" field.
func (_u *UserUpdate) SetFollowCount(v int) *UserUpdate {
	_u.mutation.ResetFollowCount()
	_u.mutation.SetFollowCount(v)
	return _u
}

// SetNillableFollowCount sets the "follow_count" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFollowCount(v *int) *UserUpdate {
	if v != nil {
		_u.SetFollowCount(*v)
	}
	return _u
}

// AddFollowCount adds value to the "follow_count" field.
func (_u *UserUpdate) AddFollowCount(v int) *UserUpdate {
	_u.mutation.AddFollowCount(v)
	return _u
}

// SetFollowerCount sets the "follower_count" field.
func (_u *UserUpdate) SetFollowerCount(v int) *UserUpdate {
	_u.mutation.ResetFollowerCount()
	_u.mutation.SetFollowerCount(v)
	return _u
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFollowerCount(v *int) *UserUpdate {
	if v != nil {
		_u.SetFollowerCount(*v)
	}
	return _u
}

// AddFollowerCount adds value to the "follower_count" field.
func (_u *UserUpdate) AddFollowerCount(v int) *UserUpdate {
	_u.mutation.AddFollowerCount(v)
	return _u
}

// SetLastLoginTime sets the "last_login_time" field.
func (_u *UserUpdate) SetLastLoginTime(v time.Time) *UserUpdate {
	_u.mutation.SetLastLoginTime(v)
	return _u
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginTime(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastLoginTime(*v)
	}
	return _u
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (_u *UserUpdate) ClearLastLoginTime() *UserUpdate {
	_u.mutation.ClearLastLoginTime()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *UserUpdate) SetLastLoginIP(v string) *UserUpdate {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginIP(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *UserUpdate) ClearLastLoginIP() *UserUpdate {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetOnlineMinutes sets the "online_minutes" field.
func (_u *UserUpdate) SetOnlineMinutes(v int) *UserUpdate {
	_u.mutation.ResetOnlineMinutes()
	_u.mutation.SetOnlineMinutes(v)
	return _u
}

// SetNillableOnlineMinutes sets the "online_minutes" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOnlineMinutes(v *int) *UserUpdate {
	if v != nil {
		_u.SetOnlineMinutes(*v)
	}
	return _u
}

// AddOnlineMinutes adds value to the "online_minutes" field.
func (_u *UserUpdate) AddOnlineMinutes(v int) *UserUpdate {
	_u.mutation.AddOnlineMinutes(v)
	return _u
}

// SetLastCheckinTime sets the "last_checkin_time" field.
func (_u *UserUpdate) SetLastCheckinTime(v time.Time) *UserUpdate {
	_u.mutation.SetLastCheckinTime(v)
	return _u
}

// SetNillableLastCheckinTime sets the "last_checkin_time" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastCheckinTime(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastCheckinTime(*v)
	}
	return _u
}

// ClearLastCheckinTime clears the value of the "last_checkin_time" field.
func (_u *UserUpdate) ClearLastCheckinTime() *UserUpdate {
	_u.mutation.ClearLastCheckinTime()
	return _u
}

// SetCurrentCheckinStreak sets the "current_checkin_streak" field.
func (_u *UserUpdate) SetCurrentCheckinStreak(v int) *UserUpdate {
	_u.mutation.ResetCurrentCheckinStreak()
	_u.mutation.SetCurrentCheckinStreak(v)
	return _u
}

// SetNillableCurrentCheckinStreak sets the "current_checkin_streak" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCurrentCheckinStreak(v *int) *UserUpdate {
	if v != nil {
		_u.SetCurrentCheckinStreak(*v)
	}
	return _u
}

// AddCurrentCheckinStreak adds value to the "current_checkin_streak" field.
func (_u *UserUpdate) AddCurrentCheckinStreak(v int) *UserUpdate {
	_u.mutation.AddCurrentCheckinStreak(v)
	return _u
}

// SetLongestCheckinStreak sets the "longest_checkin_streak" field.
func (_u *UserUpdate) SetLongestCheckinStreak(v int) *UserUpdate {
	_u.mutation.ResetLongestCheckinStreak()
	_u.mutation.SetLongestCheckinStreak(v)
	return _u
}

// SetNillableLongestCheckinStreak sets the "longest_checkin_streak" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLongestCheckinStreak(v *int) *UserUpdate {
	if v != nil {
		_u.SetLongestCheckinStreak(*v)
	}
	return _u
}

// AddLongestCheckinStreak adds value to the "longest_checkin_streak" field.
func (_u *UserUpdate) AddLongestCheckinStreak(v int) *UserUpdate {
	_u.mutation.AddLongestCheckinStreak(v)
	return _u
}

// SetLanguage sets the "language" field.
func (_u *UserUpdate) SetLanguage(v string) *UserUpdate {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLanguage(v *string) *UserUpdate {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdate) SetTimezone(v string) *UserUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTimezone(v *string) *UserUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// SetTheme sets the "theme" field.
func (_u *UserUpdate) SetTheme(v string) *UserUpdate {
	_u.mutation.SetTheme(v)
	return _u
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTheme(v *string) *UserUpdate {
	if v != nil {
		_u.SetTheme(*v)
	}
	return _u
}

// SetMobileTheme sets the "mobile_theme" field.
func (_u *UserUpdate) SetMobileTheme(v string) *UserUpdate {
	_u.mutation.SetMobileTheme(v)
	return _u
}

// SetNillableMobileTheme sets the "mobile_theme" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMobileTheme(v *string) *UserUpdate {
	if v != nil {
		_u.SetMobileTheme(*v)
	}
	return _u
}

// SetEnableWebNotify sets the "enable_web_notify" field.
func (_u *UserUpdate) SetEnableWebNotify(v bool) *UserUpdate {
	_u.mutation.SetEnableWebNotify(v)
	return _u
}

// SetNillableEnableWebNotify sets the "enable_web_notify" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEnableWebNotify(v *bool) *UserUpdate {
	if v != nil {
		_u.SetEnableWebNotify(*v)
	}
	return _u
}

// SetEnableEmailSubscribe sets the "enable_email_subscribe" field.
func (_u *UserUpdate) SetEnableEmailSubscribe(v bool) *UserUpdate {
	_u.mutation.SetEnableEmailSubscribe(v)
	return _u
}

// SetNillableEnableEmailSubscribe sets the "enable_email_subscribe" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEnableEmailSubscribe(v *bool) *UserUpdate {
	if v != nil {
		_u.SetEnableEmailSubscribe(*v)
	}
	return _u
}

// SetPublicPoints sets the "public_points" field.
func (_u *UserUpdate) SetPublicPoints(v bool) *UserUpdate {
	_u.mutation.SetPublicPoints(v)
	return _u
}

// SetNillablePublicPoints sets the "public_points" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePublicPoints(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPublicPoints(*v)
	}
	return _u
}

// SetPublicFollowers sets the "public_followers" field.
func (_u *UserUpdate) SetPublicFollowers(v bool) *UserUpdate {
	_u.mutation.SetPublicFollowers(v)
	return _u
}

// SetNillablePublicFollowers sets the "public_followers" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePublicFollowers(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPublicFollowers(*v)
	}
	return _u
}

// SetPublicArticles sets the "public_articles" field.
func (_u *UserUpdate) SetPublicArticles(v bool) *UserUpdate {
	_u.mutation.SetPublicArticles(v)
	return _u
}

// SetNillablePublicArticles sets the "public_articles" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePublicArticles(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPublicArticles(*v)
	}
	return _u
}

// SetPublicComments sets the "public_comments" field.
func (_u *UserUpdate) SetPublicComments(v bool) *UserUpdate {
	_u.mutation.SetPublicComments(v)
	return _u
}

// SetNillablePublicComments sets the "public_comments" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePublicComments(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPublicComments(*v)
	}
	return _u
}

// SetPublicOnlineStatus sets the "public_online_status" field.
func (_u *UserUpdate) SetPublicOnlineStatus(v bool) *UserUpdate {
	_u.mutation.SetPublicOnlineStatus(v)
	return _u
}

// SetNillablePublicOnlineStatus sets the "public_online_status" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePublicOnlineStatus(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPublicOnlineStatus(*v)
	}
	return _u
}

// SetCountry sets the "country" field.
func (_u *UserUpdate) SetCountry(v string) *UserUpdate {
	_u.mutation.SetCountry(v)
	return _u
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCountry(v *string) *UserUpdate {
	if v != nil {
		_u.SetCountry(*v)
	}
	return _u
}

// ClearCountry clears the value of the "country" field.
func (_u *UserUpdate) ClearCountry() *UserUpdate {
	_u.mutation.ClearCountry()
	return _u
}

// SetProvince sets the "province" field.
func (_u *UserUpdate) SetProvince(v string) *UserUpdate {
	_u.mutation.SetProvince(v)
	return _u
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (_u *UserUpdate) SetNillableProvince(v *string) *UserUpdate {
	if v != nil {
		_u.SetProvince(*v)
	}
	return _u
}

// ClearProvince clears the value of the "province" field.
func (_u *UserUpdate) ClearProvince() *UserUpdate {
	_u.mutation.ClearProvince()
	return _u
}

// SetCity sets the "city" field.
func (_u *UserUpdate) SetCity(v string) *UserUpdate {
	_u.mutation.SetCity(v)
	return _u
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCity(v *string) *UserUpdate {
	if v != nil {
		_u.SetCity(*v)
	}
	return _u
}

// ClearCity clears the value of the "city" field.
func (_u *UserUpdate) ClearCity() *UserUpdate {
	_u.mutation.ClearCity()
	return _u
}

// SetPublicLocation sets the "public_location" field.
func (_u *UserUpdate) SetPublicLocation(v bool) *UserUpdate {
	_u.mutation.SetPublicLocation(v)
	return _u
}

// SetNillablePublicLocation sets the "public_location" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePublicLocation(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPublicLocation(*v)
	}
	return _u
}

// SetTwofaSecret sets the "twofa_secret" field.
func (_u *UserUpdate) SetTwofaSecret(v string) *UserUpdate {
	_u.mutation.SetTwofaSecret(v)
	return _u
}

// SetNillableTwofaSecret sets the "twofa_secret" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTwofaSecret(v *string) *UserUpdate {
	if v != nil {
		_u.SetTwofaSecret(*v)
	}
	return _u
}

// ClearTwofaSecret clears the value of the "twofa_secret" field.
func (_u *UserUpdate) ClearTwofaSecret() *UserUpdate {
	_u.mutation.ClearTwofaSecret()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdate) SetCreatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *UserUpdate) ClearCreatedAt() *UserUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUpdatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserUpdate) ClearUpdatedAt() *UserUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(user.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(user.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.Introduction(); ok {
		_spec.SetField(user.FieldIntroduction, field.TypeString, value)
	}
	if _u.mutation.IntroductionCleared() {
		_spec.ClearField(user.FieldIntroduction, field.TypeString)
	}
	if value, ok := _u.mutation.Mbti(); ok {
		_spec.SetField(user.FieldMbti, field.TypeString, value)
	}
	if _u.mutation.MbtiCleared() {
		_spec.ClearField(user.FieldMbti, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GroupName(); ok {
		_spec.SetField(user.FieldGroupName, field.TypeString, value)
	}
	if _u.mutation.GroupNameCleared() {
		_spec.ClearField(user.FieldGroupName, field.TypeString)
	}
	if value, ok := _u.mutation.FollowCount(); ok {
		_spec.SetField(user.FieldFollowCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFollowCount(); ok {
		_spec.AddField(user.FieldFollowCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.FollowerCount(); ok {
		_spec.SetField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFollowerCount(); ok {
		_spec.AddField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if _u.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.OnlineMinutes(); ok {
		_spec.SetField(user.FieldOnlineMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOnlineMinutes(); ok {
		_spec.AddField(user.FieldOnlineMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastCheckinTime(); ok {
		_spec.SetField(user.FieldLastCheckinTime, field.TypeTime, value)
	}
	if _u.mutation.LastCheckinTimeCleared() {
		_spec.ClearField(user.FieldLastCheckinTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CurrentCheckinStreak(); ok {
		_spec.SetField(user.FieldCurrentCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCurrentCheckinStreak(); ok {
		_spec.AddField(user.FieldCurrentCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LongestCheckinStreak(); ok {
		_spec.SetField(user.FieldLongestCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLongestCheckinStreak(); ok {
		_spec.AddField(user.FieldLongestCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Theme(); ok {
		_spec.SetField(user.FieldTheme, field.TypeString, value)
	}
	if value, ok := _u.mutation.MobileTheme(); ok {
		_spec.SetField(user.FieldMobileTheme, field.TypeString, value)
	}
	if value, ok := _u.mutation.EnableWebNotify(); ok {
		_spec.SetField(user.FieldEnableWebNotify, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnableEmailSubscribe(); ok {
		_spec.SetField(user.FieldEnableEmailSubscribe, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicPoints(); ok {
		_spec.SetField(user.FieldPublicPoints, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicFollowers(); ok {
		_spec.SetField(user.FieldPublicFollowers, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicArticles(); ok {
		_spec.SetField(user.FieldPublicArticles, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicComments(); ok {
		_spec.SetField(user.FieldPublicComments, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicOnlineStatus(); ok {
		_spec.SetField(user.FieldPublicOnlineStatus, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if _u.mutation.CountryCleared() {
		_spec.ClearField(user.FieldCountry, field.TypeString)
	}
	if value, ok := _u.mutation.Province(); ok {
		_spec.SetField(user.FieldProvince, field.TypeString, value)
	}
	if _u.mutation.ProvinceCleared() {
		_spec.ClearField(user.FieldProvince, field.TypeString)
	}
	if value, ok := _u.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if _u.mutation.CityCleared() {
		_spec.ClearField(user.FieldCity, field.TypeString)
	}
	if value, ok := _u.mutation.PublicLocation(); ok {
		_spec.SetField(user.FieldPublicLocation, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TwofaSecret(); ok {
		_spec.SetField(user.FieldTwofaSecret, field.TypeString, value)
	}
	if _u.mutation.TwofaSecretCleared() {
		_spec.ClearField(user.FieldTwofaSecret, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdateOne) ClearNickname() *UserUpdateOne {
	_u.mutation.ClearNickname()
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdateOne) ClearEmail() *UserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdateOne) SetPhone(v string) *UserUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePhone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdateOne) ClearPhone() *UserUpdateOne {
	_u.mutation.ClearPhone()
	return _u
}

// SetURL sets the "url" field.
func (_u *UserUpdateOne) SetURL(v string) *UserUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableURL(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *UserUpdateOne) ClearURL() *UserUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *UserUpdateOne) SetAvatarURL(v string) *UserUpdateOne {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatarURL(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *UserUpdateOne) ClearAvatarURL() *UserUpdateOne {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetIntroduction sets the "introduction" field.
func (_u *UserUpdateOne) SetIntroduction(v string) *UserUpdateOne {
	_u.mutation.SetIntroduction(v)
	return _u
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIntroduction(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetIntroduction(*v)
	}
	return _u
}

// ClearIntroduction clears the value of the "introduction" field.
func (_u *UserUpdateOne) ClearIntroduction() *UserUpdateOne {
	_u.mutation.ClearIntroduction()
	return _u
}

// SetMbti sets the "mbti" field.
func (_u *UserUpdateOne) SetMbti(v string) *UserUpdateOne {
	_u.mutation.SetMbti(v)
	return _u
}

// SetNillableMbti sets the "mbti" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMbti(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMbti(*v)
	}
	return _u
}

// ClearMbti clears the value of the "mbti" field.
func (_u *UserUpdateOne) ClearMbti() *UserUpdateOne {
	_u.mutation.ClearMbti()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdateOne) SetStatus(v int) *UserUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableStatus(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UserUpdateOne) AddStatus(v int) *UserUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetGroupName sets the "group_name" field.
func (_u *UserUpdateOne) SetGroupName(v string) *UserUpdateOne {
	_u.mutation.SetGroupName(v)
	return _u
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableGroupName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetGroupName(*v)
	}
	return _u
}

// ClearGroupName clears the value of the "group_name" field.
func (_u *UserUpdateOne) ClearGroupName() *UserUpdateOne {
	_u.mutation.ClearGroupName()
	return _u
}

// SetFollowCount sets the "follow_count" field.
func (_u *UserUpdateOne) SetFollowCount(v int) *UserUpdateOne {
	_u.mutation.ResetFollowCount()
	_u.mutation.SetFollowCount(v)
	return _u
}

// SetNillableFollowCount sets the "follow_count" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFollowCount(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetFollowCount(*v)
	}
	return _u
}

// AddFollowCount adds value to the "follow_count" field.
func (_u *UserUpdateOne) AddFollowCount(v int) *UserUpdateOne {
	_u.mutation.AddFollowCount(v)
	return _u
}

// SetFollowerCount sets the "follower_count" field.
func (_u *UserUpdateOne) SetFollowerCount(v int) *UserUpdateOne {
	_u.mutation.ResetFollowerCount()
	_u.mutation.SetFollowerCount(v)
	return _u
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFollowerCount(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetFollowerCount(*v)
	}
	return _u
}

// AddFollowerCount adds value to the "follower_count" field.
func (_u *UserUpdateOne) AddFollowerCount(v int) *UserUpdateOne {
	_u.mutation.AddFollowerCount(v)
	return _u
}

// SetLastLoginTime sets the "last_login_time" field.
func (_u *UserUpdateOne) SetLastLoginTime(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastLoginTime(v)
	return _u
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginTime(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginTime(*v)
	}
	return _u
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (_u *UserUpdateOne) ClearLastLoginTime() *UserUpdateOne {
	_u.mutation.ClearLastLoginTime()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *UserUpdateOne) SetLastLoginIP(v string) *UserUpdateOne {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginIP(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *UserUpdateOne) ClearLastLoginIP() *UserUpdateOne {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetOnlineMinutes sets the "online_minutes" field.
func (_u *UserUpdateOne) SetOnlineMinutes(v int) *UserUpdateOne {
	_u.mutation.ResetOnlineMinutes()
	_u.mutation.SetOnlineMinutes(v)
	return _u
}

// SetNillableOnlineMinutes sets the "online_minutes" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnlineMinutes(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetOnlineMinutes(*v)
	}
	return _u
}

// AddOnlineMinutes adds value to the "online_minutes" field.
func (_u *UserUpdateOne) AddOnlineMinutes(v int) *UserUpdateOne {
	_u.mutation.AddOnlineMinutes(v)
	return _u
}

// SetLastCheckinTime sets the "last_checkin_time" field.
func (_u *UserUpdateOne) SetLastCheckinTime(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastCheckinTime(v)
	return _u
}

// SetNillableLastCheckinTime sets the "last_checkin_time" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastCheckinTime(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastCheckinTime(*v)
	}
	return _u
}

// ClearLastCheckinTime clears the value of the "last_checkin_time" field.
func (_u *UserUpdateOne) ClearLastCheckinTime() *UserUpdateOne {
	_u.mutation.ClearLastCheckinTime()
	return _u
}

// SetCurrentCheckinStreak sets the "current_checkin_streak" field.
func (_u *UserUpdateOne) SetCurrentCheckinStreak(v int) *UserUpdateOne {
	_u.mutation.ResetCurrentCheckinStreak()
	_u.mutation.SetCurrentCheckinStreak(v)
	return _u
}

// SetNillableCurrentCheckinStreak sets the "current_checkin_streak" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCurrentCheckinStreak(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetCurrentCheckinStreak(*v)
	}
	return _u
}

// AddCurrentCheckinStreak adds value to the "current_checkin_streak" field.
func (_u *UserUpdateOne) AddCurrentCheckinStreak(v int) *UserUpdateOne {
	_u.mutation.AddCurrentCheckinStreak(v)
	return _u
}

// SetLongestCheckinStreak sets the "longest_checkin_streak" field.
func (_u *UserUpdateOne) SetLongestCheckinStreak(v int) *UserUpdateOne {
	_u.mutation.ResetLongestCheckinStreak()
	_u.mutation.SetLongestCheckinStreak(v)
	return _u
}

// SetNillableLongestCheckinStreak sets the "longest_checkin_streak" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLongestCheckinStreak(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetLongestCheckinStreak(*v)
	}
	return _u
}

// AddLongestCheckinStreak adds value to the "longest_checkin_streak" field.
func (_u *UserUpdateOne) AddLongestCheckinStreak(v int) *UserUpdateOne {
	_u.mutation.AddLongestCheckinStreak(v)
	return _u
}

// SetLanguage sets the "language" field.
func (_u *UserUpdateOne) SetLanguage(v string) *UserUpdateOne {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLanguage(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdateOne) SetTimezone(v string) *UserUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTimezone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// SetTheme sets the "theme" field.
func (_u *UserUpdateOne) SetTheme(v string) *UserUpdateOne {
	_u.mutation.SetTheme(v)
	return _u
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTheme(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTheme(*v)
	}
	return _u
}

// SetMobileTheme sets the "mobile_theme" field.
func (_u *UserUpdateOne) SetMobileTheme(v string) *UserUpdateOne {
	_u.mutation.SetMobileTheme(v)
	return _u
}

// SetNillableMobileTheme sets the "mobile_theme" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMobileTheme(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMobileTheme(*v)
	}
	return _u
}

// SetEnableWebNotify sets the "enable_web_notify" field.
func (_u *UserUpdateOne) SetEnableWebNotify(v bool) *UserUpdateOne {
	_u.mutation.SetEnableWebNotify(v)
	return _u
}

// SetNillableEnableWebNotify sets the "enable_web_notify" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEnableWebNotify(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetEnableWebNotify(*v)
	}
	return _u
}

// SetEnableEmailSubscribe sets the "enable_email_subscribe" field.
func (_u *UserUpdateOne) SetEnableEmailSubscribe(v bool) *UserUpdateOne {
	_u.mutation.SetEnableEmailSubscribe(v)
	return _u
}

// SetNillableEnableEmailSubscribe sets the "enable_email_subscribe" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEnableEmailSubscribe(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetEnableEmailSubscribe(*v)
	}
	return _u
}

// SetPublicPoints sets the "public_points" field.
func (_u *UserUpdateOne) SetPublicPoints(v bool) *UserUpdateOne {
	_u.mutation.SetPublicPoints(v)
	return _u
}

// SetNillablePublicPoints sets the "public_points" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePublicPoints(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPublicPoints(*v)
	}
	return _u
}

// SetPublicFollowers sets the "public_followers" field.
func (_u *UserUpdateOne) SetPublicFollowers(v bool) *UserUpdateOne {
	_u.mutation.SetPublicFollowers(v)
	return _u
}

// SetNillablePublicFollowers sets the "public_followers" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePublicFollowers(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPublicFollowers(*v)
	}
	return _u
}

// SetPublicArticles sets the "public_articles" field.
func (_u *UserUpdateOne) SetPublicArticles(v bool) *UserUpdateOne {
	_u.mutation.SetPublicArticles(v)
	return _u
}

// SetNillablePublicArticles sets the "public_articles" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePublicArticles(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPublicArticles(*v)
	}
	return _u
}

// SetPublicComments sets the "public_comments" field.
func (_u *UserUpdateOne) SetPublicComments(v bool) *UserUpdateOne {
	_u.mutation.SetPublicComments(v)
	return _u
}

// SetNillablePublicComments sets the "public_comments" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePublicComments(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPublicComments(*v)
	}
	return _u
}

// SetPublicOnlineStatus sets the "public_online_status" field.
func (_u *UserUpdateOne) SetPublicOnlineStatus(v bool) *UserUpdateOne {
	_u.mutation.SetPublicOnlineStatus(v)
	return _u
}

// SetNillablePublicOnlineStatus sets the "public_online_status" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePublicOnlineStatus(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPublicOnlineStatus(*v)
	}
	return _u
}

// SetCountry sets the "country" field.
func (_u *UserUpdateOne) SetCountry(v string) *UserUpdateOne {
	_u.mutation.SetCountry(v)
	return _u
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCountry(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetCountry(*v)
	}
	return _u
}

// ClearCountry clears the value of the "country" field.
func (_u *UserUpdateOne) ClearCountry() *UserUpdateOne {
	_u.mutation.ClearCountry()
	return _u
}

// SetProvince sets the "province" field.
func (_u *UserUpdateOne) SetProvince(v string) *UserUpdateOne {
	_u.mutation.SetProvince(v)
	return _u
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProvince(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetProvince(*v)
	}
	return _u
}

// ClearProvince clears the value of the "province" field.
func (_u *UserUpdateOne) ClearProvince() *UserUpdateOne {
	_u.mutation.ClearProvince()
	return _u
}

// SetCity sets the "city" field.
func (_u *UserUpdateOne) SetCity(v string) *UserUpdateOne {
	_u.mutation.SetCity(v)
	return _u
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCity(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetCity(*v)
	}
	return _u
}

// ClearCity clears the value of the "city" field.
func (_u *UserUpdateOne) ClearCity() *UserUpdateOne {
	_u.mutation.ClearCity()
	return _u
}

// SetPublicLocation sets the "public_location" field.
func (_u *UserUpdateOne) SetPublicLocation(v bool) *UserUpdateOne {
	_u.mutation.SetPublicLocation(v)
	return _u
}

// SetNillablePublicLocation sets the "public_location" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePublicLocation(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPublicLocation(*v)
	}
	return _u
}

// SetTwofaSecret sets the "twofa_secret" field.
func (_u *UserUpdateOne) SetTwofaSecret(v string) *UserUpdateOne {
	_u.mutation.SetTwofaSecret(v)
	return _u
}

// SetNillableTwofaSecret sets the "twofa_secret" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTwofaSecret(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTwofaSecret(*v)
	}
	return _u
}

// ClearTwofaSecret clears the value of the "twofa_secret" field.
func (_u *UserUpdateOne) ClearTwofaSecret() *UserUpdateOne {
	_u.mutation.ClearTwofaSecret()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdateOne) SetCreatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUpdatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(user.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(user.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.Introduction(); ok {
		_spec.SetField(user.FieldIntroduction, field.TypeString, value)
	}
	if _u.mutation.IntroductionCleared() {
		_spec.ClearField(user.FieldIntroduction, field.TypeString)
	}
	if value, ok := _u.mutation.Mbti(); ok {
		_spec.SetField(user.FieldMbti, field.TypeString, value)
	}
	if _u.mutation.MbtiCleared() {
		_spec.ClearField(user.FieldMbti, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.GroupName(); ok {
		_spec.SetField(user.FieldGroupName, field.TypeString, value)
	}
	if _u.mutation.GroupNameCleared() {
		_spec.ClearField(user.FieldGroupName, field.TypeString)
	}
	if value, ok := _u.mutation.FollowCount(); ok {
		_spec.SetField(user.FieldFollowCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFollowCount(); ok {
		_spec.AddField(user.FieldFollowCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.FollowerCount(); ok {
		_spec.SetField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFollowerCount(); ok {
		_spec.AddField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if _u.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.OnlineMinutes(); ok {
		_spec.SetField(user.FieldOnlineMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOnlineMinutes(); ok {
		_spec.AddField(user.FieldOnlineMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastCheckinTime(); ok {
		_spec.SetField(user.FieldLastCheckinTime, field.TypeTime, value)
	}
	if _u.mutation.LastCheckinTimeCleared() {
		_spec.ClearField(user.FieldLastCheckinTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CurrentCheckinStreak(); ok {
		_spec.SetField(user.FieldCurrentCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCurrentCheckinStreak(); ok {
		_spec.AddField(user.FieldCurrentCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LongestCheckinStreak(); ok {
		_spec.SetField(user.FieldLongestCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLongestCheckinStreak(); ok {
		_spec.AddField(user.FieldLongestCheckinStreak, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Theme(); ok {
		_spec.SetField(user.FieldTheme, field.TypeString, value)
	}
	if value, ok := _u.mutation.MobileTheme(); ok {
		_spec.SetField(user.FieldMobileTheme, field.TypeString, value)
	}
	if value, ok := _u.mutation.EnableWebNotify(); ok {
		_spec.SetField(user.FieldEnableWebNotify, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnableEmailSubscribe(); ok {
		_spec.SetField(user.FieldEnableEmailSubscribe, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicPoints(); ok {
		_spec.SetField(user.FieldPublicPoints, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicFollowers(); ok {
		_spec.SetField(user.FieldPublicFollowers, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicArticles(); ok {
		_spec.SetField(user.FieldPublicArticles, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicComments(); ok {
		_spec.SetField(user.FieldPublicComments, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PublicOnlineStatus(); ok {
		_spec.SetField(user.FieldPublicOnlineStatus, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if _u.mutation.CountryCleared() {
		_spec.ClearField(user.FieldCountry, field.TypeString)
	}
	if value, ok := _u.mutation.Province(); ok {
		_spec.SetField(user.FieldProvince, field.TypeString, value)
	}
	if _u.mutation.ProvinceCleared() {
		_spec.ClearField(user.FieldProvince, field.TypeString)
	}
	if value, ok := _u.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if _u.mutation.CityCleared() {
		_spec.ClearField(user.FieldCity, field.TypeString)
	}
	if value, ok := _u.mutation.PublicLocation(); ok {
		_spec.SetField(user.FieldPublicLocation, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TwofaSecret(); ok {
		_spec.SetField(user.FieldTwofaSecret, field.TypeString, value)
	}
	if _u.mutation.TwofaSecretCleared() {
		_spec.ClearField(user.FieldTwofaSecret, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
