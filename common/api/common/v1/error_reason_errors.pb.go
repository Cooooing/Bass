// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UnknownError.String() && e.Code == 500
}

// 未知错误
func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UnknownError.String(), fmt.Sprintf(format, args...))
}

// 请求语法错误、参数错误
func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BadRequest.String() && e.Code == 400
}

// 请求语法错误、参数错误
func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BadRequest.String(), fmt.Sprintf(format, args...))
}

// 未认证，需身份验证
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Unauthorized.String() && e.Code == 401
}

// 未认证，需身份验证
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_Unauthorized.String(), fmt.Sprintf(format, args...))
}

// 保留，支付相关
func IsPaymentRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PaymentRequired.String() && e.Code == 402
}

// 保留，支付相关
func ErrorPaymentRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(402, ErrorReason_PaymentRequired.String(), fmt.Sprintf(format, args...))
}

// 已认证但无权限访问
func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Forbidden.String() && e.Code == 403
}

// 已认证但无权限访问
func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_Forbidden.String(), fmt.Sprintf(format, args...))
}

// 请求资源不存在
func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFound.String() && e.Code == 404
}

// 请求资源不存在
func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_NotFound.String(), fmt.Sprintf(format, args...))
}

// 请求方法不被允许
func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MethodNotAllowed.String() && e.Code == 405
}

// 请求方法不被允许
func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_MethodNotAllowed.String(), fmt.Sprintf(format, args...))
}

// 无可接受的内容
func IsNotAcceptable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotAcceptable.String() && e.Code == 406
}

// 无可接受的内容
func ErrorNotAcceptable(format string, args ...interface{}) *errors.Error {
	return errors.New(406, ErrorReason_NotAcceptable.String(), fmt.Sprintf(format, args...))
}

// 代理认证
func IsProxyAuthenticationRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ProxyAuthenticationRequired.String() && e.Code == 407
}

// 代理认证
func ErrorProxyAuthenticationRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(407, ErrorReason_ProxyAuthenticationRequired.String(), fmt.Sprintf(format, args...))
}

// 请求超时
func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RequestTimeout.String() && e.Code == 408
}

// 请求超时
func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ErrorReason_RequestTimeout.String(), fmt.Sprintf(format, args...))
}

// 请求与服务器状态冲突
func IsConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Conflict.String() && e.Code == 409
}

// 请求与服务器状态冲突
func ErrorConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_Conflict.String(), fmt.Sprintf(format, args...))
}

// 资源永久删除
func IsGone(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Gone.String() && e.Code == 410
}

// 资源永久删除
func ErrorGone(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_Gone.String(), fmt.Sprintf(format, args...))
}

// 需 Content-Length 头
func IsLengthRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LengthRequired.String() && e.Code == 411
}

// 需 Content-Length 头
func ErrorLengthRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(411, ErrorReason_LengthRequired.String(), fmt.Sprintf(format, args...))
}

// 前置条件失败
func IsPreconditionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PreconditionFailed.String() && e.Code == 412
}

// 前置条件失败
func ErrorPreconditionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(412, ErrorReason_PreconditionFailed.String(), fmt.Sprintf(format, args...))
}

// 请求实体过大
func IsPayloadTooLarge(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PayloadTooLarge.String() && e.Code == 413
}

// 请求实体过大
func ErrorPayloadTooLarge(format string, args ...interface{}) *errors.Error {
	return errors.New(413, ErrorReason_PayloadTooLarge.String(), fmt.Sprintf(format, args...))
}

// URI 过长
func IsURITooLong(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_URITooLong.String() && e.Code == 414
}

// URI 过长
func ErrorURITooLong(format string, args ...interface{}) *errors.Error {
	return errors.New(414, ErrorReason_URITooLong.String(), fmt.Sprintf(format, args...))
}

// 不支持的媒体类型
func IsUnsupportedMediaType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UnsupportedMediaType.String() && e.Code == 415
}

// 不支持的媒体类型
func ErrorUnsupportedMediaType(format string, args ...interface{}) *errors.Error {
	return errors.New(415, ErrorReason_UnsupportedMediaType.String(), fmt.Sprintf(format, args...))
}

// Range 请求不可满足
func IsRangeNotSatisfiable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RangeNotSatisfiable.String() && e.Code == 416
}

// Range 请求不可满足
func ErrorRangeNotSatisfiable(format string, args ...interface{}) *errors.Error {
	return errors.New(416, ErrorReason_RangeNotSatisfiable.String(), fmt.Sprintf(format, args...))
}

// Expect 请求无法满足
func IsExpectationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExpectationFailed.String() && e.Code == 417
}

// Expect 请求无法满足
func ErrorExpectationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(417, ErrorReason_ExpectationFailed.String(), fmt.Sprintf(format, args...))
}

// 玩笑：茶壶不能煮咖啡
func IsImATeapot(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ImATeapot.String() && e.Code == 418
}

// 玩笑：茶壶不能煮咖啡
func ErrorImATeapot(format string, args ...interface{}) *errors.Error {
	return errors.New(418, ErrorReason_ImATeapot.String(), fmt.Sprintf(format, args...))
}

// 请求被错误路由
func IsMisdirectedRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MisdirectedRequest.String() && e.Code == 421
}

// 请求被错误路由
func ErrorMisdirectedRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(421, ErrorReason_MisdirectedRequest.String(), fmt.Sprintf(format, args...))
}

// WebDAV：语义错误无法处理
func IsUnprocessableEntity(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UnprocessableEntity.String() && e.Code == 422
}

// WebDAV：语义错误无法处理
func ErrorUnprocessableEntity(format string, args ...interface{}) *errors.Error {
	return errors.New(422, ErrorReason_UnprocessableEntity.String(), fmt.Sprintf(format, args...))
}

// WebDAV：资源锁定
func IsLocked(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Locked.String() && e.Code == 423
}

// WebDAV：资源锁定
func ErrorLocked(format string, args ...interface{}) *errors.Error {
	return errors.New(423, ErrorReason_Locked.String(), fmt.Sprintf(format, args...))
}

// WebDAV：前置请求失败
func IsFailedDependency(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FailedDependency.String() && e.Code == 424
}

// WebDAV：前置请求失败
func ErrorFailedDependency(format string, args ...interface{}) *errors.Error {
	return errors.New(424, ErrorReason_FailedDependency.String(), fmt.Sprintf(format, args...))
}

// 实验性：请求过早
func IsTooEarly(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TooEarly.String() && e.Code == 425
}

// 实验性：请求过早
func ErrorTooEarly(format string, args ...interface{}) *errors.Error {
	return errors.New(425, ErrorReason_TooEarly.String(), fmt.Sprintf(format, args...))
}

// 需升级协议
func IsUpgradeRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UpgradeRequired.String() && e.Code == 426
}

// 需升级协议
func ErrorUpgradeRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(426, ErrorReason_UpgradeRequired.String(), fmt.Sprintf(format, args...))
}

// 需前置条件，防止丢失更新
func IsPreconditionRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PreconditionRequired.String() && e.Code == 428
}

// 需前置条件，防止丢失更新
func ErrorPreconditionRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(428, ErrorReason_PreconditionRequired.String(), fmt.Sprintf(format, args...))
}

// 请求过多，限流
func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TooManyRequests.String() && e.Code == 429
}

// 请求过多，限流
func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorReason_TooManyRequests.String(), fmt.Sprintf(format, args...))
}

// 请求头字段过大
func IsRequestHeaderFieldsTooLarge(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RequestHeaderFieldsTooLarge.String() && e.Code == 431
}

// 请求头字段过大
func ErrorRequestHeaderFieldsTooLarge(format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorReason_RequestHeaderFieldsTooLarge.String(), fmt.Sprintf(format, args...))
}

// 法律原因不可用
func IsUnavailableForLegalReasons(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UnavailableForLegalReasons.String() && e.Code == 451
}

// 法律原因不可用
func ErrorUnavailableForLegalReasons(format string, args ...interface{}) *errors.Error {
	return errors.New(451, ErrorReason_UnavailableForLegalReasons.String(), fmt.Sprintf(format, args...))
}

// 服务器内部错误
func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InternalServerError.String() && e.Code == 500
}

// 服务器内部错误
func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_InternalServerError.String(), fmt.Sprintf(format, args...))
}

// 功能未实现
func IsNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotImplemented.String() && e.Code == 501
}

// 功能未实现
func ErrorNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorReason_NotImplemented.String(), fmt.Sprintf(format, args...))
}

// 上游网关错误
func IsBadGateway(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BadGateway.String() && e.Code == 502
}

// 上游网关错误
func ErrorBadGateway(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorReason_BadGateway.String(), fmt.Sprintf(format, args...))
}

// 服务暂不可用
func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ServiceUnavailable.String() && e.Code == 503
}

// 服务暂不可用
func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_ServiceUnavailable.String(), fmt.Sprintf(format, args...))
}

// 上游网关超时
func IsGatewayTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GatewayTimeout.String() && e.Code == 504
}

// 上游网关超时
func ErrorGatewayTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorReason_GatewayTimeout.String(), fmt.Sprintf(format, args...))
}

// HTTP 版本不支持
func IsHTTPVersionNotSupported(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_HTTPVersionNotSupported.String() && e.Code == 505
}

// HTTP 版本不支持
func ErrorHTTPVersionNotSupported(format string, args ...interface{}) *errors.Error {
	return errors.New(505, ErrorReason_HTTPVersionNotSupported.String(), fmt.Sprintf(format, args...))
}

// 内部配置错误
func IsVariantAlsoNegotiates(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VariantAlsoNegotiates.String() && e.Code == 506
}

// 内部配置错误
func ErrorVariantAlsoNegotiates(format string, args ...interface{}) *errors.Error {
	return errors.New(506, ErrorReason_VariantAlsoNegotiates.String(), fmt.Sprintf(format, args...))
}

// WebDAV：存储不足
func IsInsufficientStorage(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InsufficientStorage.String() && e.Code == 507
}

// WebDAV：存储不足
func ErrorInsufficientStorage(format string, args ...interface{}) *errors.Error {
	return errors.New(507, ErrorReason_InsufficientStorage.String(), fmt.Sprintf(format, args...))
}

// WebDAV：循环检测
func IsLoopDetected(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LoopDetected.String() && e.Code == 508
}

// WebDAV：循环检测
func ErrorLoopDetected(format string, args ...interface{}) *errors.Error {
	return errors.New(508, ErrorReason_LoopDetected.String(), fmt.Sprintf(format, args...))
}

// 请求需扩展才能完成
func IsNotExtended(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExtended.String() && e.Code == 510
}

// 请求需扩展才能完成
func ErrorNotExtended(format string, args ...interface{}) *errors.Error {
	return errors.New(510, ErrorReason_NotExtended.String(), fmt.Sprintf(format, args...))
}

// 网络认证要求
func IsNetworkAuthenticationRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NetworkAuthenticationRequired.String() && e.Code == 511
}

// 网络认证要求
func ErrorNetworkAuthenticationRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(511, ErrorReason_NetworkAuthenticationRequired.String(), fmt.Sprintf(format, args...))
}
