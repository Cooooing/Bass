// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: content/v1/article.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddArticleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddArticleRequestMultiError, or nil if none found.
func (m *AddArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := AddArticleRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddArticleRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RewardContent

	if m.GetRewardPoints() < 0 {
		err := AddArticleRequestValidationError{
			field:  "RewardPoints",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Type

	if m.GetBountyPoints() < 0 {
		err := AddArticleRequestValidationError{
			field:  "BountyPoints",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddArticleRequestMultiError(errors)
	}

	return nil
}

// AddArticleRequestMultiError is an error wrapping multiple validation errors
// returned by AddArticleRequest.ValidateAll() if the designated constraints
// aren't met.
type AddArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddArticleRequestMultiError) AllErrors() []error { return m }

// AddArticleRequestValidationError is the validation error returned by
// AddArticleRequest.Validate if the designated constraints aren't met.
type AddArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddArticleRequestValidationError) ErrorName() string {
	return "AddArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddArticleRequestValidationError{}

// Validate checks the field values on AddArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddArticleReplyMultiError, or nil if none found.
func (m *AddArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddArticleReplyMultiError(errors)
	}

	return nil
}

// AddArticleReplyMultiError is an error wrapping multiple validation errors
// returned by AddArticleReply.ValidateAll() if the designated constraints
// aren't met.
type AddArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddArticleReplyMultiError) AllErrors() []error { return m }

// AddArticleReplyValidationError is the validation error returned by
// AddArticleReply.Validate if the designated constraints aren't met.
type AddArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddArticleReplyValidationError) ErrorName() string { return "AddArticleReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddArticleReplyValidationError{}

// Validate checks the field values on PublishArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishArticleRequestMultiError, or nil if none found.
func (m *PublishArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return PublishArticleRequestMultiError(errors)
	}

	return nil
}

// PublishArticleRequestMultiError is an error wrapping multiple validation
// errors returned by PublishArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishArticleRequestMultiError) AllErrors() []error { return m }

// PublishArticleRequestValidationError is the validation error returned by
// PublishArticleRequest.Validate if the designated constraints aren't met.
type PublishArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishArticleRequestValidationError) ErrorName() string {
	return "PublishArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishArticleRequestValidationError{}

// Validate checks the field values on PublishArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishArticleReplyMultiError, or nil if none found.
func (m *PublishArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublishArticleReplyMultiError(errors)
	}

	return nil
}

// PublishArticleReplyMultiError is an error wrapping multiple validation
// errors returned by PublishArticleReply.ValidateAll() if the designated
// constraints aren't met.
type PublishArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishArticleReplyMultiError) AllErrors() []error { return m }

// PublishArticleReplyValidationError is the validation error returned by
// PublishArticleReply.Validate if the designated constraints aren't met.
type PublishArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishArticleReplyValidationError) ErrorName() string {
	return "PublishArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PublishArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishArticleReplyValidationError{}

// Validate checks the field values on UpdateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleRequestMultiError, or nil if none found.
func (m *UpdateArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for Status

	// no validation rules for Commentable

	// no validation rules for Anonymous

	if len(errors) > 0 {
		return UpdateArticleRequestMultiError(errors)
	}

	return nil
}

// UpdateArticleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleRequestMultiError) AllErrors() []error { return m }

// UpdateArticleRequestValidationError is the validation error returned by
// UpdateArticleRequest.Validate if the designated constraints aren't met.
type UpdateArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleRequestValidationError) ErrorName() string {
	return "UpdateArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleRequestValidationError{}

// Validate checks the field values on UpdateArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleReplyMultiError, or nil if none found.
func (m *UpdateArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateArticleReplyMultiError(errors)
	}

	return nil
}

// UpdateArticleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateArticleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleReplyMultiError) AllErrors() []error { return m }

// UpdateArticleReplyValidationError is the validation error returned by
// UpdateArticleReply.Validate if the designated constraints aren't met.
type UpdateArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleReplyValidationError) ErrorName() string {
	return "UpdateArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleReplyValidationError{}

// Validate checks the field values on DeleteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleRequestMultiError, or nil if none found.
func (m *DeleteArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return DeleteArticleRequestMultiError(errors)
	}

	return nil
}

// DeleteArticleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleRequestMultiError) AllErrors() []error { return m }

// DeleteArticleRequestValidationError is the validation error returned by
// DeleteArticleRequest.Validate if the designated constraints aren't met.
type DeleteArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleRequestValidationError) ErrorName() string {
	return "DeleteArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleRequestValidationError{}

// Validate checks the field values on DeleteArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleReplyMultiError, or nil if none found.
func (m *DeleteArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteArticleReplyMultiError(errors)
	}

	return nil
}

// DeleteArticleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteArticleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleReplyMultiError) AllErrors() []error { return m }

// DeleteArticleReplyValidationError is the validation error returned by
// DeleteArticleReply.Validate if the designated constraints aren't met.
type DeleteArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleReplyValidationError) ErrorName() string {
	return "DeleteArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleReplyValidationError{}

// Validate checks the field values on GetArticleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleRequestMultiError, or nil if none found.
func (m *GetArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArticleRequestMultiError(errors)
	}

	return nil
}

// GetArticleRequestMultiError is an error wrapping multiple validation errors
// returned by GetArticleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleRequestMultiError) AllErrors() []error { return m }

// GetArticleRequestValidationError is the validation error returned by
// GetArticleRequest.Validate if the designated constraints aren't met.
type GetArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleRequestValidationError) ErrorName() string {
	return "GetArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleRequestValidationError{}

// Validate checks the field values on GetArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleReplyMultiError, or nil if none found.
func (m *GetArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArticleReplyMultiError(errors)
	}

	return nil
}

// GetArticleReplyMultiError is an error wrapping multiple validation errors
// returned by GetArticleReply.ValidateAll() if the designated constraints
// aren't met.
type GetArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleReplyMultiError) AllErrors() []error { return m }

// GetArticleReplyValidationError is the validation error returned by
// GetArticleReply.Validate if the designated constraints aren't met.
type GetArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleReplyValidationError) ErrorName() string { return "GetArticleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleReplyValidationError{}

// Validate checks the field values on GetArticleOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleOneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleOneRequestMultiError, or nil if none found.
func (m *GetArticleOneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleOneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return GetArticleOneRequestMultiError(errors)
	}

	return nil
}

// GetArticleOneRequestMultiError is an error wrapping multiple validation
// errors returned by GetArticleOneRequest.ValidateAll() if the designated
// constraints aren't met.
type GetArticleOneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleOneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleOneRequestMultiError) AllErrors() []error { return m }

// GetArticleOneRequestValidationError is the validation error returned by
// GetArticleOneRequest.Validate if the designated constraints aren't met.
type GetArticleOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleOneRequestValidationError) ErrorName() string {
	return "GetArticleOneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleOneRequestValidationError{}

// Validate checks the field values on GetArticleOneReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleOneReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleOneReplyMultiError, or nil if none found.
func (m *GetArticleOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return GetArticleOneReplyMultiError(errors)
	}

	return nil
}

// GetArticleOneReplyMultiError is an error wrapping multiple validation errors
// returned by GetArticleOneReply.ValidateAll() if the designated constraints
// aren't met.
type GetArticleOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleOneReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleOneReplyMultiError) AllErrors() []error { return m }

// GetArticleOneReplyValidationError is the validation error returned by
// GetArticleOneReply.Validate if the designated constraints aren't met.
type GetArticleOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleOneReplyValidationError) ErrorName() string {
	return "GetArticleOneReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleOneReplyValidationError{}

// Validate checks the field values on AddPostscriptArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostscriptArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostscriptArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostscriptArticleRequestMultiError, or nil if none found.
func (m *AddPostscriptArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostscriptArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddPostscriptArticleRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPostscriptArticleRequestMultiError(errors)
	}

	return nil
}

// AddPostscriptArticleRequestMultiError is an error wrapping multiple
// validation errors returned by AddPostscriptArticleRequest.ValidateAll() if
// the designated constraints aren't met.
type AddPostscriptArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostscriptArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostscriptArticleRequestMultiError) AllErrors() []error { return m }

// AddPostscriptArticleRequestValidationError is the validation error returned
// by AddPostscriptArticleRequest.Validate if the designated constraints
// aren't met.
type AddPostscriptArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostscriptArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostscriptArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostscriptArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostscriptArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostscriptArticleRequestValidationError) ErrorName() string {
	return "AddPostscriptArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostscriptArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostscriptArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostscriptArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostscriptArticleRequestValidationError{}

// Validate checks the field values on AddPostscriptArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostscriptArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostscriptArticleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostscriptArticleReplyMultiError, or nil if none found.
func (m *AddPostscriptArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostscriptArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddPostscriptArticleReplyMultiError(errors)
	}

	return nil
}

// AddPostscriptArticleReplyMultiError is an error wrapping multiple validation
// errors returned by AddPostscriptArticleReply.ValidateAll() if the
// designated constraints aren't met.
type AddPostscriptArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostscriptArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostscriptArticleReplyMultiError) AllErrors() []error { return m }

// AddPostscriptArticleReplyValidationError is the validation error returned by
// AddPostscriptArticleReply.Validate if the designated constraints aren't met.
type AddPostscriptArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostscriptArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostscriptArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostscriptArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostscriptArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostscriptArticleReplyValidationError) ErrorName() string {
	return "AddPostscriptArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostscriptArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostscriptArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostscriptArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostscriptArticleReplyValidationError{}

// Validate checks the field values on RewardArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RewardArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardArticleRequestMultiError, or nil if none found.
func (m *RewardArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return RewardArticleRequestMultiError(errors)
	}

	return nil
}

// RewardArticleRequestMultiError is an error wrapping multiple validation
// errors returned by RewardArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type RewardArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardArticleRequestMultiError) AllErrors() []error { return m }

// RewardArticleRequestValidationError is the validation error returned by
// RewardArticleRequest.Validate if the designated constraints aren't met.
type RewardArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardArticleRequestValidationError) ErrorName() string {
	return "RewardArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RewardArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardArticleRequestValidationError{}

// Validate checks the field values on RewardArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RewardArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardArticleReplyMultiError, or nil if none found.
func (m *RewardArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RewardArticleReplyMultiError(errors)
	}

	return nil
}

// RewardArticleReplyMultiError is an error wrapping multiple validation errors
// returned by RewardArticleReply.ValidateAll() if the designated constraints
// aren't met.
type RewardArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardArticleReplyMultiError) AllErrors() []error { return m }

// RewardArticleReplyValidationError is the validation error returned by
// RewardArticleReply.Validate if the designated constraints aren't met.
type RewardArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardArticleReplyValidationError) ErrorName() string {
	return "RewardArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RewardArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardArticleReplyValidationError{}

// Validate checks the field values on ThankArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThankArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThankArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThankArticleRequestMultiError, or nil if none found.
func (m *ThankArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ThankArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for Active

	if len(errors) > 0 {
		return ThankArticleRequestMultiError(errors)
	}

	return nil
}

// ThankArticleRequestMultiError is an error wrapping multiple validation
// errors returned by ThankArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type ThankArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThankArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThankArticleRequestMultiError) AllErrors() []error { return m }

// ThankArticleRequestValidationError is the validation error returned by
// ThankArticleRequest.Validate if the designated constraints aren't met.
type ThankArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThankArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThankArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThankArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThankArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThankArticleRequestValidationError) ErrorName() string {
	return "ThankArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ThankArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThankArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThankArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThankArticleRequestValidationError{}

// Validate checks the field values on ThankArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThankArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThankArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThankArticleReplyMultiError, or nil if none found.
func (m *ThankArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ThankArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ThankArticleReplyMultiError(errors)
	}

	return nil
}

// ThankArticleReplyMultiError is an error wrapping multiple validation errors
// returned by ThankArticleReply.ValidateAll() if the designated constraints
// aren't met.
type ThankArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThankArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThankArticleReplyMultiError) AllErrors() []error { return m }

// ThankArticleReplyValidationError is the validation error returned by
// ThankArticleReply.Validate if the designated constraints aren't met.
type ThankArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThankArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThankArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThankArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThankArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThankArticleReplyValidationError) ErrorName() string {
	return "ThankArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ThankArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThankArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThankArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThankArticleReplyValidationError{}

// Validate checks the field values on LikeArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeArticleRequestMultiError, or nil if none found.
func (m *LikeArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for Active

	if len(errors) > 0 {
		return LikeArticleRequestMultiError(errors)
	}

	return nil
}

// LikeArticleRequestMultiError is an error wrapping multiple validation errors
// returned by LikeArticleRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeArticleRequestMultiError) AllErrors() []error { return m }

// LikeArticleRequestValidationError is the validation error returned by
// LikeArticleRequest.Validate if the designated constraints aren't met.
type LikeArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeArticleRequestValidationError) ErrorName() string {
	return "LikeArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeArticleRequestValidationError{}

// Validate checks the field values on LikeArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeArticleReplyMultiError, or nil if none found.
func (m *LikeArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LikeArticleReplyMultiError(errors)
	}

	return nil
}

// LikeArticleReplyMultiError is an error wrapping multiple validation errors
// returned by LikeArticleReply.ValidateAll() if the designated constraints
// aren't met.
type LikeArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeArticleReplyMultiError) AllErrors() []error { return m }

// LikeArticleReplyValidationError is the validation error returned by
// LikeArticleReply.Validate if the designated constraints aren't met.
type LikeArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeArticleReplyValidationError) ErrorName() string { return "LikeArticleReplyValidationError" }

// Error satisfies the builtin error interface
func (e LikeArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeArticleReplyValidationError{}

// Validate checks the field values on CollectArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectArticleRequestMultiError, or nil if none found.
func (m *CollectArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for Active

	if len(errors) > 0 {
		return CollectArticleRequestMultiError(errors)
	}

	return nil
}

// CollectArticleRequestMultiError is an error wrapping multiple validation
// errors returned by CollectArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type CollectArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectArticleRequestMultiError) AllErrors() []error { return m }

// CollectArticleRequestValidationError is the validation error returned by
// CollectArticleRequest.Validate if the designated constraints aren't met.
type CollectArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectArticleRequestValidationError) ErrorName() string {
	return "CollectArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CollectArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectArticleRequestValidationError{}

// Validate checks the field values on CollectArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectArticleReplyMultiError, or nil if none found.
func (m *CollectArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CollectArticleReplyMultiError(errors)
	}

	return nil
}

// CollectArticleReplyMultiError is an error wrapping multiple validation
// errors returned by CollectArticleReply.ValidateAll() if the designated
// constraints aren't met.
type CollectArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectArticleReplyMultiError) AllErrors() []error { return m }

// CollectArticleReplyValidationError is the validation error returned by
// CollectArticleReply.Validate if the designated constraints aren't met.
type CollectArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectArticleReplyValidationError) ErrorName() string {
	return "CollectArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CollectArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectArticleReplyValidationError{}

// Validate checks the field values on WatchArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchArticleRequestMultiError, or nil if none found.
func (m *WatchArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for Active

	if len(errors) > 0 {
		return WatchArticleRequestMultiError(errors)
	}

	return nil
}

// WatchArticleRequestMultiError is an error wrapping multiple validation
// errors returned by WatchArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchArticleRequestMultiError) AllErrors() []error { return m }

// WatchArticleRequestValidationError is the validation error returned by
// WatchArticleRequest.Validate if the designated constraints aren't met.
type WatchArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchArticleRequestValidationError) ErrorName() string {
	return "WatchArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchArticleRequestValidationError{}

// Validate checks the field values on WatchArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WatchArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchArticleReplyMultiError, or nil if none found.
func (m *WatchArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WatchArticleReplyMultiError(errors)
	}

	return nil
}

// WatchArticleReplyMultiError is an error wrapping multiple validation errors
// returned by WatchArticleReply.ValidateAll() if the designated constraints
// aren't met.
type WatchArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchArticleReplyMultiError) AllErrors() []error { return m }

// WatchArticleReplyValidationError is the validation error returned by
// WatchArticleReply.Validate if the designated constraints aren't met.
type WatchArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchArticleReplyValidationError) ErrorName() string {
	return "WatchArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e WatchArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchArticleReplyValidationError{}

// Validate checks the field values on AcceptAnswerArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptAnswerArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptAnswerArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptAnswerArticleRequestMultiError, or nil if none found.
func (m *AcceptAnswerArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptAnswerArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for CommentId

	if len(errors) > 0 {
		return AcceptAnswerArticleRequestMultiError(errors)
	}

	return nil
}

// AcceptAnswerArticleRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptAnswerArticleRequest.ValidateAll() if
// the designated constraints aren't met.
type AcceptAnswerArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptAnswerArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptAnswerArticleRequestMultiError) AllErrors() []error { return m }

// AcceptAnswerArticleRequestValidationError is the validation error returned
// by AcceptAnswerArticleRequest.Validate if the designated constraints aren't met.
type AcceptAnswerArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptAnswerArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptAnswerArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptAnswerArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptAnswerArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptAnswerArticleRequestValidationError) ErrorName() string {
	return "AcceptAnswerArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptAnswerArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptAnswerArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptAnswerArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptAnswerArticleRequestValidationError{}

// Validate checks the field values on AcceptAnswerArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptAnswerArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptAnswerArticleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptAnswerArticleReplyMultiError, or nil if none found.
func (m *AcceptAnswerArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptAnswerArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptAnswerArticleReplyMultiError(errors)
	}

	return nil
}

// AcceptAnswerArticleReplyMultiError is an error wrapping multiple validation
// errors returned by AcceptAnswerArticleReply.ValidateAll() if the designated
// constraints aren't met.
type AcceptAnswerArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptAnswerArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptAnswerArticleReplyMultiError) AllErrors() []error { return m }

// AcceptAnswerArticleReplyValidationError is the validation error returned by
// AcceptAnswerArticleReply.Validate if the designated constraints aren't met.
type AcceptAnswerArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptAnswerArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptAnswerArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptAnswerArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptAnswerArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptAnswerArticleReplyValidationError) ErrorName() string {
	return "AcceptAnswerArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptAnswerArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptAnswerArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptAnswerArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptAnswerArticleReplyValidationError{}

// Validate checks the field values on UpdateStatusArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusArticleRequestMultiError, or nil if none found.
func (m *UpdateStatusArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStatusArticleRequestMultiError(errors)
	}

	return nil
}

// UpdateStatusArticleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStatusArticleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStatusArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusArticleRequestMultiError) AllErrors() []error { return m }

// UpdateStatusArticleRequestValidationError is the validation error returned
// by UpdateStatusArticleRequest.Validate if the designated constraints aren't met.
type UpdateStatusArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusArticleRequestValidationError) ErrorName() string {
	return "UpdateStatusArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusArticleRequestValidationError{}

// Validate checks the field values on UpdateStatusArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusArticleReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusArticleReplyMultiError, or nil if none found.
func (m *UpdateStatusArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStatusArticleReplyMultiError(errors)
	}

	return nil
}

// UpdateStatusArticleReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateStatusArticleReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatusArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusArticleReplyMultiError) AllErrors() []error { return m }

// UpdateStatusArticleReplyValidationError is the validation error returned by
// UpdateStatusArticleReply.Validate if the designated constraints aren't met.
type UpdateStatusArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusArticleReplyValidationError) ErrorName() string {
	return "UpdateStatusArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusArticleReplyValidationError{}

// Validate checks the field values on ArticleEventPublish with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleEventPublish) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleEventPublish with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleEventPublishMultiError, or nil if none found.
func (m *ArticleEventPublish) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleEventPublish) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for RewardContent

	// no validation rules for RewardPoints

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for BountyPoints

	if len(errors) > 0 {
		return ArticleEventPublishMultiError(errors)
	}

	return nil
}

// ArticleEventPublishMultiError is an error wrapping multiple validation
// errors returned by ArticleEventPublish.ValidateAll() if the designated
// constraints aren't met.
type ArticleEventPublishMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleEventPublishMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleEventPublishMultiError) AllErrors() []error { return m }

// ArticleEventPublishValidationError is the validation error returned by
// ArticleEventPublish.Validate if the designated constraints aren't met.
type ArticleEventPublishValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleEventPublishValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleEventPublishValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleEventPublishValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleEventPublishValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleEventPublishValidationError) ErrorName() string {
	return "ArticleEventPublishValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleEventPublishValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleEventPublish.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleEventPublishValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleEventPublishValidationError{}
