// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: content/v1/article.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticleService_Add_FullMethodName           = "/content.v1.ArticleService/Add"
	ArticleService_Update_FullMethodName        = "/content.v1.ArticleService/Update"
	ArticleService_Delete_FullMethodName        = "/content.v1.ArticleService/Delete"
	ArticleService_Get_FullMethodName           = "/content.v1.ArticleService/Get"
	ArticleService_AddPostscript_FullMethodName = "/content.v1.ArticleService/AddPostscript"
	ArticleService_Reward_FullMethodName        = "/content.v1.ArticleService/Reward"
	ArticleService_Thank_FullMethodName         = "/content.v1.ArticleService/Thank"
	ArticleService_Like_FullMethodName          = "/content.v1.ArticleService/Like"
	ArticleService_Collect_FullMethodName       = "/content.v1.ArticleService/Collect"
	ArticleService_Watch_FullMethodName         = "/content.v1.ArticleService/Watch"
	ArticleService_AcceptAnswer_FullMethodName  = "/content.v1.ArticleService/AcceptAnswer"
	ArticleService_UpdateStatus_FullMethodName  = "/content.v1.ArticleService/UpdateStatus"
)

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Article 服务
type ArticleServiceClient interface {
	// 新增文章
	Add(ctx context.Context, in *AddArticleRequest, opts ...grpc.CallOption) (*AddArticleReply, error)
	// 修改文章
	Update(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleReply, error)
	// 删除文章（仅草稿）
	Delete(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleReply, error)
	// 查询文章
	Get(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleReply, error)
	// 添加附言
	AddPostscript(ctx context.Context, in *AddPostscriptArticleRequest, opts ...grpc.CallOption) (*AddPostscriptArticleReply, error)
	// 打赏文章
	Reward(ctx context.Context, in *RewardArticleRequest, opts ...grpc.CallOption) (*RewardArticleReply, error)
	// 感谢文章
	Thank(ctx context.Context, in *ThankArticleRequest, opts ...grpc.CallOption) (*ThankArticleReply, error)
	// 点赞/踩文章
	Like(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*LikeArticleReply, error)
	// 收藏文章
	Collect(ctx context.Context, in *CollectArticleRequest, opts ...grpc.CallOption) (*CollectArticleReply, error)
	// 关注文章
	Watch(ctx context.Context, in *WatchArticleRequest, opts ...grpc.CallOption) (*WatchArticleReply, error)
	// 采纳评论
	AcceptAnswer(ctx context.Context, in *AcceptAnswerArticleRequest, opts ...grpc.CallOption) (*AcceptAnswerArticleReply, error)
	// 修改文章状态
	UpdateStatus(ctx context.Context, in *UpdateStatusArticleRequest, opts ...grpc.CallOption) (*UpdateStatusArticleReply, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Add(ctx context.Context, in *AddArticleRequest, opts ...grpc.CallOption) (*AddArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Update(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Delete(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Get(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) AddPostscript(ctx context.Context, in *AddPostscriptArticleRequest, opts ...grpc.CallOption) (*AddPostscriptArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPostscriptArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_AddPostscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Reward(ctx context.Context, in *RewardArticleRequest, opts ...grpc.CallOption) (*RewardArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RewardArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Reward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Thank(ctx context.Context, in *ThankArticleRequest, opts ...grpc.CallOption) (*ThankArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThankArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Thank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Like(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*LikeArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Collect(ctx context.Context, in *CollectArticleRequest, opts ...grpc.CallOption) (*CollectArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Watch(ctx context.Context, in *WatchArticleRequest, opts ...grpc.CallOption) (*WatchArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_Watch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) AcceptAnswer(ctx context.Context, in *AcceptAnswerArticleRequest, opts ...grpc.CallOption) (*AcceptAnswerArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptAnswerArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_AcceptAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusArticleRequest, opts ...grpc.CallOption) (*UpdateStatusArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusArticleReply)
	err := c.cc.Invoke(ctx, ArticleService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility.
//
// Article 服务
type ArticleServiceServer interface {
	// 新增文章
	Add(context.Context, *AddArticleRequest) (*AddArticleReply, error)
	// 修改文章
	Update(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error)
	// 删除文章（仅草稿）
	Delete(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error)
	// 查询文章
	Get(context.Context, *GetArticleRequest) (*GetArticleReply, error)
	// 添加附言
	AddPostscript(context.Context, *AddPostscriptArticleRequest) (*AddPostscriptArticleReply, error)
	// 打赏文章
	Reward(context.Context, *RewardArticleRequest) (*RewardArticleReply, error)
	// 感谢文章
	Thank(context.Context, *ThankArticleRequest) (*ThankArticleReply, error)
	// 点赞/踩文章
	Like(context.Context, *LikeArticleRequest) (*LikeArticleReply, error)
	// 收藏文章
	Collect(context.Context, *CollectArticleRequest) (*CollectArticleReply, error)
	// 关注文章
	Watch(context.Context, *WatchArticleRequest) (*WatchArticleReply, error)
	// 采纳评论
	AcceptAnswer(context.Context, *AcceptAnswerArticleRequest) (*AcceptAnswerArticleReply, error)
	// 修改文章状态
	UpdateStatus(context.Context, *UpdateStatusArticleRequest) (*UpdateStatusArticleReply, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServiceServer struct{}

func (UnimplementedArticleServiceServer) Add(context.Context, *AddArticleRequest) (*AddArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedArticleServiceServer) Update(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedArticleServiceServer) Delete(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedArticleServiceServer) Get(context.Context, *GetArticleRequest) (*GetArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedArticleServiceServer) AddPostscript(context.Context, *AddPostscriptArticleRequest) (*AddPostscriptArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostscript not implemented")
}
func (UnimplementedArticleServiceServer) Reward(context.Context, *RewardArticleRequest) (*RewardArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (UnimplementedArticleServiceServer) Thank(context.Context, *ThankArticleRequest) (*ThankArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thank not implemented")
}
func (UnimplementedArticleServiceServer) Like(context.Context, *LikeArticleRequest) (*LikeArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedArticleServiceServer) Collect(context.Context, *CollectArticleRequest) (*CollectArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedArticleServiceServer) Watch(context.Context, *WatchArticleRequest) (*WatchArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedArticleServiceServer) AcceptAnswer(context.Context, *AcceptAnswerArticleRequest) (*AcceptAnswerArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAnswer not implemented")
}
func (UnimplementedArticleServiceServer) UpdateStatus(context.Context, *UpdateStatusArticleRequest) (*UpdateStatusArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}
func (UnimplementedArticleServiceServer) testEmbeddedByValue()                        {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Add(ctx, req.(*AddArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Update(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Delete(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Get(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_AddPostscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostscriptArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).AddPostscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_AddPostscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).AddPostscript(ctx, req.(*AddPostscriptArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Reward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Reward(ctx, req.(*RewardArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Thank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThankArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Thank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Thank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Thank(ctx, req.(*ThankArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Like(ctx, req.(*LikeArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Collect(ctx, req.(*CollectArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_Watch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Watch(ctx, req.(*WatchArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_AcceptAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAnswerArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).AcceptAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_AcceptAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).AcceptAnswer(ctx, req.(*AcceptAnswerArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).UpdateStatus(ctx, req.(*UpdateStatusArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.v1.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ArticleService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArticleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArticleService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ArticleService_Get_Handler,
		},
		{
			MethodName: "AddPostscript",
			Handler:    _ArticleService_AddPostscript_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _ArticleService_Reward_Handler,
		},
		{
			MethodName: "Thank",
			Handler:    _ArticleService_Thank_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _ArticleService_Like_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _ArticleService_Collect_Handler,
		},
		{
			MethodName: "Watch",
			Handler:    _ArticleService_Watch_Handler,
		},
		{
			MethodName: "AcceptAnswer",
			Handler:    _ArticleService_AcceptAnswer_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ArticleService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/v1/article.proto",
}
