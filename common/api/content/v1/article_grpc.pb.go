// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: content/v1/article.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentArticleService_Add_FullMethodName           = "/common.api.content.v1.ContentArticleService/Add"
	ContentArticleService_Publish_FullMethodName       = "/common.api.content.v1.ContentArticleService/Publish"
	ContentArticleService_Update_FullMethodName        = "/common.api.content.v1.ContentArticleService/Update"
	ContentArticleService_Delete_FullMethodName        = "/common.api.content.v1.ContentArticleService/Delete"
	ContentArticleService_Get_FullMethodName           = "/common.api.content.v1.ContentArticleService/Get"
	ContentArticleService_GetOne_FullMethodName        = "/common.api.content.v1.ContentArticleService/GetOne"
	ContentArticleService_AddPostscript_FullMethodName = "/common.api.content.v1.ContentArticleService/AddPostscript"
	ContentArticleService_Reward_FullMethodName        = "/common.api.content.v1.ContentArticleService/Reward"
	ContentArticleService_Thank_FullMethodName         = "/common.api.content.v1.ContentArticleService/Thank"
	ContentArticleService_Like_FullMethodName          = "/common.api.content.v1.ContentArticleService/Like"
	ContentArticleService_Collect_FullMethodName       = "/common.api.content.v1.ContentArticleService/Collect"
	ContentArticleService_Watch_FullMethodName         = "/common.api.content.v1.ContentArticleService/Watch"
	ContentArticleService_AcceptAnswer_FullMethodName  = "/common.api.content.v1.ContentArticleService/AcceptAnswer"
)

// ContentArticleServiceClient is the client API for ContentArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Article 服务
type ContentArticleServiceClient interface {
	// 新增文章
	Add(ctx context.Context, in *AddArticleRequest, opts ...grpc.CallOption) (*AddArticleReply, error)
	// 发布文章（从草稿发布）
	Publish(ctx context.Context, in *PublishArticleRequest, opts ...grpc.CallOption) (*PublishArticleReply, error)
	// 修改文章（管理员使用）
	Update(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleReply, error)
	// 删除文章（仅草稿）
	Delete(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleReply, error)
	// 查询文章
	Get(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleReply, error)
	// 查询单篇文章
	GetOne(ctx context.Context, in *GetArticleOneRequest, opts ...grpc.CallOption) (*GetArticleOneReply, error)
	// 添加附言
	AddPostscript(ctx context.Context, in *AddPostscriptArticleRequest, opts ...grpc.CallOption) (*AddPostscriptArticleReply, error)
	// 打赏文章
	Reward(ctx context.Context, in *RewardArticleRequest, opts ...grpc.CallOption) (*RewardArticleReply, error)
	// 感谢文章
	Thank(ctx context.Context, in *ThankArticleRequest, opts ...grpc.CallOption) (*ThankArticleReply, error)
	// 点赞文章
	Like(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*LikeArticleReply, error)
	// 收藏文章
	Collect(ctx context.Context, in *CollectArticleRequest, opts ...grpc.CallOption) (*CollectArticleReply, error)
	// 关注文章
	Watch(ctx context.Context, in *WatchArticleRequest, opts ...grpc.CallOption) (*WatchArticleReply, error)
	// 采纳评论
	AcceptAnswer(ctx context.Context, in *AcceptAnswerArticleRequest, opts ...grpc.CallOption) (*AcceptAnswerArticleReply, error)
}

type contentArticleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentArticleServiceClient(cc grpc.ClientConnInterface) ContentArticleServiceClient {
	return &contentArticleServiceClient{cc}
}

func (c *contentArticleServiceClient) Add(ctx context.Context, in *AddArticleRequest, opts ...grpc.CallOption) (*AddArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Publish(ctx context.Context, in *PublishArticleRequest, opts ...grpc.CallOption) (*PublishArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Update(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Delete(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Get(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) GetOne(ctx context.Context, in *GetArticleOneRequest, opts ...grpc.CallOption) (*GetArticleOneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleOneReply)
	err := c.cc.Invoke(ctx, ContentArticleService_GetOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) AddPostscript(ctx context.Context, in *AddPostscriptArticleRequest, opts ...grpc.CallOption) (*AddPostscriptArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPostscriptArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_AddPostscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Reward(ctx context.Context, in *RewardArticleRequest, opts ...grpc.CallOption) (*RewardArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RewardArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Reward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Thank(ctx context.Context, in *ThankArticleRequest, opts ...grpc.CallOption) (*ThankArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThankArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Thank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Like(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*LikeArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Collect(ctx context.Context, in *CollectArticleRequest, opts ...grpc.CallOption) (*CollectArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) Watch(ctx context.Context, in *WatchArticleRequest, opts ...grpc.CallOption) (*WatchArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WatchArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_Watch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentArticleServiceClient) AcceptAnswer(ctx context.Context, in *AcceptAnswerArticleRequest, opts ...grpc.CallOption) (*AcceptAnswerArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptAnswerArticleReply)
	err := c.cc.Invoke(ctx, ContentArticleService_AcceptAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentArticleServiceServer is the server API for ContentArticleService service.
// All implementations must embed UnimplementedContentArticleServiceServer
// for forward compatibility.
//
// Article 服务
type ContentArticleServiceServer interface {
	// 新增文章
	Add(context.Context, *AddArticleRequest) (*AddArticleReply, error)
	// 发布文章（从草稿发布）
	Publish(context.Context, *PublishArticleRequest) (*PublishArticleReply, error)
	// 修改文章（管理员使用）
	Update(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error)
	// 删除文章（仅草稿）
	Delete(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error)
	// 查询文章
	Get(context.Context, *GetArticleRequest) (*GetArticleReply, error)
	// 查询单篇文章
	GetOne(context.Context, *GetArticleOneRequest) (*GetArticleOneReply, error)
	// 添加附言
	AddPostscript(context.Context, *AddPostscriptArticleRequest) (*AddPostscriptArticleReply, error)
	// 打赏文章
	Reward(context.Context, *RewardArticleRequest) (*RewardArticleReply, error)
	// 感谢文章
	Thank(context.Context, *ThankArticleRequest) (*ThankArticleReply, error)
	// 点赞文章
	Like(context.Context, *LikeArticleRequest) (*LikeArticleReply, error)
	// 收藏文章
	Collect(context.Context, *CollectArticleRequest) (*CollectArticleReply, error)
	// 关注文章
	Watch(context.Context, *WatchArticleRequest) (*WatchArticleReply, error)
	// 采纳评论
	AcceptAnswer(context.Context, *AcceptAnswerArticleRequest) (*AcceptAnswerArticleReply, error)
	mustEmbedUnimplementedContentArticleServiceServer()
}

// UnimplementedContentArticleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentArticleServiceServer struct{}

func (UnimplementedContentArticleServiceServer) Add(context.Context, *AddArticleRequest) (*AddArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedContentArticleServiceServer) Publish(context.Context, *PublishArticleRequest) (*PublishArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedContentArticleServiceServer) Update(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContentArticleServiceServer) Delete(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContentArticleServiceServer) Get(context.Context, *GetArticleRequest) (*GetArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContentArticleServiceServer) GetOne(context.Context, *GetArticleOneRequest) (*GetArticleOneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedContentArticleServiceServer) AddPostscript(context.Context, *AddPostscriptArticleRequest) (*AddPostscriptArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostscript not implemented")
}
func (UnimplementedContentArticleServiceServer) Reward(context.Context, *RewardArticleRequest) (*RewardArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (UnimplementedContentArticleServiceServer) Thank(context.Context, *ThankArticleRequest) (*ThankArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thank not implemented")
}
func (UnimplementedContentArticleServiceServer) Like(context.Context, *LikeArticleRequest) (*LikeArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedContentArticleServiceServer) Collect(context.Context, *CollectArticleRequest) (*CollectArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedContentArticleServiceServer) Watch(context.Context, *WatchArticleRequest) (*WatchArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedContentArticleServiceServer) AcceptAnswer(context.Context, *AcceptAnswerArticleRequest) (*AcceptAnswerArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAnswer not implemented")
}
func (UnimplementedContentArticleServiceServer) mustEmbedUnimplementedContentArticleServiceServer() {}
func (UnimplementedContentArticleServiceServer) testEmbeddedByValue()                               {}

// UnsafeContentArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentArticleServiceServer will
// result in compilation errors.
type UnsafeContentArticleServiceServer interface {
	mustEmbedUnimplementedContentArticleServiceServer()
}

func RegisterContentArticleServiceServer(s grpc.ServiceRegistrar, srv ContentArticleServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentArticleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentArticleService_ServiceDesc, srv)
}

func _ContentArticleService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Add(ctx, req.(*AddArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Publish(ctx, req.(*PublishArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Update(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Delete(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Get(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).GetOne(ctx, req.(*GetArticleOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_AddPostscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostscriptArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).AddPostscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_AddPostscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).AddPostscript(ctx, req.(*AddPostscriptArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Reward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Reward(ctx, req.(*RewardArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Thank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThankArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Thank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Thank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Thank(ctx, req.(*ThankArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Like(ctx, req.(*LikeArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Collect(ctx, req.(*CollectArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_Watch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).Watch(ctx, req.(*WatchArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentArticleService_AcceptAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAnswerArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentArticleServiceServer).AcceptAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentArticleService_AcceptAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentArticleServiceServer).AcceptAnswer(ctx, req.(*AcceptAnswerArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentArticleService_ServiceDesc is the grpc.ServiceDesc for ContentArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.api.content.v1.ContentArticleService",
	HandlerType: (*ContentArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ContentArticleService_Add_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ContentArticleService_Publish_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ContentArticleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContentArticleService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContentArticleService_Get_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _ContentArticleService_GetOne_Handler,
		},
		{
			MethodName: "AddPostscript",
			Handler:    _ContentArticleService_AddPostscript_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _ContentArticleService_Reward_Handler,
		},
		{
			MethodName: "Thank",
			Handler:    _ContentArticleService_Thank_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _ContentArticleService_Like_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _ContentArticleService_Collect_Handler,
		},
		{
			MethodName: "Watch",
			Handler:    _ContentArticleService_Watch_Handler,
		},
		{
			MethodName: "AcceptAnswer",
			Handler:    _ContentArticleService_AcceptAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/v1/article.proto",
}
