// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.29.0--rc2
// source: content/v1/article.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationContentArticleServiceAcceptAnswer = "/common.api.content.v1.ContentArticleService/AcceptAnswer"
const OperationContentArticleServiceAdd = "/common.api.content.v1.ContentArticleService/Add"
const OperationContentArticleServiceAddPostscript = "/common.api.content.v1.ContentArticleService/AddPostscript"
const OperationContentArticleServiceCollect = "/common.api.content.v1.ContentArticleService/Collect"
const OperationContentArticleServiceDelete = "/common.api.content.v1.ContentArticleService/Delete"
const OperationContentArticleServiceGet = "/common.api.content.v1.ContentArticleService/Get"
const OperationContentArticleServiceGetOne = "/common.api.content.v1.ContentArticleService/GetOne"
const OperationContentArticleServiceLike = "/common.api.content.v1.ContentArticleService/Like"
const OperationContentArticleServicePublish = "/common.api.content.v1.ContentArticleService/Publish"
const OperationContentArticleServiceReward = "/common.api.content.v1.ContentArticleService/Reward"
const OperationContentArticleServiceThank = "/common.api.content.v1.ContentArticleService/Thank"
const OperationContentArticleServiceUpdate = "/common.api.content.v1.ContentArticleService/Update"
const OperationContentArticleServiceWatch = "/common.api.content.v1.ContentArticleService/Watch"

type ContentArticleServiceHTTPServer interface {
	// AcceptAnswer 采纳评论
	AcceptAnswer(context.Context, *AcceptAnswerArticleRequest) (*AcceptAnswerArticleReply, error)
	// Add 新增文章
	Add(context.Context, *AddArticleRequest) (*AddArticleReply, error)
	// AddPostscript 添加附言
	AddPostscript(context.Context, *AddPostscriptArticleRequest) (*AddPostscriptArticleReply, error)
	// Collect 收藏文章
	Collect(context.Context, *CollectArticleRequest) (*CollectArticleReply, error)
	// Delete 删除文章（仅草稿）
	Delete(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error)
	// Get 查询文章
	Get(context.Context, *GetArticleRequest) (*GetArticleReply, error)
	// GetOne 查询单篇文章
	GetOne(context.Context, *GetArticleOneRequest) (*GetArticleOneReply, error)
	// Like 点赞文章
	Like(context.Context, *LikeArticleRequest) (*LikeArticleReply, error)
	// Publish 发布文章（从草稿发布）
	Publish(context.Context, *PublishArticleRequest) (*PublishArticleReply, error)
	// Reward 打赏文章
	Reward(context.Context, *RewardArticleRequest) (*RewardArticleReply, error)
	// Thank 感谢文章
	Thank(context.Context, *ThankArticleRequest) (*ThankArticleReply, error)
	// Update 修改文章（管理员使用）
	Update(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error)
	// Watch 关注文章
	Watch(context.Context, *WatchArticleRequest) (*WatchArticleReply, error)
}

func RegisterContentArticleServiceHTTPServer(s *http.Server, srv ContentArticleServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/article/add", _ContentArticleService_Add0_HTTP_Handler(srv))
	r.POST("/v1/article/publish", _ContentArticleService_Publish0_HTTP_Handler(srv))
	r.POST("/v1/article/update", _ContentArticleService_Update0_HTTP_Handler(srv))
	r.POST("/v1/article/delete", _ContentArticleService_Delete0_HTTP_Handler(srv))
	r.POST("/v1/article/get", _ContentArticleService_Get0_HTTP_Handler(srv))
	r.POST("/v1/article/getOne", _ContentArticleService_GetOne0_HTTP_Handler(srv))
	r.POST("/v1/article/addPostscript", _ContentArticleService_AddPostscript0_HTTP_Handler(srv))
	r.POST("/v1/article/reward", _ContentArticleService_Reward0_HTTP_Handler(srv))
	r.POST("/v1/article/thank", _ContentArticleService_Thank0_HTTP_Handler(srv))
	r.POST("/v1/article/like", _ContentArticleService_Like0_HTTP_Handler(srv))
	r.POST("/v1/article/collect", _ContentArticleService_Collect0_HTTP_Handler(srv))
	r.POST("/v1/article/watch", _ContentArticleService_Watch0_HTTP_Handler(srv))
	r.POST("/v1/article/acceptAnswer", _ContentArticleService_AcceptAnswer0_HTTP_Handler(srv))
}

func _ContentArticleService_Add0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Publish0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServicePublish)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Publish(ctx, req.(*PublishArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Update0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Delete0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeleteArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Get0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_GetOne0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleOneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceGetOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOne(ctx, req.(*GetArticleOneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleOneReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_AddPostscript0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPostscriptArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceAddPostscript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPostscript(ctx, req.(*AddPostscriptArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddPostscriptArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Reward0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RewardArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Reward(ctx, req.(*RewardArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RewardArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Thank0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ThankArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceThank)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Thank(ctx, req.(*ThankArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ThankArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Like0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceLike)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Like(ctx, req.(*LikeArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Collect0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CollectArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Collect(ctx, req.(*CollectArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CollectArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_Watch0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WatchArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceWatch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Watch(ctx, req.(*WatchArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WatchArticleReply)
		return ctx.Result(200, reply)
	}
}

func _ContentArticleService_AcceptAnswer0_HTTP_Handler(srv ContentArticleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AcceptAnswerArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationContentArticleServiceAcceptAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AcceptAnswer(ctx, req.(*AcceptAnswerArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AcceptAnswerArticleReply)
		return ctx.Result(200, reply)
	}
}

type ContentArticleServiceHTTPClient interface {
	// AcceptAnswer 采纳评论
	AcceptAnswer(ctx context.Context, req *AcceptAnswerArticleRequest, opts ...http.CallOption) (rsp *AcceptAnswerArticleReply, err error)
	// Add 新增文章
	Add(ctx context.Context, req *AddArticleRequest, opts ...http.CallOption) (rsp *AddArticleReply, err error)
	// AddPostscript 添加附言
	AddPostscript(ctx context.Context, req *AddPostscriptArticleRequest, opts ...http.CallOption) (rsp *AddPostscriptArticleReply, err error)
	// Collect 收藏文章
	Collect(ctx context.Context, req *CollectArticleRequest, opts ...http.CallOption) (rsp *CollectArticleReply, err error)
	// Delete 删除文章（仅草稿）
	Delete(ctx context.Context, req *DeleteArticleRequest, opts ...http.CallOption) (rsp *DeleteArticleReply, err error)
	// Get 查询文章
	Get(ctx context.Context, req *GetArticleRequest, opts ...http.CallOption) (rsp *GetArticleReply, err error)
	// GetOne 查询单篇文章
	GetOne(ctx context.Context, req *GetArticleOneRequest, opts ...http.CallOption) (rsp *GetArticleOneReply, err error)
	// Like 点赞文章
	Like(ctx context.Context, req *LikeArticleRequest, opts ...http.CallOption) (rsp *LikeArticleReply, err error)
	// Publish 发布文章（从草稿发布）
	Publish(ctx context.Context, req *PublishArticleRequest, opts ...http.CallOption) (rsp *PublishArticleReply, err error)
	// Reward 打赏文章
	Reward(ctx context.Context, req *RewardArticleRequest, opts ...http.CallOption) (rsp *RewardArticleReply, err error)
	// Thank 感谢文章
	Thank(ctx context.Context, req *ThankArticleRequest, opts ...http.CallOption) (rsp *ThankArticleReply, err error)
	// Update 修改文章（管理员使用）
	Update(ctx context.Context, req *UpdateArticleRequest, opts ...http.CallOption) (rsp *UpdateArticleReply, err error)
	// Watch 关注文章
	Watch(ctx context.Context, req *WatchArticleRequest, opts ...http.CallOption) (rsp *WatchArticleReply, err error)
}

type ContentArticleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewContentArticleServiceHTTPClient(client *http.Client) ContentArticleServiceHTTPClient {
	return &ContentArticleServiceHTTPClientImpl{client}
}

// AcceptAnswer 采纳评论
func (c *ContentArticleServiceHTTPClientImpl) AcceptAnswer(ctx context.Context, in *AcceptAnswerArticleRequest, opts ...http.CallOption) (*AcceptAnswerArticleReply, error) {
	var out AcceptAnswerArticleReply
	pattern := "/v1/article/acceptAnswer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceAcceptAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Add 新增文章
func (c *ContentArticleServiceHTTPClientImpl) Add(ctx context.Context, in *AddArticleRequest, opts ...http.CallOption) (*AddArticleReply, error) {
	var out AddArticleReply
	pattern := "/v1/article/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// AddPostscript 添加附言
func (c *ContentArticleServiceHTTPClientImpl) AddPostscript(ctx context.Context, in *AddPostscriptArticleRequest, opts ...http.CallOption) (*AddPostscriptArticleReply, error) {
	var out AddPostscriptArticleReply
	pattern := "/v1/article/addPostscript"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceAddPostscript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Collect 收藏文章
func (c *ContentArticleServiceHTTPClientImpl) Collect(ctx context.Context, in *CollectArticleRequest, opts ...http.CallOption) (*CollectArticleReply, error) {
	var out CollectArticleReply
	pattern := "/v1/article/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Delete 删除文章（仅草稿）
func (c *ContentArticleServiceHTTPClientImpl) Delete(ctx context.Context, in *DeleteArticleRequest, opts ...http.CallOption) (*DeleteArticleReply, error) {
	var out DeleteArticleReply
	pattern := "/v1/article/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Get 查询文章
func (c *ContentArticleServiceHTTPClientImpl) Get(ctx context.Context, in *GetArticleRequest, opts ...http.CallOption) (*GetArticleReply, error) {
	var out GetArticleReply
	pattern := "/v1/article/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetOne 查询单篇文章
func (c *ContentArticleServiceHTTPClientImpl) GetOne(ctx context.Context, in *GetArticleOneRequest, opts ...http.CallOption) (*GetArticleOneReply, error) {
	var out GetArticleOneReply
	pattern := "/v1/article/getOne"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceGetOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Like 点赞文章
func (c *ContentArticleServiceHTTPClientImpl) Like(ctx context.Context, in *LikeArticleRequest, opts ...http.CallOption) (*LikeArticleReply, error) {
	var out LikeArticleReply
	pattern := "/v1/article/like"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceLike))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Publish 发布文章（从草稿发布）
func (c *ContentArticleServiceHTTPClientImpl) Publish(ctx context.Context, in *PublishArticleRequest, opts ...http.CallOption) (*PublishArticleReply, error) {
	var out PublishArticleReply
	pattern := "/v1/article/publish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServicePublish))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Reward 打赏文章
func (c *ContentArticleServiceHTTPClientImpl) Reward(ctx context.Context, in *RewardArticleRequest, opts ...http.CallOption) (*RewardArticleReply, error) {
	var out RewardArticleReply
	pattern := "/v1/article/reward"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Thank 感谢文章
func (c *ContentArticleServiceHTTPClientImpl) Thank(ctx context.Context, in *ThankArticleRequest, opts ...http.CallOption) (*ThankArticleReply, error) {
	var out ThankArticleReply
	pattern := "/v1/article/thank"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceThank))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Update 修改文章（管理员使用）
func (c *ContentArticleServiceHTTPClientImpl) Update(ctx context.Context, in *UpdateArticleRequest, opts ...http.CallOption) (*UpdateArticleReply, error) {
	var out UpdateArticleReply
	pattern := "/v1/article/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Watch 关注文章
func (c *ContentArticleServiceHTTPClientImpl) Watch(ctx context.Context, in *WatchArticleRequest, opts ...http.CallOption) (*WatchArticleReply, error) {
	var out WatchArticleReply
	pattern := "/v1/article/watch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationContentArticleServiceWatch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
