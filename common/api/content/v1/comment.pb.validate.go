// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: content/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	// no validation rules for UserId

	// no validation rules for Content

	// no validation rules for Level

	// no validation rules for ParentId

	// no validation rules for ReplyId

	// no validation rules for Status

	// no validation rules for ReplyCount

	// no validation rules for LikeCount

	// no validation rules for CollectCount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequestMultiError, or nil if none found.
func (m *AddCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	// no validation rules for Content

	// no validation rules for ReplyId

	if len(errors) > 0 {
		return AddCommentRequestMultiError(errors)
	}

	return nil
}

// AddCommentRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequestMultiError) AllErrors() []error { return m }

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on AddCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentReplyMultiError, or nil if none found.
func (m *AddCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddCommentReplyMultiError(errors)
	}

	return nil
}

// AddCommentReplyMultiError is an error wrapping multiple validation errors
// returned by AddCommentReply.ValidateAll() if the designated constraints
// aren't met.
type AddCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentReplyMultiError) AllErrors() []error { return m }

// AddCommentReplyValidationError is the validation error returned by
// AddCommentReply.Validate if the designated constraints aren't met.
type AddCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentReplyValidationError) ErrorName() string { return "AddCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentReplyValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	// no validation rules for Order

	// no validation rules for UserId

	if m.Page != nil {

		if all {
			switch v := interface{}(m.GetPage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentRequestValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentRequestValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentReplyMultiError, or nil if none found.
func (m *GetCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentReplyValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentReplyMultiError(errors)
	}

	return nil
}

// GetCommentReplyMultiError is an error wrapping multiple validation errors
// returned by GetCommentReply.ValidateAll() if the designated constraints
// aren't met.
type GetCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReplyMultiError) AllErrors() []error { return m }

// GetCommentReplyValidationError is the validation error returned by
// GetCommentReply.Validate if the designated constraints aren't met.
type GetCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReplyValidationError) ErrorName() string { return "GetCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReplyValidationError{}

// Validate checks the field values on LikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeCommentRequestMultiError, or nil if none found.
func (m *LikeCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Active

	if len(errors) > 0 {
		return LikeCommentRequestMultiError(errors)
	}

	return nil
}

// LikeCommentRequestMultiError is an error wrapping multiple validation errors
// returned by LikeCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeCommentRequestMultiError) AllErrors() []error { return m }

// LikeCommentRequestValidationError is the validation error returned by
// LikeCommentRequest.Validate if the designated constraints aren't met.
type LikeCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeCommentRequestValidationError) ErrorName() string {
	return "LikeCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeCommentRequestValidationError{}

// Validate checks the field values on LikeCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeCommentReplyMultiError, or nil if none found.
func (m *LikeCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LikeCommentReplyMultiError(errors)
	}

	return nil
}

// LikeCommentReplyMultiError is an error wrapping multiple validation errors
// returned by LikeCommentReply.ValidateAll() if the designated constraints
// aren't met.
type LikeCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeCommentReplyMultiError) AllErrors() []error { return m }

// LikeCommentReplyValidationError is the validation error returned by
// LikeCommentReply.Validate if the designated constraints aren't met.
type LikeCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeCommentReplyValidationError) ErrorName() string { return "LikeCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e LikeCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeCommentReplyValidationError{}

// Validate checks the field values on ThankCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThankCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThankCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThankCommentRequestMultiError, or nil if none found.
func (m *ThankCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ThankCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Active

	if len(errors) > 0 {
		return ThankCommentRequestMultiError(errors)
	}

	return nil
}

// ThankCommentRequestMultiError is an error wrapping multiple validation
// errors returned by ThankCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type ThankCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThankCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThankCommentRequestMultiError) AllErrors() []error { return m }

// ThankCommentRequestValidationError is the validation error returned by
// ThankCommentRequest.Validate if the designated constraints aren't met.
type ThankCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThankCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThankCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThankCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThankCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThankCommentRequestValidationError) ErrorName() string {
	return "ThankCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ThankCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThankCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThankCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThankCommentRequestValidationError{}

// Validate checks the field values on ThankCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThankCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThankCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThankCommentReplyMultiError, or nil if none found.
func (m *ThankCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ThankCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ThankCommentReplyMultiError(errors)
	}

	return nil
}

// ThankCommentReplyMultiError is an error wrapping multiple validation errors
// returned by ThankCommentReply.ValidateAll() if the designated constraints
// aren't met.
type ThankCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThankCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThankCommentReplyMultiError) AllErrors() []error { return m }

// ThankCommentReplyValidationError is the validation error returned by
// ThankCommentReply.Validate if the designated constraints aren't met.
type ThankCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThankCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThankCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThankCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThankCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThankCommentReplyValidationError) ErrorName() string {
	return "ThankCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ThankCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThankCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThankCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThankCommentReplyValidationError{}

// Validate checks the field values on UpdateStatusCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusCommentRequestMultiError, or nil if none found.
func (m *UpdateStatusCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateStatusCommentRequestMultiError(errors)
	}

	return nil
}

// UpdateStatusCommentRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStatusCommentRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStatusCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusCommentRequestMultiError) AllErrors() []error { return m }

// UpdateStatusCommentRequestValidationError is the validation error returned
// by UpdateStatusCommentRequest.Validate if the designated constraints aren't met.
type UpdateStatusCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusCommentRequestValidationError) ErrorName() string {
	return "UpdateStatusCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusCommentRequestValidationError{}

// Validate checks the field values on UpdateStatusCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusCommentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusCommentReplyMultiError, or nil if none found.
func (m *UpdateStatusCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStatusCommentReplyMultiError(errors)
	}

	return nil
}

// UpdateStatusCommentReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateStatusCommentReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatusCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusCommentReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusCommentReplyMultiError) AllErrors() []error { return m }

// UpdateStatusCommentReplyValidationError is the validation error returned by
// UpdateStatusCommentReply.Validate if the designated constraints aren't met.
type UpdateStatusCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusCommentReplyValidationError) ErrorName() string {
	return "UpdateStatusCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusCommentReplyValidationError{}
