// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: content/v1/comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentCommentService_Add_FullMethodName          = "/common.api.content.v1.ContentCommentService/Add"
	ContentCommentService_Get_FullMethodName          = "/common.api.content.v1.ContentCommentService/Get"
	ContentCommentService_Like_FullMethodName         = "/common.api.content.v1.ContentCommentService/Like"
	ContentCommentService_Thank_FullMethodName        = "/common.api.content.v1.ContentCommentService/Thank"
	ContentCommentService_UpdateStatus_FullMethodName = "/common.api.content.v1.ContentCommentService/UpdateStatus"
)

// ContentCommentServiceClient is the client API for ContentCommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 评论服务
type ContentCommentServiceClient interface {
	// 新增评论
	Add(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentReply, error)
	// 查询评论列表
	Get(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentReply, error)
	// 点赞评论
	Like(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentReply, error)
	// 感谢评论
	Thank(ctx context.Context, in *ThankCommentRequest, opts ...grpc.CallOption) (*ThankCommentReply, error)
	// 修改评论状态
	UpdateStatus(ctx context.Context, in *UpdateStatusCommentRequest, opts ...grpc.CallOption) (*UpdateStatusCommentReply, error)
}

type contentCommentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentCommentServiceClient(cc grpc.ClientConnInterface) ContentCommentServiceClient {
	return &contentCommentServiceClient{cc}
}

func (c *contentCommentServiceClient) Add(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentReply)
	err := c.cc.Invoke(ctx, ContentCommentService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCommentServiceClient) Get(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentReply)
	err := c.cc.Invoke(ctx, ContentCommentService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCommentServiceClient) Like(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCommentReply)
	err := c.cc.Invoke(ctx, ContentCommentService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCommentServiceClient) Thank(ctx context.Context, in *ThankCommentRequest, opts ...grpc.CallOption) (*ThankCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThankCommentReply)
	err := c.cc.Invoke(ctx, ContentCommentService_Thank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentCommentServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusCommentRequest, opts ...grpc.CallOption) (*UpdateStatusCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusCommentReply)
	err := c.cc.Invoke(ctx, ContentCommentService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentCommentServiceServer is the server API for ContentCommentService service.
// All implementations must embed UnimplementedContentCommentServiceServer
// for forward compatibility.
//
// 评论服务
type ContentCommentServiceServer interface {
	// 新增评论
	Add(context.Context, *AddCommentRequest) (*AddCommentReply, error)
	// 查询评论列表
	Get(context.Context, *GetCommentRequest) (*GetCommentReply, error)
	// 点赞评论
	Like(context.Context, *LikeCommentRequest) (*LikeCommentReply, error)
	// 感谢评论
	Thank(context.Context, *ThankCommentRequest) (*ThankCommentReply, error)
	// 修改评论状态
	UpdateStatus(context.Context, *UpdateStatusCommentRequest) (*UpdateStatusCommentReply, error)
	mustEmbedUnimplementedContentCommentServiceServer()
}

// UnimplementedContentCommentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentCommentServiceServer struct{}

func (UnimplementedContentCommentServiceServer) Add(context.Context, *AddCommentRequest) (*AddCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedContentCommentServiceServer) Get(context.Context, *GetCommentRequest) (*GetCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContentCommentServiceServer) Like(context.Context, *LikeCommentRequest) (*LikeCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedContentCommentServiceServer) Thank(context.Context, *ThankCommentRequest) (*ThankCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thank not implemented")
}
func (UnimplementedContentCommentServiceServer) UpdateStatus(context.Context, *UpdateStatusCommentRequest) (*UpdateStatusCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedContentCommentServiceServer) mustEmbedUnimplementedContentCommentServiceServer() {}
func (UnimplementedContentCommentServiceServer) testEmbeddedByValue()                               {}

// UnsafeContentCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentCommentServiceServer will
// result in compilation errors.
type UnsafeContentCommentServiceServer interface {
	mustEmbedUnimplementedContentCommentServiceServer()
}

func RegisterContentCommentServiceServer(s grpc.ServiceRegistrar, srv ContentCommentServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentCommentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentCommentService_ServiceDesc, srv)
}

func _ContentCommentService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCommentServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCommentService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCommentServiceServer).Add(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCommentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCommentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCommentService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCommentServiceServer).Get(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCommentService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCommentServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCommentService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCommentServiceServer).Like(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCommentService_Thank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThankCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCommentServiceServer).Thank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCommentService_Thank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCommentServiceServer).Thank(ctx, req.(*ThankCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentCommentService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCommentServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentCommentService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCommentServiceServer).UpdateStatus(ctx, req.(*UpdateStatusCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentCommentService_ServiceDesc is the grpc.ServiceDesc for ContentCommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentCommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.api.content.v1.ContentCommentService",
	HandlerType: (*ContentCommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ContentCommentService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContentCommentService_Get_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _ContentCommentService_Like_Handler,
		},
		{
			MethodName: "Thank",
			Handler:    _ContentCommentService_Thank_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ContentCommentService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/v1/comment.proto",
}
