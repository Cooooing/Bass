// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.29.0--rc2
// source: content/v1/comment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommentServiceAdd = "/content.v1.CommentService/Add"
const OperationCommentServiceGet = "/content.v1.CommentService/Get"
const OperationCommentServiceLike = "/content.v1.CommentService/Like"
const OperationCommentServiceThank = "/content.v1.CommentService/Thank"
const OperationCommentServiceUpdateStatus = "/content.v1.CommentService/UpdateStatus"

type CommentServiceHTTPServer interface {
	// Add 新增评论
	Add(context.Context, *AddCommentRequest) (*AddCommentReply, error)
	// Get 查询评论
	Get(context.Context, *GetCommentRequest) (*GetCommentReply, error)
	// Like 点赞评论
	Like(context.Context, *LikeCommentRequest) (*LikeCommentReply, error)
	// Thank 感谢评论
	Thank(context.Context, *ThankCommentRequest) (*ThankCommentReply, error)
	// UpdateStatus 修改评论状态
	UpdateStatus(context.Context, *UpdateStatusCommentRequest) (*UpdateStatusCommentReply, error)
}

func RegisterCommentServiceHTTPServer(s *http.Server, srv CommentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/comment/add", _CommentService_Add1_HTTP_Handler(srv))
	r.GET("/v1/comment/get", _CommentService_Get1_HTTP_Handler(srv))
	r.POST("/v1/comment/like", _CommentService_Like1_HTTP_Handler(srv))
	r.POST("/v1/comment/thank", _CommentService_Thank1_HTTP_Handler(srv))
	r.POST("/v1/comment/updateStatus", _CommentService_UpdateStatus0_HTTP_Handler(srv))
}

func _CommentService_Add1_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddCommentReply)
		return ctx.Result(200, reply)
	}
}

func _CommentService_Get1_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentReply)
		return ctx.Result(200, reply)
	}
}

func _CommentService_Like1_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceLike)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Like(ctx, req.(*LikeCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeCommentReply)
		return ctx.Result(200, reply)
	}
}

func _CommentService_Thank1_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ThankCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceThank)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Thank(ctx, req.(*ThankCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ThankCommentReply)
		return ctx.Result(200, reply)
	}
}

func _CommentService_UpdateStatus0_HTTP_Handler(srv CommentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStatusCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentServiceUpdateStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStatus(ctx, req.(*UpdateStatusCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStatusCommentReply)
		return ctx.Result(200, reply)
	}
}

type CommentServiceHTTPClient interface {
	// Add 新增评论
	Add(ctx context.Context, req *AddCommentRequest, opts ...http.CallOption) (rsp *AddCommentReply, err error)
	// Get 查询评论
	Get(ctx context.Context, req *GetCommentRequest, opts ...http.CallOption) (rsp *GetCommentReply, err error)
	// Like 点赞评论
	Like(ctx context.Context, req *LikeCommentRequest, opts ...http.CallOption) (rsp *LikeCommentReply, err error)
	// Thank 感谢评论
	Thank(ctx context.Context, req *ThankCommentRequest, opts ...http.CallOption) (rsp *ThankCommentReply, err error)
	// UpdateStatus 修改评论状态
	UpdateStatus(ctx context.Context, req *UpdateStatusCommentRequest, opts ...http.CallOption) (rsp *UpdateStatusCommentReply, err error)
}

type CommentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCommentServiceHTTPClient(client *http.Client) CommentServiceHTTPClient {
	return &CommentServiceHTTPClientImpl{client}
}

// Add 新增评论
func (c *CommentServiceHTTPClientImpl) Add(ctx context.Context, in *AddCommentRequest, opts ...http.CallOption) (*AddCommentReply, error) {
	var out AddCommentReply
	pattern := "/v1/comment/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentServiceAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Get 查询评论
func (c *CommentServiceHTTPClientImpl) Get(ctx context.Context, in *GetCommentRequest, opts ...http.CallOption) (*GetCommentReply, error) {
	var out GetCommentReply
	pattern := "/v1/comment/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommentServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Like 点赞评论
func (c *CommentServiceHTTPClientImpl) Like(ctx context.Context, in *LikeCommentRequest, opts ...http.CallOption) (*LikeCommentReply, error) {
	var out LikeCommentReply
	pattern := "/v1/comment/like"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentServiceLike))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Thank 感谢评论
func (c *CommentServiceHTTPClientImpl) Thank(ctx context.Context, in *ThankCommentRequest, opts ...http.CallOption) (*ThankCommentReply, error) {
	var out ThankCommentReply
	pattern := "/v1/comment/thank"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentServiceThank))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateStatus 修改评论状态
func (c *CommentServiceHTTPClientImpl) UpdateStatus(ctx context.Context, in *UpdateStatusCommentRequest, opts ...http.CallOption) (*UpdateStatusCommentReply, error) {
	var out UpdateStatusCommentReply
	pattern := "/v1/comment/updateStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentServiceUpdateStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
