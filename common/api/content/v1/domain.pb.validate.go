// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: content/v1/domain.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DomainMultiError, or nil if none found.
func (m *Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DomainValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DomainValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DomainValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DomainValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DomainValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DomainValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for TagCount

	// no validation rules for IsNav

	if len(errors) > 0 {
		return DomainMultiError(errors)
	}

	return nil
}

// DomainMultiError is an error wrapping multiple validation errors returned by
// Domain.ValidateAll() if the designated constraints aren't met.
type DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainMultiError) AllErrors() []error { return m }

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on AddDomainRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDomainRequestMultiError, or nil if none found.
func (m *AddDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for IsNav

	if len(errors) > 0 {
		return AddDomainRequestMultiError(errors)
	}

	return nil
}

// AddDomainRequestMultiError is an error wrapping multiple validation errors
// returned by AddDomainRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDomainRequestMultiError) AllErrors() []error { return m }

// AddDomainRequestValidationError is the validation error returned by
// AddDomainRequest.Validate if the designated constraints aren't met.
type AddDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainRequestValidationError) ErrorName() string { return "AddDomainRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainRequestValidationError{}

// Validate checks the field values on AddDomainReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddDomainReplyMultiError,
// or nil if none found.
func (m *AddDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddDomainReplyMultiError(errors)
	}

	return nil
}

// AddDomainReplyMultiError is an error wrapping multiple validation errors
// returned by AddDomainReply.ValidateAll() if the designated constraints
// aren't met.
type AddDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDomainReplyMultiError) AllErrors() []error { return m }

// AddDomainReplyValidationError is the validation error returned by
// AddDomainReply.Validate if the designated constraints aren't met.
type AddDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainReplyValidationError) ErrorName() string { return "AddDomainReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainReplyValidationError{}

// Validate checks the field values on GetDomainRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDomainRequestMultiError, or nil if none found.
func (m *GetDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for IsNav

	if m.Page != nil {

		if all {
			switch v := interface{}(m.GetPage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDomainRequestValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDomainRequestValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDomainRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDomainRequestMultiError(errors)
	}

	return nil
}

// GetDomainRequestMultiError is an error wrapping multiple validation errors
// returned by GetDomainRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainRequestMultiError) AllErrors() []error { return m }

// GetDomainRequestValidationError is the validation error returned by
// GetDomainRequest.Validate if the designated constraints aren't met.
type GetDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainRequestValidationError) ErrorName() string { return "GetDomainRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainRequestValidationError{}

// Validate checks the field values on GetDomainReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDomainReplyMultiError,
// or nil if none found.
func (m *GetDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDomainReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDomainReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDomainReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {

		if all {
			switch v := interface{}(m.GetPage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDomainReplyValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDomainReplyValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDomainReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDomainReplyMultiError(errors)
	}

	return nil
}

// GetDomainReplyMultiError is an error wrapping multiple validation errors
// returned by GetDomainReply.ValidateAll() if the designated constraints
// aren't met.
type GetDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainReplyMultiError) AllErrors() []error { return m }

// GetDomainReplyValidationError is the validation error returned by
// GetDomainReply.Validate if the designated constraints aren't met.
type GetDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainReplyValidationError) ErrorName() string { return "GetDomainReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainReplyValidationError{}

// Validate checks the field values on UpdateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainRequestMultiError, or nil if none found.
func (m *UpdateDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Url

	// no validation rules for Icon

	// no validation rules for IsNav

	if len(errors) > 0 {
		return UpdateDomainRequestMultiError(errors)
	}

	return nil
}

// UpdateDomainRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainRequestMultiError) AllErrors() []error { return m }

// UpdateDomainRequestValidationError is the validation error returned by
// UpdateDomainRequest.Validate if the designated constraints aren't met.
type UpdateDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainRequestValidationError) ErrorName() string {
	return "UpdateDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainRequestValidationError{}

// Validate checks the field values on UpdateDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainReplyMultiError, or nil if none found.
func (m *UpdateDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateDomainReplyMultiError(errors)
	}

	return nil
}

// UpdateDomainReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDomainReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainReplyMultiError) AllErrors() []error { return m }

// UpdateDomainReplyValidationError is the validation error returned by
// UpdateDomainReply.Validate if the designated constraints aren't met.
type UpdateDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainReplyValidationError) ErrorName() string {
	return "UpdateDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainReplyValidationError{}
