// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.29.0--rc2
// source: content/v1/domain.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDomainServiceAdd = "/content.v1.DomainService/Add"
const OperationDomainServiceGet = "/content.v1.DomainService/Get"
const OperationDomainServiceUpdate = "/content.v1.DomainService/Update"

type DomainServiceHTTPServer interface {
	// Add 新增领域
	Add(context.Context, *AddDomainRequest) (*AddDomainReply, error)
	// Get 查询领域
	Get(context.Context, *GetDomainRequest) (*GetDomainReply, error)
	// Update 修改领域信息
	Update(context.Context, *UpdateDomainRequest) (*UpdateDomainReply, error)
}

func RegisterDomainServiceHTTPServer(s *http.Server, srv DomainServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/domain/add", _DomainService_Add2_HTTP_Handler(srv))
	r.POST("/v1/domain/get", _DomainService_Get2_HTTP_Handler(srv))
	r.POST("/v1/domain/update", _DomainService_Update1_HTTP_Handler(srv))
}

func _DomainService_Add2_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddDomainReply)
		return ctx.Result(200, reply)
	}
}

func _DomainService_Get2_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDomainReply)
		return ctx.Result(200, reply)
	}
}

func _DomainService_Update1_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainReply)
		return ctx.Result(200, reply)
	}
}

type DomainServiceHTTPClient interface {
	// Add 新增领域
	Add(ctx context.Context, req *AddDomainRequest, opts ...http.CallOption) (rsp *AddDomainReply, err error)
	// Get 查询领域
	Get(ctx context.Context, req *GetDomainRequest, opts ...http.CallOption) (rsp *GetDomainReply, err error)
	// Update 修改领域信息
	Update(ctx context.Context, req *UpdateDomainRequest, opts ...http.CallOption) (rsp *UpdateDomainReply, err error)
}

type DomainServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDomainServiceHTTPClient(client *http.Client) DomainServiceHTTPClient {
	return &DomainServiceHTTPClientImpl{client}
}

// Add 新增领域
func (c *DomainServiceHTTPClientImpl) Add(ctx context.Context, in *AddDomainRequest, opts ...http.CallOption) (*AddDomainReply, error) {
	var out AddDomainReply
	pattern := "/v1/domain/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Get 查询领域
func (c *DomainServiceHTTPClientImpl) Get(ctx context.Context, in *GetDomainRequest, opts ...http.CallOption) (*GetDomainReply, error) {
	var out GetDomainReply
	pattern := "/v1/domain/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Update 修改领域信息
func (c *DomainServiceHTTPClientImpl) Update(ctx context.Context, in *UpdateDomainRequest, opts ...http.CallOption) (*UpdateDomainReply, error) {
	var out UpdateDomainReply
	pattern := "/v1/domain/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
