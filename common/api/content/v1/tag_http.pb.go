// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.29.0--rc2
// source: content/v1/tag.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTagServiceGet = "/content.v1.TagService/Get"

type TagServiceHTTPServer interface {
	Get(context.Context, *GetTagRequest) (*GetTagReply, error)
}

func RegisterTagServiceHTTPServer(s *http.Server, srv TagServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/tag/get", _TagService_Get3_HTTP_Handler(srv))
}

func _TagService_Get3_HTTP_Handler(srv TagServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTagServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTagReply)
		return ctx.Result(200, reply)
	}
}

type TagServiceHTTPClient interface {
	Get(ctx context.Context, req *GetTagRequest, opts ...http.CallOption) (rsp *GetTagReply, err error)
}

type TagServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTagServiceHTTPClient(client *http.Client) TagServiceHTTPClient {
	return &TagServiceHTTPClientImpl{client}
}

func (c *TagServiceHTTPClientImpl) Get(ctx context.Context, in *GetTagRequest, opts ...http.CallOption) (*GetTagReply, error) {
	var out GetTagReply
	pattern := "/api/v1/tag/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTagServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
