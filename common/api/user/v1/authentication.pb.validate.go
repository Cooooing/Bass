// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/authentication.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEmailRequestMultiError, or nil if none found.
func (m *RegisterEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetEmail()); l < 5 || l > 320 {
		err := RegisterEmailRequestValidationError{
			field:  "Email",
			reason: "value length must be between 5 and 320 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 64 {
		err := RegisterEmailRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterEmailRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := RegisterEmailRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^[A-Za-z0-9@#$%^&*!()_+\\\\-=\\\\[\\\\]{};:'\\\",.<>/?`~|\\\\\\\\]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 4 || l > 32 {
		err := RegisterEmailRequestValidationError{
			field:  "Name",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterEmailRequest_Name_Pattern.MatchString(m.GetName()) {
		err := RegisterEmailRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickname()); l < 2 || l > 32 {
		err := RegisterEmailRequestValidationError{
			field:  "Nickname",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterEmailRequest_Nickname_Pattern.MatchString(m.GetNickname()) {
		err := RegisterEmailRequestValidationError{
			field:  "Nickname",
			reason: "value does not match regex pattern \"^[0-9A-Za-z_\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\\\p{Sk}\\\\p{Cf}-]*[\\\\p{L}\\\\p{M}\\\\p{So}\\\\p{Sk}\\\\p{Cf}_-][0-9A-Za-z_\\\\p{L}\\\\p{M}\\\\p{N}\\\\p{So}\\\\p{Sk}\\\\p{Cf}-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterEmailRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterEmailRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEmailRequestMultiError) AllErrors() []error { return m }

// RegisterEmailRequestValidationError is the validation error returned by
// RegisterEmailRequest.Validate if the designated constraints aren't met.
type RegisterEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEmailRequestValidationError) ErrorName() string {
	return "RegisterEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEmailRequestValidationError{}

var _RegisterEmailRequest_Password_Pattern = regexp.MustCompile("^[A-Za-z0-9@#$%^&*!()_+\\-=\\[\\]{};:'\",.<>/?`~|\\\\]+$")

var _RegisterEmailRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$")

var _RegisterEmailRequest_Nickname_Pattern = regexp.MustCompile("^[0-9A-Za-z_\\p{L}\\p{M}\\p{N}\\p{So}\\p{Sk}\\p{Cf}-]*[\\p{L}\\p{M}\\p{So}\\p{Sk}\\p{Cf}_-][0-9A-Za-z_\\p{L}\\p{M}\\p{N}\\p{So}\\p{Sk}\\p{Cf}-]*$")

// Validate checks the field values on RegisterEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEmailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEmailReplyMultiError, or nil if none found.
func (m *RegisterEmailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEmailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CodeToken

	// no validation rules for Code

	if len(errors) > 0 {
		return RegisterEmailReplyMultiError(errors)
	}

	return nil
}

// RegisterEmailReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterEmailReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterEmailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEmailReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEmailReplyMultiError) AllErrors() []error { return m }

// RegisterEmailReplyValidationError is the validation error returned by
// RegisterEmailReply.Validate if the designated constraints aren't met.
type RegisterEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEmailReplyValidationError) ErrorName() string {
	return "RegisterEmailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEmailReplyValidationError{}

// Validate checks the field values on RegisterEmailVerifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEmailVerifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEmailVerifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEmailVerifyRequestMultiError, or nil if none found.
func (m *RegisterEmailVerifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEmailVerifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := RegisterEmailVerifyRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_RegisterEmailVerifyRequest_Code_Pattern.MatchString(m.GetCode()) {
		err := RegisterEmailVerifyRequestValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CodeToken

	if len(errors) > 0 {
		return RegisterEmailVerifyRequestMultiError(errors)
	}

	return nil
}

// RegisterEmailVerifyRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterEmailVerifyRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterEmailVerifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEmailVerifyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEmailVerifyRequestMultiError) AllErrors() []error { return m }

// RegisterEmailVerifyRequestValidationError is the validation error returned
// by RegisterEmailVerifyRequest.Validate if the designated constraints aren't met.
type RegisterEmailVerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEmailVerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEmailVerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEmailVerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEmailVerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEmailVerifyRequestValidationError) ErrorName() string {
	return "RegisterEmailVerifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEmailVerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEmailVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEmailVerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEmailVerifyRequestValidationError{}

var _RegisterEmailVerifyRequest_Code_Pattern = regexp.MustCompile("^[A-Za-z0-9]+$")

// Validate checks the field values on RegisterEmailVerifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEmailVerifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEmailVerifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEmailVerifyReplyMultiError, or nil if none found.
func (m *RegisterEmailVerifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEmailVerifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterEmailVerifyReplyMultiError(errors)
	}

	return nil
}

// RegisterEmailVerifyReplyMultiError is an error wrapping multiple validation
// errors returned by RegisterEmailVerifyReply.ValidateAll() if the designated
// constraints aren't met.
type RegisterEmailVerifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEmailVerifyReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEmailVerifyReplyMultiError) AllErrors() []error { return m }

// RegisterEmailVerifyReplyValidationError is the validation error returned by
// RegisterEmailVerifyReply.Validate if the designated constraints aren't met.
type RegisterEmailVerifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEmailVerifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEmailVerifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEmailVerifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEmailVerifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEmailVerifyReplyValidationError) ErrorName() string {
	return "RegisterEmailVerifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEmailVerifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEmailVerifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEmailVerifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEmailVerifyReplyValidationError{}

// Validate checks the field values on ExistEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExistEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistEmailRequestMultiError, or nil if none found.
func (m *ExistEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetEmail()); l < 5 || l > 320 {
		err := ExistEmailRequestValidationError{
			field:  "Email",
			reason: "value length must be between 5 and 320 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = ExistEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExistEmailRequestMultiError(errors)
	}

	return nil
}

func (m *ExistEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ExistEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ExistEmailRequestMultiError is an error wrapping multiple validation errors
// returned by ExistEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type ExistEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistEmailRequestMultiError) AllErrors() []error { return m }

// ExistEmailRequestValidationError is the validation error returned by
// ExistEmailRequest.Validate if the designated constraints aren't met.
type ExistEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistEmailRequestValidationError) ErrorName() string {
	return "ExistEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistEmailRequestValidationError{}

// Validate checks the field values on ExistEmailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExistEmailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistEmailReplyMultiError, or nil if none found.
func (m *ExistEmailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistEmailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Exist != nil {
		// no validation rules for Exist
	}

	if len(errors) > 0 {
		return ExistEmailReplyMultiError(errors)
	}

	return nil
}

// ExistEmailReplyMultiError is an error wrapping multiple validation errors
// returned by ExistEmailReply.ValidateAll() if the designated constraints
// aren't met.
type ExistEmailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistEmailReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistEmailReplyMultiError) AllErrors() []error { return m }

// ExistEmailReplyValidationError is the validation error returned by
// ExistEmailReply.Validate if the designated constraints aren't met.
type ExistEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistEmailReplyValidationError) ErrorName() string { return "ExistEmailReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExistEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistEmailReplyValidationError{}

// Validate checks the field values on ExistUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistUsernameRequestMultiError, or nil if none found.
func (m *ExistUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 2 || l > 32 {
		err := ExistUsernameRequestValidationError{
			field:  "Username",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ExistUsernameRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := ExistUsernameRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[0-9A-Za-z_\\\\p{L}\\\\p{M}-]*[^0-9][0-9A-Za-z_\\\\p{L}\\\\p{M}-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExistUsernameRequestMultiError(errors)
	}

	return nil
}

// ExistUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by ExistUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type ExistUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUsernameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUsernameRequestMultiError) AllErrors() []error { return m }

// ExistUsernameRequestValidationError is the validation error returned by
// ExistUsernameRequest.Validate if the designated constraints aren't met.
type ExistUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUsernameRequestValidationError) ErrorName() string {
	return "ExistUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistUsernameRequestValidationError{}

var _ExistUsernameRequest_Username_Pattern = regexp.MustCompile("^[0-9A-Za-z_\\p{L}\\p{M}-]*[^0-9][0-9A-Za-z_\\p{L}\\p{M}-]*$")

// Validate checks the field values on ExistUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistUsernameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistUsernameReplyMultiError, or nil if none found.
func (m *ExistUsernameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUsernameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Exist != nil {
		// no validation rules for Exist
	}

	if len(errors) > 0 {
		return ExistUsernameReplyMultiError(errors)
	}

	return nil
}

// ExistUsernameReplyMultiError is an error wrapping multiple validation errors
// returned by ExistUsernameReply.ValidateAll() if the designated constraints
// aren't met.
type ExistUsernameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUsernameReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUsernameReplyMultiError) AllErrors() []error { return m }

// ExistUsernameReplyValidationError is the validation error returned by
// ExistUsernameReply.Validate if the designated constraints aren't met.
type ExistUsernameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUsernameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUsernameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUsernameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistUsernameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUsernameReplyValidationError) ErrorName() string {
	return "ExistUsernameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExistUsernameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUsernameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUsernameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistUsernameReplyValidationError{}

// Validate checks the field values on ExistPhoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExistPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistPhoneRequestMultiError, or nil if none found.
func (m *ExistPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := ExistPhoneRequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_ExistPhoneRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := ExistPhoneRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\\\d{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExistPhoneRequestMultiError(errors)
	}

	return nil
}

// ExistPhoneRequestMultiError is an error wrapping multiple validation errors
// returned by ExistPhoneRequest.ValidateAll() if the designated constraints
// aren't met.
type ExistPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistPhoneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistPhoneRequestMultiError) AllErrors() []error { return m }

// ExistPhoneRequestValidationError is the validation error returned by
// ExistPhoneRequest.Validate if the designated constraints aren't met.
type ExistPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistPhoneRequestValidationError) ErrorName() string {
	return "ExistPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistPhoneRequestValidationError{}

var _ExistPhoneRequest_Phone_Pattern = regexp.MustCompile("^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$")

// Validate checks the field values on ExistPhoneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExistPhoneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistPhoneReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistPhoneReplyMultiError, or nil if none found.
func (m *ExistPhoneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistPhoneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Exist != nil {
		// no validation rules for Exist
	}

	if len(errors) > 0 {
		return ExistPhoneReplyMultiError(errors)
	}

	return nil
}

// ExistPhoneReplyMultiError is an error wrapping multiple validation errors
// returned by ExistPhoneReply.ValidateAll() if the designated constraints
// aren't met.
type ExistPhoneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistPhoneReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistPhoneReplyMultiError) AllErrors() []error { return m }

// ExistPhoneReplyValidationError is the validation error returned by
// ExistPhoneReply.Validate if the designated constraints aren't met.
type ExistPhoneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistPhoneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistPhoneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistPhoneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistPhoneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistPhoneReplyValidationError) ErrorName() string { return "ExistPhoneReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExistPhoneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistPhoneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistPhoneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistPhoneReplyValidationError{}

// Validate checks the field values on LoginAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginAccountRequestMultiError, or nil if none found.
func (m *LoginAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginAccountRequestMultiError(errors)
	}

	return nil
}

// LoginAccountRequestMultiError is an error wrapping multiple validation
// errors returned by LoginAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginAccountRequestMultiError) AllErrors() []error { return m }

// LoginAccountRequestValidationError is the validation error returned by
// LoginAccountRequest.Validate if the designated constraints aren't met.
type LoginAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginAccountRequestValidationError) ErrorName() string {
	return "LoginAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginAccountRequestValidationError{}

// Validate checks the field values on LoginAccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginAccountReplyMultiError, or nil if none found.
func (m *LoginAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginAccountReplyMultiError(errors)
	}

	return nil
}

// LoginAccountReplyMultiError is an error wrapping multiple validation errors
// returned by LoginAccountReply.ValidateAll() if the designated constraints
// aren't met.
type LoginAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginAccountReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginAccountReplyMultiError) AllErrors() []error { return m }

// LoginAccountReplyValidationError is the validation error returned by
// LoginAccountReply.Validate if the designated constraints aren't met.
type LoginAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginAccountReplyValidationError) ErrorName() string {
	return "LoginAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LoginAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginAccountReplyValidationError{}
