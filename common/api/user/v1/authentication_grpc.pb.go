// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: user/v1/authentication.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Authentication_RegisterEmail_FullMethodName       = "/common.api.common.user.v1.Authentication/RegisterEmail"
	Authentication_RegisterEmailVerify_FullMethodName = "/common.api.common.user.v1.Authentication/RegisterEmailVerify"
	Authentication_ExistEmail_FullMethodName          = "/common.api.common.user.v1.Authentication/ExistEmail"
	Authentication_ExistPhone_FullMethodName          = "/common.api.common.user.v1.Authentication/ExistPhone"
	Authentication_ExistUsername_FullMethodName       = "/common.api.common.user.v1.Authentication/ExistUsername"
	Authentication_LoginAccount_FullMethodName        = "/common.api.common.user.v1.Authentication/LoginAccount"
)

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Authentication 服务
type AuthenticationClient interface {
	// 邮箱注册
	RegisterEmail(ctx context.Context, in *RegisterEmailRequest, opts ...grpc.CallOption) (*RegisterEmailReply, error)
	// 邮箱注册验证码验证
	RegisterEmailVerify(ctx context.Context, in *RegisterEmailVerifyRequest, opts ...grpc.CallOption) (*RegisterEmailVerifyReply, error)
	// 邮箱是否存在
	ExistEmail(ctx context.Context, in *ExistEmailRequest, opts ...grpc.CallOption) (*ExistEmailReply, error)
	// 手机号是否存在
	ExistPhone(ctx context.Context, in *ExistPhoneRequest, opts ...grpc.CallOption) (*ExistPhoneReply, error)
	// 用户名是否存在
	ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameReply, error)
	// 账号登录（用户名/邮箱）
	LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountReply, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) RegisterEmail(ctx context.Context, in *RegisterEmailRequest, opts ...grpc.CallOption) (*RegisterEmailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterEmailReply)
	err := c.cc.Invoke(ctx, Authentication_RegisterEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RegisterEmailVerify(ctx context.Context, in *RegisterEmailVerifyRequest, opts ...grpc.CallOption) (*RegisterEmailVerifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterEmailVerifyReply)
	err := c.cc.Invoke(ctx, Authentication_RegisterEmailVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ExistEmail(ctx context.Context, in *ExistEmailRequest, opts ...grpc.CallOption) (*ExistEmailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistEmailReply)
	err := c.cc.Invoke(ctx, Authentication_ExistEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ExistPhone(ctx context.Context, in *ExistPhoneRequest, opts ...grpc.CallOption) (*ExistPhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistPhoneReply)
	err := c.cc.Invoke(ctx, Authentication_ExistPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistUsernameReply)
	err := c.cc.Invoke(ctx, Authentication_ExistUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginAccountReply)
	err := c.cc.Invoke(ctx, Authentication_LoginAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility.
//
// Authentication 服务
type AuthenticationServer interface {
	// 邮箱注册
	RegisterEmail(context.Context, *RegisterEmailRequest) (*RegisterEmailReply, error)
	// 邮箱注册验证码验证
	RegisterEmailVerify(context.Context, *RegisterEmailVerifyRequest) (*RegisterEmailVerifyReply, error)
	// 邮箱是否存在
	ExistEmail(context.Context, *ExistEmailRequest) (*ExistEmailReply, error)
	// 手机号是否存在
	ExistPhone(context.Context, *ExistPhoneRequest) (*ExistPhoneReply, error)
	// 用户名是否存在
	ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameReply, error)
	// 账号登录（用户名/邮箱）
	LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountReply, error)
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthenticationServer struct{}

func (UnimplementedAuthenticationServer) RegisterEmail(context.Context, *RegisterEmailRequest) (*RegisterEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmail not implemented")
}
func (UnimplementedAuthenticationServer) RegisterEmailVerify(context.Context, *RegisterEmailVerifyRequest) (*RegisterEmailVerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmailVerify not implemented")
}
func (UnimplementedAuthenticationServer) ExistEmail(context.Context, *ExistEmailRequest) (*ExistEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistEmail not implemented")
}
func (UnimplementedAuthenticationServer) ExistPhone(context.Context, *ExistPhoneRequest) (*ExistPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistPhone not implemented")
}
func (UnimplementedAuthenticationServer) ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUsername not implemented")
}
func (UnimplementedAuthenticationServer) LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccount not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}
func (UnimplementedAuthenticationServer) testEmbeddedByValue()                        {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	// If the following call pancis, it indicates UnimplementedAuthenticationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_RegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_RegisterEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RegisterEmail(ctx, req.(*RegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RegisterEmailVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEmailVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RegisterEmailVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_RegisterEmailVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RegisterEmailVerify(ctx, req.(*RegisterEmailVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ExistEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ExistEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_ExistEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ExistEmail(ctx, req.(*ExistEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ExistPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ExistPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_ExistPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ExistPhone(ctx, req.(*ExistPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ExistUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ExistUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_ExistUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ExistUsername(ctx, req.(*ExistUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_LoginAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).LoginAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_LoginAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).LoginAccount(ctx, req.(*LoginAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.api.common.user.v1.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEmail",
			Handler:    _Authentication_RegisterEmail_Handler,
		},
		{
			MethodName: "RegisterEmailVerify",
			Handler:    _Authentication_RegisterEmailVerify_Handler,
		},
		{
			MethodName: "ExistEmail",
			Handler:    _Authentication_ExistEmail_Handler,
		},
		{
			MethodName: "ExistPhone",
			Handler:    _Authentication_ExistPhone_Handler,
		},
		{
			MethodName: "ExistUsername",
			Handler:    _Authentication_ExistUsername_Handler,
		},
		{
			MethodName: "LoginAccount",
			Handler:    _Authentication_LoginAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/authentication.proto",
}
