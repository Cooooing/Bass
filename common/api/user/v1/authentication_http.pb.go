// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.29.0--rc2
// source: user/v1/authentication.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthenticationExistEmail = "/user.v1.Authentication/ExistEmail"
const OperationAuthenticationExistPhone = "/user.v1.Authentication/ExistPhone"
const OperationAuthenticationExistUsername = "/user.v1.Authentication/ExistUsername"
const OperationAuthenticationLoginAccount = "/user.v1.Authentication/LoginAccount"
const OperationAuthenticationRegisterEmail = "/user.v1.Authentication/RegisterEmail"
const OperationAuthenticationRegisterEmailVerify = "/user.v1.Authentication/RegisterEmailVerify"

type AuthenticationHTTPServer interface {
	// ExistEmail 邮箱是否存在
	ExistEmail(context.Context, *ExistEmailRequest) (*ExistEmailReply, error)
	// ExistPhone 手机号是否存在
	ExistPhone(context.Context, *ExistPhoneRequest) (*ExistPhoneReply, error)
	// ExistUsername 用户名是否存在
	ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameReply, error)
	// LoginAccount 账号登录（用户名/邮箱）
	LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountReply, error)
	// RegisterEmail 邮箱注册
	RegisterEmail(context.Context, *RegisterEmailRequest) (*RegisterEmailReply, error)
	// RegisterEmailVerify 邮箱注册验证码验证
	RegisterEmailVerify(context.Context, *RegisterEmailVerifyRequest) (*RegisterEmailVerifyReply, error)
}

func RegisterAuthenticationHTTPServer(s *http.Server, srv AuthenticationHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/authentication/register/email", _Authentication_RegisterEmail0_HTTP_Handler(srv))
	r.POST("/v1/authentication/register/email/verify", _Authentication_RegisterEmailVerify0_HTTP_Handler(srv))
	r.POST("/v1/authentication/exist/email", _Authentication_ExistEmail0_HTTP_Handler(srv))
	r.POST("/v1/authentication/exist/phone", _Authentication_ExistPhone0_HTTP_Handler(srv))
	r.POST("/v1/authentication/exist/username", _Authentication_ExistUsername0_HTTP_Handler(srv))
	r.POST("/v1/authentication/login/account", _Authentication_LoginAccount0_HTTP_Handler(srv))
}

func _Authentication_RegisterEmail0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationRegisterEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterEmail(ctx, req.(*RegisterEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Authentication_RegisterEmailVerify0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterEmailVerifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationRegisterEmailVerify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterEmailVerify(ctx, req.(*RegisterEmailVerifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterEmailVerifyReply)
		return ctx.Result(200, reply)
	}
}

func _Authentication_ExistEmail0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExistEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationExistEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistEmail(ctx, req.(*ExistEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExistEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Authentication_ExistPhone0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExistPhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationExistPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistPhone(ctx, req.(*ExistPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExistPhoneReply)
		return ctx.Result(200, reply)
	}
}

func _Authentication_ExistUsername0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExistUsernameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationExistUsername)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistUsername(ctx, req.(*ExistUsernameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExistUsernameReply)
		return ctx.Result(200, reply)
	}
}

func _Authentication_LoginAccount0_HTTP_Handler(srv AuthenticationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthenticationLoginAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginAccount(ctx, req.(*LoginAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginAccountReply)
		return ctx.Result(200, reply)
	}
}

type AuthenticationHTTPClient interface {
	// ExistEmail 邮箱是否存在
	ExistEmail(ctx context.Context, req *ExistEmailRequest, opts ...http.CallOption) (rsp *ExistEmailReply, err error)
	// ExistPhone 手机号是否存在
	ExistPhone(ctx context.Context, req *ExistPhoneRequest, opts ...http.CallOption) (rsp *ExistPhoneReply, err error)
	// ExistUsername 用户名是否存在
	ExistUsername(ctx context.Context, req *ExistUsernameRequest, opts ...http.CallOption) (rsp *ExistUsernameReply, err error)
	// LoginAccount 账号登录（用户名/邮箱）
	LoginAccount(ctx context.Context, req *LoginAccountRequest, opts ...http.CallOption) (rsp *LoginAccountReply, err error)
	// RegisterEmail 邮箱注册
	RegisterEmail(ctx context.Context, req *RegisterEmailRequest, opts ...http.CallOption) (rsp *RegisterEmailReply, err error)
	// RegisterEmailVerify 邮箱注册验证码验证
	RegisterEmailVerify(ctx context.Context, req *RegisterEmailVerifyRequest, opts ...http.CallOption) (rsp *RegisterEmailVerifyReply, err error)
}

type AuthenticationHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthenticationHTTPClient(client *http.Client) AuthenticationHTTPClient {
	return &AuthenticationHTTPClientImpl{client}
}

// ExistEmail 邮箱是否存在
func (c *AuthenticationHTTPClientImpl) ExistEmail(ctx context.Context, in *ExistEmailRequest, opts ...http.CallOption) (*ExistEmailReply, error) {
	var out ExistEmailReply
	pattern := "/v1/authentication/exist/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationExistEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ExistPhone 手机号是否存在
func (c *AuthenticationHTTPClientImpl) ExistPhone(ctx context.Context, in *ExistPhoneRequest, opts ...http.CallOption) (*ExistPhoneReply, error) {
	var out ExistPhoneReply
	pattern := "/v1/authentication/exist/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationExistPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ExistUsername 用户名是否存在
func (c *AuthenticationHTTPClientImpl) ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...http.CallOption) (*ExistUsernameReply, error) {
	var out ExistUsernameReply
	pattern := "/v1/authentication/exist/username"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationExistUsername))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// LoginAccount 账号登录（用户名/邮箱）
func (c *AuthenticationHTTPClientImpl) LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...http.CallOption) (*LoginAccountReply, error) {
	var out LoginAccountReply
	pattern := "/v1/authentication/login/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationLoginAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RegisterEmail 邮箱注册
func (c *AuthenticationHTTPClientImpl) RegisterEmail(ctx context.Context, in *RegisterEmailRequest, opts ...http.CallOption) (*RegisterEmailReply, error) {
	var out RegisterEmailReply
	pattern := "/v1/authentication/register/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationRegisterEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RegisterEmailVerify 邮箱注册验证码验证
func (c *AuthenticationHTTPClientImpl) RegisterEmailVerify(ctx context.Context, in *RegisterEmailVerifyRequest, opts ...http.CallOption) (*RegisterEmailVerifyReply, error) {
	var out RegisterEmailVerifyReply
	pattern := "/v1/authentication/register/email/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthenticationRegisterEmailVerify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
