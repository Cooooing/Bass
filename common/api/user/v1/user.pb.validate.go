// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Nickname

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Url

	// no validation rules for AvatarUrl

	// no validation rules for Introduction

	// no validation rules for Mbti

	// no validation rules for Status

	// no validation rules for GroupName

	// no validation rules for FollowCount

	// no validation rules for FollowerCount

	if all {
		switch v := interface{}(m.GetLastLoginTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "LastLoginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "LastLoginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "LastLoginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LastLoginIp

	// no validation rules for OnlineMinutes

	if all {
		switch v := interface{}(m.GetLastCheckinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "LastCheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "LastCheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCheckinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "LastCheckinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CurrentCheckinStreak

	// no validation rules for LongestCheckinStreak

	// no validation rules for Language

	// no validation rules for Timezone

	// no validation rules for Theme

	// no validation rules for MobileTheme

	// no validation rules for EnableWebNotify

	// no validation rules for EnableEmailSubscribe

	// no validation rules for PublicPoints

	// no validation rules for PublicFollowers

	// no validation rules for PublicArticles

	// no validation rules for PublicComments

	// no validation rules for PublicOnlineStatus

	// no validation rules for Country

	// no validation rules for Province

	// no validation rules for City

	// no validation rules for PublicLocation

	// no validation rules for TwofaSecret

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on GetOneRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOneRequestMultiError, or
// nil if none found.
func (m *GetOneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOneRequestMultiError(errors)
	}

	return nil
}

// GetOneRequestMultiError is an error wrapping multiple validation errors
// returned by GetOneRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneRequestMultiError) AllErrors() []error { return m }

// GetOneRequestValidationError is the validation error returned by
// GetOneRequest.Validate if the designated constraints aren't met.
type GetOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneRequestValidationError) ErrorName() string { return "GetOneRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneRequestValidationError{}

// Validate checks the field values on GetOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOneReplyMultiError, or
// nil if none found.
func (m *GetOneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOneReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOneReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOneReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOneReplyMultiError(errors)
	}

	return nil
}

// GetOneReplyMultiError is an error wrapping multiple validation errors
// returned by GetOneReply.ValidateAll() if the designated constraints aren't met.
type GetOneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneReplyMultiError) AllErrors() []error { return m }

// GetOneReplyValidationError is the validation error returned by
// GetOneReply.Validate if the designated constraints aren't met.
type GetOneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneReplyValidationError) ErrorName() string { return "GetOneReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetOneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneReplyValidationError{}

// Validate checks the field values on GetListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListRequestMultiError,
// or nil if none found.
func (m *GetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetListRequestMultiError(errors)
	}

	return nil
}

// GetListRequestMultiError is an error wrapping multiple validation errors
// returned by GetListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListRequestMultiError) AllErrors() []error { return m }

// GetListRequestValidationError is the validation error returned by
// GetListRequest.Validate if the designated constraints aren't met.
type GetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListRequestValidationError) ErrorName() string { return "GetListRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListRequestValidationError{}

// Validate checks the field values on GetListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetListReplyMultiError, or
// nil if none found.
func (m *GetListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListReplyMultiError(errors)
	}

	return nil
}

// GetListReplyMultiError is an error wrapping multiple validation errors
// returned by GetListReply.ValidateAll() if the designated constraints aren't met.
type GetListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListReplyMultiError) AllErrors() []error { return m }

// GetListReplyValidationError is the validation error returned by
// GetListReply.Validate if the designated constraints aren't met.
type GetListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListReplyValidationError) ErrorName() string { return "GetListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListReplyValidationError{}

// Validate checks the field values on GetMapRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMapRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMapRequestMultiError, or
// nil if none found.
func (m *GetMapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMapRequestMultiError(errors)
	}

	return nil
}

// GetMapRequestMultiError is an error wrapping multiple validation errors
// returned by GetMapRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMapRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMapRequestMultiError) AllErrors() []error { return m }

// GetMapRequestValidationError is the validation error returned by
// GetMapRequest.Validate if the designated constraints aren't met.
type GetMapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMapRequestValidationError) ErrorName() string { return "GetMapRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMapRequestValidationError{}

// Validate checks the field values on GetMapReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMapReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMapReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMapReplyMultiError, or
// nil if none found.
func (m *GetMapReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMapReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetUsers()))
		i := 0
		for key := range m.GetUsers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUsers()[key]
			_ = val

			// no validation rules for Users[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetMapReplyValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetMapReplyValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetMapReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetMapReplyMultiError(errors)
	}

	return nil
}

// GetMapReplyMultiError is an error wrapping multiple validation errors
// returned by GetMapReply.ValidateAll() if the designated constraints aren't met.
type GetMapReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMapReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMapReplyMultiError) AllErrors() []error { return m }

// GetMapReplyValidationError is the validation error returned by
// GetMapReply.Validate if the designated constraints aren't met.
type GetMapReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMapReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMapReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMapReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMapReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMapReplyValidationError) ErrorName() string { return "GetMapReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetMapReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMapReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMapReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMapReplyValidationError{}
