// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: user/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserUserService_GetOne_FullMethodName  = "/common.api.user.v1.UserUserService/GetOne"
	UserUserService_GetList_FullMethodName = "/common.api.user.v1.UserUserService/GetList"
	UserUserService_GetMap_FullMethodName  = "/common.api.user.v1.UserUserService/GetMap"
)

// UserUserServiceClient is the client API for UserUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Authentication 服务
type UserUserServiceClient interface {
	// 查询单个用户
	GetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneReply, error)
	// 查询用户列表（返回数组）
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListReply, error)
	// 查询用户列表（返回map）
	GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapReply, error)
}

type userUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUserServiceClient(cc grpc.ClientConnInterface) UserUserServiceClient {
	return &userUserServiceClient{cc}
}

func (c *userUserServiceClient) GetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneReply)
	err := c.cc.Invoke(ctx, UserUserService_GetOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUserServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListReply)
	err := c.cc.Invoke(ctx, UserUserService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUserServiceClient) GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapReply)
	err := c.cc.Invoke(ctx, UserUserService_GetMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUserServiceServer is the server API for UserUserService service.
// All implementations must embed UnimplementedUserUserServiceServer
// for forward compatibility.
//
// Authentication 服务
type UserUserServiceServer interface {
	// 查询单个用户
	GetOne(context.Context, *GetOneRequest) (*GetOneReply, error)
	// 查询用户列表（返回数组）
	GetList(context.Context, *GetListRequest) (*GetListReply, error)
	// 查询用户列表（返回map）
	GetMap(context.Context, *GetMapRequest) (*GetMapReply, error)
	mustEmbedUnimplementedUserUserServiceServer()
}

// UnimplementedUserUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserUserServiceServer struct{}

func (UnimplementedUserUserServiceServer) GetOne(context.Context, *GetOneRequest) (*GetOneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedUserUserServiceServer) GetList(context.Context, *GetListRequest) (*GetListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedUserUserServiceServer) GetMap(context.Context, *GetMapRequest) (*GetMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedUserUserServiceServer) mustEmbedUnimplementedUserUserServiceServer() {}
func (UnimplementedUserUserServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUserServiceServer will
// result in compilation errors.
type UnsafeUserUserServiceServer interface {
	mustEmbedUnimplementedUserUserServiceServer()
}

func RegisterUserUserServiceServer(s grpc.ServiceRegistrar, srv UserUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserUserService_ServiceDesc, srv)
}

func _UserUserService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUserServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserUserService_GetOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUserServiceServer).GetOne(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUserService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUserServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserUserService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUserServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUserService_GetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUserServiceServer).GetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserUserService_GetMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUserServiceServer).GetMap(ctx, req.(*GetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUserService_ServiceDesc is the grpc.ServiceDesc for UserUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.api.user.v1.UserUserService",
	HandlerType: (*UserUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _UserUserService_GetOne_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _UserUserService_GetList_Handler,
		},
		{
			MethodName: "GetMap",
			Handler:    _UserUserService_GetMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
