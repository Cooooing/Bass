// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.29.0--rc2
// source: user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserUserServiceGetList = "/common.api.user.v1.UserUserService/GetList"
const OperationUserUserServiceGetMap = "/common.api.user.v1.UserUserService/GetMap"
const OperationUserUserServiceGetOne = "/common.api.user.v1.UserUserService/GetOne"

type UserUserServiceHTTPServer interface {
	// GetList 查询用户列表（返回数组）
	GetList(context.Context, *GetListRequest) (*GetListReply, error)
	// GetMap 查询用户列表（返回map）
	GetMap(context.Context, *GetMapRequest) (*GetMapReply, error)
	// GetOne 查询单个用户
	GetOne(context.Context, *GetOneRequest) (*GetOneReply, error)
}

func RegisterUserUserServiceHTTPServer(s *http.Server, srv UserUserServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/getOne", _UserUserService_GetOne1_HTTP_Handler(srv))
	r.POST("/v1/user/getList", _UserUserService_GetList0_HTTP_Handler(srv))
	r.POST("/v1/user/getMap", _UserUserService_GetMap0_HTTP_Handler(srv))
}

func _UserUserService_GetOne1_HTTP_Handler(srv UserUserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserServiceGetOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOne(ctx, req.(*GetOneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOneReply)
		return ctx.Result(200, reply)
	}
}

func _UserUserService_GetList0_HTTP_Handler(srv UserUserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserServiceGetList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetList(ctx, req.(*GetListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetListReply)
		return ctx.Result(200, reply)
	}
}

func _UserUserService_GetMap0_HTTP_Handler(srv UserUserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMapRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserServiceGetMap)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMap(ctx, req.(*GetMapRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMapReply)
		return ctx.Result(200, reply)
	}
}

type UserUserServiceHTTPClient interface {
	// GetList 查询用户列表（返回数组）
	GetList(ctx context.Context, req *GetListRequest, opts ...http.CallOption) (rsp *GetListReply, err error)
	// GetMap 查询用户列表（返回map）
	GetMap(ctx context.Context, req *GetMapRequest, opts ...http.CallOption) (rsp *GetMapReply, err error)
	// GetOne 查询单个用户
	GetOne(ctx context.Context, req *GetOneRequest, opts ...http.CallOption) (rsp *GetOneReply, err error)
}

type UserUserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserUserServiceHTTPClient(client *http.Client) UserUserServiceHTTPClient {
	return &UserUserServiceHTTPClientImpl{client}
}

// GetList 查询用户列表（返回数组）
func (c *UserUserServiceHTTPClientImpl) GetList(ctx context.Context, in *GetListRequest, opts ...http.CallOption) (*GetListReply, error) {
	var out GetListReply
	pattern := "/v1/user/getList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserServiceGetList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetMap 查询用户列表（返回map）
func (c *UserUserServiceHTTPClientImpl) GetMap(ctx context.Context, in *GetMapRequest, opts ...http.CallOption) (*GetMapReply, error) {
	var out GetMapReply
	pattern := "/v1/user/getMap"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserServiceGetMap))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetOne 查询单个用户
func (c *UserUserServiceHTTPClientImpl) GetOne(ctx context.Context, in *GetOneRequest, opts ...http.CallOption) (*GetOneReply, error) {
	var out GetOneReply
	pattern := "/v1/user/getOne"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserServiceGetOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
